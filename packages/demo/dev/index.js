(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb2, mod) => function __require() {
    return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toESM = (module, isNodeMode) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // ../../node_modules/core-js/modules/_global.js
  var require_global = __commonJS({
    "../../node_modules/core-js/modules/_global.js"(exports, module) {
      var global2 = module.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      if (typeof __g == "number")
        __g = global2;
    }
  });

  // ../../node_modules/core-js/modules/_has.js
  var require_has = __commonJS({
    "../../node_modules/core-js/modules/_has.js"(exports, module) {
      var hasOwnProperty = {}.hasOwnProperty;
      module.exports = function(it, key) {
        return hasOwnProperty.call(it, key);
      };
    }
  });

  // ../../node_modules/core-js/modules/_fails.js
  var require_fails = __commonJS({
    "../../node_modules/core-js/modules/_fails.js"(exports, module) {
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
    }
  });

  // ../../node_modules/core-js/modules/_descriptors.js
  var require_descriptors = __commonJS({
    "../../node_modules/core-js/modules/_descriptors.js"(exports, module) {
      module.exports = !require_fails()(function() {
        return Object.defineProperty({}, "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    }
  });

  // ../../node_modules/core-js/modules/_core.js
  var require_core = __commonJS({
    "../../node_modules/core-js/modules/_core.js"(exports, module) {
      var core = module.exports = { version: "2.6.12" };
      if (typeof __e == "number")
        __e = core;
    }
  });

  // ../../node_modules/core-js/modules/_is-object.js
  var require_is_object = __commonJS({
    "../../node_modules/core-js/modules/_is-object.js"(exports, module) {
      module.exports = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
      };
    }
  });

  // ../../node_modules/core-js/modules/_an-object.js
  var require_an_object = __commonJS({
    "../../node_modules/core-js/modules/_an-object.js"(exports, module) {
      var isObject5 = require_is_object();
      module.exports = function(it) {
        if (!isObject5(it))
          throw TypeError(it + " is not an object!");
        return it;
      };
    }
  });

  // ../../node_modules/core-js/modules/_dom-create.js
  var require_dom_create = __commonJS({
    "../../node_modules/core-js/modules/_dom-create.js"(exports, module) {
      var isObject5 = require_is_object();
      var document2 = require_global().document;
      var is = isObject5(document2) && isObject5(document2.createElement);
      module.exports = function(it) {
        return is ? document2.createElement(it) : {};
      };
    }
  });

  // ../../node_modules/core-js/modules/_ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "../../node_modules/core-js/modules/_ie8-dom-define.js"(exports, module) {
      module.exports = !require_descriptors() && !require_fails()(function() {
        return Object.defineProperty(require_dom_create()("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    }
  });

  // ../../node_modules/core-js/modules/_to-primitive.js
  var require_to_primitive = __commonJS({
    "../../node_modules/core-js/modules/_to-primitive.js"(exports, module) {
      var isObject5 = require_is_object();
      module.exports = function(it, S) {
        if (!isObject5(it))
          return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == "function" && !isObject5(val = fn.call(it)))
          return val;
        if (typeof (fn = it.valueOf) == "function" && !isObject5(val = fn.call(it)))
          return val;
        if (!S && typeof (fn = it.toString) == "function" && !isObject5(val = fn.call(it)))
          return val;
        throw TypeError("Can't convert object to primitive value");
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-dp.js
  var require_object_dp = __commonJS({
    "../../node_modules/core-js/modules/_object-dp.js"(exports) {
      var anObject = require_an_object();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var toPrimitive = require_to_primitive();
      var dP = Object.defineProperty;
      exports.f = require_descriptors() ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return dP(O, P, Attributes);
          } catch (e) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw TypeError("Accessors not supported!");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // ../../node_modules/core-js/modules/_property-desc.js
  var require_property_desc = __commonJS({
    "../../node_modules/core-js/modules/_property-desc.js"(exports, module) {
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/_hide.js
  var require_hide = __commonJS({
    "../../node_modules/core-js/modules/_hide.js"(exports, module) {
      var dP = require_object_dp();
      var createDesc = require_property_desc();
      module.exports = require_descriptors() ? function(object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // ../../node_modules/core-js/modules/_uid.js
  var require_uid = __commonJS({
    "../../node_modules/core-js/modules/_uid.js"(exports, module) {
      var id = 0;
      var px4 = Math.random();
      module.exports = function(key) {
        return "Symbol(".concat(key === void 0 ? "" : key, ")_", (++id + px4).toString(36));
      };
    }
  });

  // ../../node_modules/core-js/modules/_library.js
  var require_library = __commonJS({
    "../../node_modules/core-js/modules/_library.js"(exports, module) {
      module.exports = false;
    }
  });

  // ../../node_modules/core-js/modules/_shared.js
  var require_shared = __commonJS({
    "../../node_modules/core-js/modules/_shared.js"(exports, module) {
      var core = require_core();
      var global2 = require_global();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || (global2[SHARED] = {});
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: core.version,
        mode: require_library() ? "pure" : "global",
        copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)"
      });
    }
  });

  // ../../node_modules/core-js/modules/_function-to-string.js
  var require_function_to_string = __commonJS({
    "../../node_modules/core-js/modules/_function-to-string.js"(exports, module) {
      module.exports = require_shared()("native-function-to-string", Function.toString);
    }
  });

  // ../../node_modules/core-js/modules/_redefine.js
  var require_redefine = __commonJS({
    "../../node_modules/core-js/modules/_redefine.js"(exports, module) {
      var global2 = require_global();
      var hide = require_hide();
      var has = require_has();
      var SRC = require_uid()("src");
      var $toString = require_function_to_string();
      var TO_STRING = "toString";
      var TPL = ("" + $toString).split(TO_STRING);
      require_core().inspectSource = function(it) {
        return $toString.call(it);
      };
      (module.exports = function(O, key, val, safe) {
        var isFunction5 = typeof val == "function";
        if (isFunction5)
          has(val, "name") || hide(val, "name", key);
        if (O[key] === val)
          return;
        if (isFunction5)
          has(val, SRC) || hide(val, SRC, O[key] ? "" + O[key] : TPL.join(String(key)));
        if (O === global2) {
          O[key] = val;
        } else if (!safe) {
          delete O[key];
          hide(O, key, val);
        } else if (O[key]) {
          O[key] = val;
        } else {
          hide(O, key, val);
        }
      })(Function.prototype, TO_STRING, function toString() {
        return typeof this == "function" && this[SRC] || $toString.call(this);
      });
    }
  });

  // ../../node_modules/core-js/modules/_a-function.js
  var require_a_function = __commonJS({
    "../../node_modules/core-js/modules/_a-function.js"(exports, module) {
      module.exports = function(it) {
        if (typeof it != "function")
          throw TypeError(it + " is not a function!");
        return it;
      };
    }
  });

  // ../../node_modules/core-js/modules/_ctx.js
  var require_ctx = __commonJS({
    "../../node_modules/core-js/modules/_ctx.js"(exports, module) {
      var aFunction = require_a_function();
      module.exports = function(fn, that, length) {
        aFunction(fn);
        if (that === void 0)
          return fn;
        switch (length) {
          case 1:
            return function(a2) {
              return fn.call(that, a2);
            };
          case 2:
            return function(a2, b2) {
              return fn.call(that, a2, b2);
            };
          case 3:
            return function(a2, b2, c2) {
              return fn.call(that, a2, b2, c2);
            };
        }
        return function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/_export.js
  var require_export = __commonJS({
    "../../node_modules/core-js/modules/_export.js"(exports, module) {
      var global2 = require_global();
      var core = require_core();
      var hide = require_hide();
      var redefine = require_redefine();
      var ctx = require_ctx();
      var PROTOTYPE = "prototype";
      var $export = function(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var target = IS_GLOBAL ? global2 : IS_STATIC ? global2[name] || (global2[name] = {}) : (global2[name] || {})[PROTOTYPE];
        var exports2 = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports2[PROTOTYPE] || (exports2[PROTOTYPE] = {});
        var key, own, out, exp;
        if (IS_GLOBAL)
          source = name;
        for (key in source) {
          own = !IS_FORCED && target && target[key] !== void 0;
          out = (own ? target : source)[key];
          exp = IS_BIND && own ? ctx(out, global2) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
          if (target)
            redefine(target, key, out, type & $export.U);
          if (exports2[key] != out)
            hide(exports2, key, exp);
          if (IS_PROTO && expProto[key] != out)
            expProto[key] = out;
        }
      };
      global2.core = core;
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      $export.U = 64;
      $export.R = 128;
      module.exports = $export;
    }
  });

  // ../../node_modules/core-js/modules/_meta.js
  var require_meta = __commonJS({
    "../../node_modules/core-js/modules/_meta.js"(exports, module) {
      var META = require_uid()("meta");
      var isObject5 = require_is_object();
      var has = require_has();
      var setDesc = require_object_dp().f;
      var id = 0;
      var isExtensible = Object.isExtensible || function() {
        return true;
      };
      var FREEZE = !require_fails()(function() {
        return isExtensible(Object.preventExtensions({}));
      });
      var setMeta = function(it) {
        setDesc(it, META, { value: {
          i: "O" + ++id,
          w: {}
        } });
      };
      var fastKey = function(it, create) {
        if (!isObject5(it))
          return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
        if (!has(it, META)) {
          if (!isExtensible(it))
            return "F";
          if (!create)
            return "E";
          setMeta(it);
        }
        return it[META].i;
      };
      var getWeak = function(it, create) {
        if (!has(it, META)) {
          if (!isExtensible(it))
            return true;
          if (!create)
            return false;
          setMeta(it);
        }
        return it[META].w;
      };
      var onFreeze = function(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META))
          setMeta(it);
        return it;
      };
      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey,
        getWeak,
        onFreeze
      };
    }
  });

  // ../../node_modules/core-js/modules/_wks.js
  var require_wks = __commonJS({
    "../../node_modules/core-js/modules/_wks.js"(exports, module) {
      var store = require_shared()("wks");
      var uid = require_uid();
      var Symbol2 = require_global().Symbol;
      var USE_SYMBOL = typeof Symbol2 == "function";
      var $exports = module.exports = function(name) {
        return store[name] || (store[name] = USE_SYMBOL && Symbol2[name] || (USE_SYMBOL ? Symbol2 : uid)("Symbol." + name));
      };
      $exports.store = store;
    }
  });

  // ../../node_modules/core-js/modules/_set-to-string-tag.js
  var require_set_to_string_tag = __commonJS({
    "../../node_modules/core-js/modules/_set-to-string-tag.js"(exports, module) {
      var def = require_object_dp().f;
      var has = require_has();
      var TAG = require_wks()("toStringTag");
      module.exports = function(it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG))
          def(it, TAG, { configurable: true, value: tag });
      };
    }
  });

  // ../../node_modules/core-js/modules/_wks-ext.js
  var require_wks_ext = __commonJS({
    "../../node_modules/core-js/modules/_wks-ext.js"(exports) {
      exports.f = require_wks();
    }
  });

  // ../../node_modules/core-js/modules/_wks-define.js
  var require_wks_define = __commonJS({
    "../../node_modules/core-js/modules/_wks-define.js"(exports, module) {
      var global2 = require_global();
      var core = require_core();
      var LIBRARY = require_library();
      var wksExt = require_wks_ext();
      var defineProperty = require_object_dp().f;
      module.exports = function(name) {
        var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global2.Symbol || {});
        if (name.charAt(0) != "_" && !(name in $Symbol))
          defineProperty($Symbol, name, { value: wksExt.f(name) });
      };
    }
  });

  // ../../node_modules/core-js/modules/_cof.js
  var require_cof = __commonJS({
    "../../node_modules/core-js/modules/_cof.js"(exports, module) {
      var toString = {}.toString;
      module.exports = function(it) {
        return toString.call(it).slice(8, -1);
      };
    }
  });

  // ../../node_modules/core-js/modules/_iobject.js
  var require_iobject = __commonJS({
    "../../node_modules/core-js/modules/_iobject.js"(exports, module) {
      var cof = require_cof();
      module.exports = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
        return cof(it) == "String" ? it.split("") : Object(it);
      };
    }
  });

  // ../../node_modules/core-js/modules/_defined.js
  var require_defined = __commonJS({
    "../../node_modules/core-js/modules/_defined.js"(exports, module) {
      module.exports = function(it) {
        if (it == void 0)
          throw TypeError("Can't call method on  " + it);
        return it;
      };
    }
  });

  // ../../node_modules/core-js/modules/_to-iobject.js
  var require_to_iobject = __commonJS({
    "../../node_modules/core-js/modules/_to-iobject.js"(exports, module) {
      var IObject = require_iobject();
      var defined = require_defined();
      module.exports = function(it) {
        return IObject(defined(it));
      };
    }
  });

  // ../../node_modules/core-js/modules/_to-integer.js
  var require_to_integer = __commonJS({
    "../../node_modules/core-js/modules/_to-integer.js"(exports, module) {
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = function(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
    }
  });

  // ../../node_modules/core-js/modules/_to-length.js
  var require_to_length = __commonJS({
    "../../node_modules/core-js/modules/_to-length.js"(exports, module) {
      var toInteger = require_to_integer();
      var min = Math.min;
      module.exports = function(it) {
        return it > 0 ? min(toInteger(it), 9007199254740991) : 0;
      };
    }
  });

  // ../../node_modules/core-js/modules/_to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "../../node_modules/core-js/modules/_to-absolute-index.js"(exports, module) {
      var toInteger = require_to_integer();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
    }
  });

  // ../../node_modules/core-js/modules/_array-includes.js
  var require_array_includes = __commonJS({
    "../../node_modules/core-js/modules/_array-includes.js"(exports, module) {
      var toIObject = require_to_iobject();
      var toLength = require_to_length();
      var toAbsoluteIndex = require_to_absolute_index();
      module.exports = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++)
              if (IS_INCLUDES || index in O) {
                if (O[index] === el)
                  return IS_INCLUDES || index || 0;
              }
          return !IS_INCLUDES && -1;
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/_shared-key.js
  var require_shared_key = __commonJS({
    "../../node_modules/core-js/modules/_shared-key.js"(exports, module) {
      var shared = require_shared()("keys");
      var uid = require_uid();
      module.exports = function(key) {
        return shared[key] || (shared[key] = uid(key));
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "../../node_modules/core-js/modules/_object-keys-internal.js"(exports, module) {
      var has = require_has();
      var toIObject = require_to_iobject();
      var arrayIndexOf = require_array_includes()(false);
      var IE_PROTO = require_shared_key()("IE_PROTO");
      module.exports = function(object, names3) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          if (key != IE_PROTO)
            has(O, key) && result.push(key);
        while (names3.length > i)
          if (has(O, key = names3[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        return result;
      };
    }
  });

  // ../../node_modules/core-js/modules/_enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "../../node_modules/core-js/modules/_enum-bug-keys.js"(exports, module) {
      module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }
  });

  // ../../node_modules/core-js/modules/_object-keys.js
  var require_object_keys = __commonJS({
    "../../node_modules/core-js/modules/_object-keys.js"(exports, module) {
      var $keys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module.exports = Object.keys || function keys2(O) {
        return $keys(O, enumBugKeys);
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-gops.js
  var require_object_gops = __commonJS({
    "../../node_modules/core-js/modules/_object-gops.js"(exports) {
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // ../../node_modules/core-js/modules/_object-pie.js
  var require_object_pie = __commonJS({
    "../../node_modules/core-js/modules/_object-pie.js"(exports) {
      exports.f = {}.propertyIsEnumerable;
    }
  });

  // ../../node_modules/core-js/modules/_enum-keys.js
  var require_enum_keys = __commonJS({
    "../../node_modules/core-js/modules/_enum-keys.js"(exports, module) {
      var getKeys = require_object_keys();
      var gOPS = require_object_gops();
      var pIE = require_object_pie();
      module.exports = function(it) {
        var result = getKeys(it);
        var getSymbols = gOPS.f;
        if (getSymbols) {
          var symbols = getSymbols(it);
          var isEnum = pIE.f;
          var i = 0;
          var key;
          while (symbols.length > i)
            if (isEnum.call(it, key = symbols[i++]))
              result.push(key);
        }
        return result;
      };
    }
  });

  // ../../node_modules/core-js/modules/_is-array.js
  var require_is_array = __commonJS({
    "../../node_modules/core-js/modules/_is-array.js"(exports, module) {
      var cof = require_cof();
      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == "Array";
      };
    }
  });

  // ../../node_modules/core-js/modules/_to-object.js
  var require_to_object = __commonJS({
    "../../node_modules/core-js/modules/_to-object.js"(exports, module) {
      var defined = require_defined();
      module.exports = function(it) {
        return Object(defined(it));
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-dps.js
  var require_object_dps = __commonJS({
    "../../node_modules/core-js/modules/_object-dps.js"(exports, module) {
      var dP = require_object_dp();
      var anObject = require_an_object();
      var getKeys = require_object_keys();
      module.exports = require_descriptors() ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys2 = getKeys(Properties);
        var length = keys2.length;
        var i = 0;
        var P;
        while (length > i)
          dP.f(O, P = keys2[i++], Properties[P]);
        return O;
      };
    }
  });

  // ../../node_modules/core-js/modules/_html.js
  var require_html = __commonJS({
    "../../node_modules/core-js/modules/_html.js"(exports, module) {
      var document2 = require_global().document;
      module.exports = document2 && document2.documentElement;
    }
  });

  // ../../node_modules/core-js/modules/_object-create.js
  var require_object_create = __commonJS({
    "../../node_modules/core-js/modules/_object-create.js"(exports, module) {
      var anObject = require_an_object();
      var dPs = require_object_dps();
      var enumBugKeys = require_enum_bug_keys();
      var IE_PROTO = require_shared_key()("IE_PROTO");
      var Empty = function() {
      };
      var PROTOTYPE = "prototype";
      var createDict = function() {
        var iframe = require_dom_create()("iframe");
        var i = enumBugKeys.length;
        var lt = "<";
        var gt = ">";
        var iframeDocument;
        iframe.style.display = "none";
        require_html().appendChild(iframe);
        iframe.src = "javascript:";
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
        iframeDocument.close();
        createDict = iframeDocument.F;
        while (i--)
          delete createDict[PROTOTYPE][enumBugKeys[i]];
        return createDict();
      };
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = createDict();
        return Properties === void 0 ? result : dPs(result, Properties);
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-gopn.js
  var require_object_gopn = __commonJS({
    "../../node_modules/core-js/modules/_object-gopn.js"(exports) {
      var $keys = require_object_keys_internal();
      var hiddenKeys = require_enum_bug_keys().concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return $keys(O, hiddenKeys);
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-gopn-ext.js
  var require_object_gopn_ext = __commonJS({
    "../../node_modules/core-js/modules/_object-gopn-ext.js"(exports, module) {
      var toIObject = require_to_iobject();
      var gOPN = require_object_gopn().f;
      var toString = {}.toString;
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return gOPN(it);
        } catch (e) {
          return windowNames.slice();
        }
      };
      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN(toIObject(it));
      };
    }
  });

  // ../../node_modules/core-js/modules/_object-gopd.js
  var require_object_gopd = __commonJS({
    "../../node_modules/core-js/modules/_object-gopd.js"(exports) {
      var pIE = require_object_pie();
      var createDesc = require_property_desc();
      var toIObject = require_to_iobject();
      var toPrimitive = require_to_primitive();
      var has = require_has();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var gOPD = Object.getOwnPropertyDescriptor;
      exports.f = require_descriptors() ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE)
          try {
            return gOPD(O, P);
          } catch (e) {
          }
        if (has(O, P))
          return createDesc(!pIE.f.call(O, P), O[P]);
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.symbol.js
  var require_es6_symbol = __commonJS({
    "../../node_modules/core-js/modules/es6.symbol.js"() {
      "use strict";
      var global2 = require_global();
      var has = require_has();
      var DESCRIPTORS = require_descriptors();
      var $export = require_export();
      var redefine = require_redefine();
      var META = require_meta().KEY;
      var $fails = require_fails();
      var shared = require_shared();
      var setToStringTag = require_set_to_string_tag();
      var uid = require_uid();
      var wks = require_wks();
      var wksExt = require_wks_ext();
      var wksDefine = require_wks_define();
      var enumKeys = require_enum_keys();
      var isArray = require_is_array();
      var anObject = require_an_object();
      var isObject5 = require_is_object();
      var toObject = require_to_object();
      var toIObject = require_to_iobject();
      var toPrimitive = require_to_primitive();
      var createDesc = require_property_desc();
      var _create = require_object_create();
      var gOPNExt = require_object_gopn_ext();
      var $GOPD = require_object_gopd();
      var $GOPS = require_object_gops();
      var $DP = require_object_dp();
      var $keys = require_object_keys();
      var gOPD = $GOPD.f;
      var dP = $DP.f;
      var gOPN = gOPNExt.f;
      var $Symbol = global2.Symbol;
      var $JSON = global2.JSON;
      var _stringify = $JSON && $JSON.stringify;
      var PROTOTYPE = "prototype";
      var HIDDEN = wks("_hidden");
      var TO_PRIMITIVE = wks("toPrimitive");
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared("symbol-registry");
      var AllSymbols = shared("symbols");
      var OPSymbols = shared("op-symbols");
      var ObjectProto = Object[PROTOTYPE];
      var USE_NATIVE = typeof $Symbol == "function" && !!$GOPS.f;
      var QObject = global2.QObject;
      var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
      var setSymbolDesc = DESCRIPTORS && $fails(function() {
        return _create(dP({}, "a", {
          get: function() {
            return dP(this, "a", { value: 7 }).a;
          }
        })).a != 7;
      }) ? function(it, key, D) {
        var protoDesc = gOPD(ObjectProto, key);
        if (protoDesc)
          delete ObjectProto[key];
        dP(it, key, D);
        if (protoDesc && it !== ObjectProto)
          dP(ObjectProto, key, protoDesc);
      } : dP;
      var wrap2 = function(tag) {
        var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
        sym._k = tag;
        return sym;
      };
      var isSymbol = USE_NATIVE && typeof $Symbol.iterator == "symbol" ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        return it instanceof $Symbol;
      };
      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectProto)
          $defineProperty(OPSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);
        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN))
              dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key])
              it[HIDDEN][key] = false;
            D = _create(D, { enumerable: createDesc(0, false) });
          }
          return setSymbolDesc(it, key, D);
        }
        return dP(it, key, D);
      };
      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys2 = enumKeys(P = toIObject(P));
        var i = 0;
        var l = keys2.length;
        var key;
        while (l > i)
          $defineProperty(it, key = keys2[i++], P[key]);
        return it;
      };
      var $create = function create(it, P) {
        return P === void 0 ? _create(it) : $defineProperties(_create(it), P);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = isEnum.call(this, key = toPrimitive(key, true));
        if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
          return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
          return;
        var D = gOPD(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
          D.enumerable = true;
        return D;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names3 = gOPN(toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names3.length > i) {
          if (!has(AllSymbols, key = names3[i++]) && key != HIDDEN && key != META)
            result.push(key);
        }
        return result;
      };
      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectProto;
        var names3 = gOPN(IS_OP ? OPSymbols : toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names3.length > i) {
          if (has(AllSymbols, key = names3[i++]) && (IS_OP ? has(ObjectProto, key) : true))
            result.push(AllSymbols[key]);
        }
        return result;
      };
      if (!USE_NATIVE) {
        $Symbol = function Symbol2() {
          if (this instanceof $Symbol)
            throw TypeError("Symbol is not a constructor!");
          var tag = uid(arguments.length > 0 ? arguments[0] : void 0);
          var $set = function(value) {
            if (this === ObjectProto)
              $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag))
              this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
          };
          if (DESCRIPTORS && setter)
            setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
          return wrap2(tag);
        };
        redefine($Symbol[PROTOTYPE], "toString", function toString() {
          return this._k;
        });
        $GOPD.f = $getOwnPropertyDescriptor;
        $DP.f = $defineProperty;
        require_object_gopn().f = gOPNExt.f = $getOwnPropertyNames;
        require_object_pie().f = $propertyIsEnumerable;
        $GOPS.f = $getOwnPropertySymbols;
        if (DESCRIPTORS && !require_library()) {
          redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable, true);
        }
        wksExt.f = function(name) {
          return wrap2(wks(name));
        };
      }
      $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
      for (es6Symbols = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), j = 0; es6Symbols.length > j; )
        wks(es6Symbols[j++]);
      var es6Symbols;
      var j;
      for (wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; )
        wksDefine(wellKnownSymbols[k++]);
      var wellKnownSymbols;
      var k;
      $export($export.S + $export.F * !USE_NATIVE, "Symbol", {
        "for": function(key) {
          return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
        },
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym))
            throw TypeError(sym + " is not a symbol!");
          for (var key in SymbolRegistry)
            if (SymbolRegistry[key] === sym)
              return key;
        },
        useSetter: function() {
          setter = true;
        },
        useSimple: function() {
          setter = false;
        }
      });
      $export($export.S + $export.F * !USE_NATIVE, "Object", {
        create: $create,
        defineProperty: $defineProperty,
        defineProperties: $defineProperties,
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        getOwnPropertyNames: $getOwnPropertyNames,
        getOwnPropertySymbols: $getOwnPropertySymbols
      });
      var FAILS_ON_PRIMITIVES = $fails(function() {
        $GOPS.f(1);
      });
      $export($export.S + $export.F * FAILS_ON_PRIMITIVES, "Object", {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return $GOPS.f(toObject(it));
        }
      });
      $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
        var S = $Symbol();
        return _stringify([S]) != "[null]" || _stringify({ a: S }) != "{}" || _stringify(Object(S)) != "{}";
      })), "JSON", {
        stringify: function stringify(it) {
          var args = [it];
          var i = 1;
          var replacer, $replacer;
          while (arguments.length > i)
            args.push(arguments[i++]);
          $replacer = replacer = args[1];
          if (!isObject5(replacer) && it === void 0 || isSymbol(it))
            return;
          if (!isArray(replacer))
            replacer = function(key, value) {
              if (typeof $replacer == "function")
                value = $replacer.call(this, key, value);
              if (!isSymbol(value))
                return value;
            };
          args[1] = replacer;
          return _stringify.apply($JSON, args);
        }
      });
      $Symbol[PROTOTYPE][TO_PRIMITIVE] || require_hide()($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
      setToStringTag($Symbol, "Symbol");
      setToStringTag(Math, "Math", true);
      setToStringTag(global2.JSON, "JSON", true);
    }
  });

  // ../../node_modules/core-js/modules/es6.object.create.js
  var require_es6_object_create = __commonJS({
    "../../node_modules/core-js/modules/es6.object.create.js"() {
      var $export = require_export();
      $export($export.S, "Object", { create: require_object_create() });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.define-property.js
  var require_es6_object_define_property = __commonJS({
    "../../node_modules/core-js/modules/es6.object.define-property.js"() {
      var $export = require_export();
      $export($export.S + $export.F * !require_descriptors(), "Object", { defineProperty: require_object_dp().f });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.define-properties.js
  var require_es6_object_define_properties = __commonJS({
    "../../node_modules/core-js/modules/es6.object.define-properties.js"() {
      var $export = require_export();
      $export($export.S + $export.F * !require_descriptors(), "Object", { defineProperties: require_object_dps() });
    }
  });

  // ../../node_modules/core-js/modules/_object-sap.js
  var require_object_sap = __commonJS({
    "../../node_modules/core-js/modules/_object-sap.js"(exports, module) {
      var $export = require_export();
      var core = require_core();
      var fails = require_fails();
      module.exports = function(KEY, exec) {
        var fn = (core.Object || {})[KEY] || Object[KEY];
        var exp = {};
        exp[KEY] = exec(fn);
        $export($export.S + $export.F * fails(function() {
          fn(1);
        }), "Object", exp);
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.object.get-own-property-descriptor.js
  var require_es6_object_get_own_property_descriptor = __commonJS({
    "../../node_modules/core-js/modules/es6.object.get-own-property-descriptor.js"() {
      var toIObject = require_to_iobject();
      var $getOwnPropertyDescriptor = require_object_gopd().f;
      require_object_sap()("getOwnPropertyDescriptor", function() {
        return function getOwnPropertyDescriptor(it, key) {
          return $getOwnPropertyDescriptor(toIObject(it), key);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/_object-gpo.js
  var require_object_gpo = __commonJS({
    "../../node_modules/core-js/modules/_object-gpo.js"(exports, module) {
      var has = require_has();
      var toObject = require_to_object();
      var IE_PROTO = require_shared_key()("IE_PROTO");
      var ObjectProto = Object.prototype;
      module.exports = Object.getPrototypeOf || function(O) {
        O = toObject(O);
        if (has(O, IE_PROTO))
          return O[IE_PROTO];
        if (typeof O.constructor == "function" && O instanceof O.constructor) {
          return O.constructor.prototype;
        }
        return O instanceof Object ? ObjectProto : null;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.object.get-prototype-of.js
  var require_es6_object_get_prototype_of = __commonJS({
    "../../node_modules/core-js/modules/es6.object.get-prototype-of.js"() {
      var toObject = require_to_object();
      var $getPrototypeOf = require_object_gpo();
      require_object_sap()("getPrototypeOf", function() {
        return function getPrototypeOf(it) {
          return $getPrototypeOf(toObject(it));
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.keys.js
  var require_es6_object_keys = __commonJS({
    "../../node_modules/core-js/modules/es6.object.keys.js"() {
      var toObject = require_to_object();
      var $keys = require_object_keys();
      require_object_sap()("keys", function() {
        return function keys2(it) {
          return $keys(toObject(it));
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.get-own-property-names.js
  var require_es6_object_get_own_property_names = __commonJS({
    "../../node_modules/core-js/modules/es6.object.get-own-property-names.js"() {
      require_object_sap()("getOwnPropertyNames", function() {
        return require_object_gopn_ext().f;
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.freeze.js
  var require_es6_object_freeze = __commonJS({
    "../../node_modules/core-js/modules/es6.object.freeze.js"() {
      var isObject5 = require_is_object();
      var meta = require_meta().onFreeze;
      require_object_sap()("freeze", function($freeze) {
        return function freeze(it) {
          return $freeze && isObject5(it) ? $freeze(meta(it)) : it;
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.seal.js
  var require_es6_object_seal = __commonJS({
    "../../node_modules/core-js/modules/es6.object.seal.js"() {
      var isObject5 = require_is_object();
      var meta = require_meta().onFreeze;
      require_object_sap()("seal", function($seal) {
        return function seal(it) {
          return $seal && isObject5(it) ? $seal(meta(it)) : it;
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.prevent-extensions.js
  var require_es6_object_prevent_extensions = __commonJS({
    "../../node_modules/core-js/modules/es6.object.prevent-extensions.js"() {
      var isObject5 = require_is_object();
      var meta = require_meta().onFreeze;
      require_object_sap()("preventExtensions", function($preventExtensions) {
        return function preventExtensions(it) {
          return $preventExtensions && isObject5(it) ? $preventExtensions(meta(it)) : it;
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.is-frozen.js
  var require_es6_object_is_frozen = __commonJS({
    "../../node_modules/core-js/modules/es6.object.is-frozen.js"() {
      var isObject5 = require_is_object();
      require_object_sap()("isFrozen", function($isFrozen) {
        return function isFrozen(it) {
          return isObject5(it) ? $isFrozen ? $isFrozen(it) : false : true;
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.is-sealed.js
  var require_es6_object_is_sealed = __commonJS({
    "../../node_modules/core-js/modules/es6.object.is-sealed.js"() {
      var isObject5 = require_is_object();
      require_object_sap()("isSealed", function($isSealed) {
        return function isSealed(it) {
          return isObject5(it) ? $isSealed ? $isSealed(it) : false : true;
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.object.is-extensible.js
  var require_es6_object_is_extensible = __commonJS({
    "../../node_modules/core-js/modules/es6.object.is-extensible.js"() {
      var isObject5 = require_is_object();
      require_object_sap()("isExtensible", function($isExtensible) {
        return function isExtensible(it) {
          return isObject5(it) ? $isExtensible ? $isExtensible(it) : true : false;
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/_object-assign.js
  var require_object_assign = __commonJS({
    "../../node_modules/core-js/modules/_object-assign.js"(exports, module) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var getKeys = require_object_keys();
      var gOPS = require_object_gops();
      var pIE = require_object_pie();
      var toObject = require_to_object();
      var IObject = require_iobject();
      var $assign = Object.assign;
      module.exports = !$assign || require_fails()(function() {
        var A = {};
        var B = {};
        var S = Symbol();
        var K = "abcdefghijklmnopqrst";
        A[S] = 7;
        K.split("").forEach(function(k) {
          B[k] = k;
        });
        return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join("") != K;
      }) ? function assign(target, source) {
        var T = toObject(target);
        var aLen = arguments.length;
        var index = 1;
        var getSymbols = gOPS.f;
        var isEnum = pIE.f;
        while (aLen > index) {
          var S = IObject(arguments[index++]);
          var keys2 = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
          var length = keys2.length;
          var j = 0;
          var key;
          while (length > j) {
            key = keys2[j++];
            if (!DESCRIPTORS || isEnum.call(S, key))
              T[key] = S[key];
          }
        }
        return T;
      } : $assign;
    }
  });

  // ../../node_modules/core-js/modules/es6.object.assign.js
  var require_es6_object_assign = __commonJS({
    "../../node_modules/core-js/modules/es6.object.assign.js"() {
      var $export = require_export();
      $export($export.S + $export.F, "Object", { assign: require_object_assign() });
    }
  });

  // ../../node_modules/core-js/modules/_same-value.js
  var require_same_value = __commonJS({
    "../../node_modules/core-js/modules/_same-value.js"(exports, module) {
      module.exports = Object.is || function is(x, y) {
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.object.is.js
  var require_es6_object_is = __commonJS({
    "../../node_modules/core-js/modules/es6.object.is.js"() {
      var $export = require_export();
      $export($export.S, "Object", { is: require_same_value() });
    }
  });

  // ../../node_modules/core-js/modules/_set-proto.js
  var require_set_proto = __commonJS({
    "../../node_modules/core-js/modules/_set-proto.js"(exports, module) {
      var isObject5 = require_is_object();
      var anObject = require_an_object();
      var check = function(O, proto) {
        anObject(O);
        if (!isObject5(proto) && proto !== null)
          throw TypeError(proto + ": can't set as prototype!");
      };
      module.exports = {
        set: Object.setPrototypeOf || ("__proto__" in {} ? function(test2, buggy, set) {
          try {
            set = require_ctx()(Function.call, require_object_gopd().f(Object.prototype, "__proto__").set, 2);
            set(test2, []);
            buggy = !(test2 instanceof Array);
          } catch (e) {
            buggy = true;
          }
          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy)
              O.__proto__ = proto;
            else
              set(O, proto);
            return O;
          };
        }({}, false) : void 0),
        check
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.object.set-prototype-of.js
  var require_es6_object_set_prototype_of = __commonJS({
    "../../node_modules/core-js/modules/es6.object.set-prototype-of.js"() {
      var $export = require_export();
      $export($export.S, "Object", { setPrototypeOf: require_set_proto().set });
    }
  });

  // ../../node_modules/core-js/modules/_classof.js
  var require_classof = __commonJS({
    "../../node_modules/core-js/modules/_classof.js"(exports, module) {
      var cof = require_cof();
      var TAG = require_wks()("toStringTag");
      var ARG = cof(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (e) {
        }
      };
      module.exports = function(it) {
        var O, T, B;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (T = tryGet(O = Object(it), TAG)) == "string" ? T : ARG ? cof(O) : (B = cof(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : B;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.object.to-string.js
  var require_es6_object_to_string = __commonJS({
    "../../node_modules/core-js/modules/es6.object.to-string.js"() {
      "use strict";
      var classof = require_classof();
      var test2 = {};
      test2[require_wks()("toStringTag")] = "z";
      if (test2 + "" != "[object z]") {
        require_redefine()(Object.prototype, "toString", function toString() {
          return "[object " + classof(this) + "]";
        }, true);
      }
    }
  });

  // ../../node_modules/core-js/modules/_invoke.js
  var require_invoke = __commonJS({
    "../../node_modules/core-js/modules/_invoke.js"(exports, module) {
      module.exports = function(fn, args, that) {
        var un = that === void 0;
        switch (args.length) {
          case 0:
            return un ? fn() : fn.call(that);
          case 1:
            return un ? fn(args[0]) : fn.call(that, args[0]);
          case 2:
            return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
          case 3:
            return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
          case 4:
            return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
        }
        return fn.apply(that, args);
      };
    }
  });

  // ../../node_modules/core-js/modules/_bind.js
  var require_bind = __commonJS({
    "../../node_modules/core-js/modules/_bind.js"(exports, module) {
      "use strict";
      var aFunction = require_a_function();
      var isObject5 = require_is_object();
      var invoke = require_invoke();
      var arraySlice = [].slice;
      var factories = {};
      var construct = function(F, len, args) {
        if (!(len in factories)) {
          for (var n = [], i = 0; i < len; i++)
            n[i] = "a[" + i + "]";
          factories[len] = Function("F,a", "return new F(" + n.join(",") + ")");
        }
        return factories[len](F, args);
      };
      module.exports = Function.bind || function bind(that) {
        var fn = aFunction(this);
        var partArgs = arraySlice.call(arguments, 1);
        var bound = function() {
          var args = partArgs.concat(arraySlice.call(arguments));
          return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
        };
        if (isObject5(fn.prototype))
          bound.prototype = fn.prototype;
        return bound;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.function.bind.js
  var require_es6_function_bind = __commonJS({
    "../../node_modules/core-js/modules/es6.function.bind.js"() {
      var $export = require_export();
      $export($export.P, "Function", { bind: require_bind() });
    }
  });

  // ../../node_modules/core-js/modules/es6.function.name.js
  var require_es6_function_name = __commonJS({
    "../../node_modules/core-js/modules/es6.function.name.js"() {
      var dP = require_object_dp().f;
      var FProto = Function.prototype;
      var nameRE = /^\s*function ([^ (]*)/;
      var NAME = "name";
      NAME in FProto || require_descriptors() && dP(FProto, NAME, {
        configurable: true,
        get: function() {
          try {
            return ("" + this).match(nameRE)[1];
          } catch (e) {
            return "";
          }
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.function.has-instance.js
  var require_es6_function_has_instance = __commonJS({
    "../../node_modules/core-js/modules/es6.function.has-instance.js"() {
      "use strict";
      var isObject5 = require_is_object();
      var getPrototypeOf = require_object_gpo();
      var HAS_INSTANCE = require_wks()("hasInstance");
      var FunctionProto = Function.prototype;
      if (!(HAS_INSTANCE in FunctionProto))
        require_object_dp().f(FunctionProto, HAS_INSTANCE, { value: function(O) {
          if (typeof this != "function" || !isObject5(O))
            return false;
          if (!isObject5(this.prototype))
            return O instanceof this;
          while (O = getPrototypeOf(O))
            if (this.prototype === O)
              return true;
          return false;
        } });
    }
  });

  // ../../node_modules/core-js/modules/_string-ws.js
  var require_string_ws = __commonJS({
    "../../node_modules/core-js/modules/_string-ws.js"(exports, module) {
      module.exports = "	\n\v\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
    }
  });

  // ../../node_modules/core-js/modules/_string-trim.js
  var require_string_trim = __commonJS({
    "../../node_modules/core-js/modules/_string-trim.js"(exports, module) {
      var $export = require_export();
      var defined = require_defined();
      var fails = require_fails();
      var spaces = require_string_ws();
      var space2 = "[" + spaces + "]";
      var non = "\u200B\x85";
      var ltrim = RegExp("^" + space2 + space2 + "*");
      var rtrim = RegExp(space2 + space2 + "*$");
      var exporter = function(KEY, exec, ALIAS) {
        var exp = {};
        var FORCE = fails(function() {
          return !!spaces[KEY]() || non[KEY]() != non;
        });
        var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
        if (ALIAS)
          exp[ALIAS] = fn;
        $export($export.P + $export.F * FORCE, "String", exp);
      };
      var trim = exporter.trim = function(string, TYPE) {
        string = String(defined(string));
        if (TYPE & 1)
          string = string.replace(ltrim, "");
        if (TYPE & 2)
          string = string.replace(rtrim, "");
        return string;
      };
      module.exports = exporter;
    }
  });

  // ../../node_modules/core-js/modules/_parse-int.js
  var require_parse_int = __commonJS({
    "../../node_modules/core-js/modules/_parse-int.js"(exports, module) {
      var $parseInt = require_global().parseInt;
      var $trim = require_string_trim().trim;
      var ws = require_string_ws();
      var hex2 = /^[-+]?0[xX]/;
      module.exports = $parseInt(ws + "08") !== 8 || $parseInt(ws + "0x16") !== 22 ? function parseInt2(str, radix) {
        var string = $trim(String(str), 3);
        return $parseInt(string, radix >>> 0 || (hex2.test(string) ? 16 : 10));
      } : $parseInt;
    }
  });

  // ../../node_modules/core-js/modules/es6.parse-int.js
  var require_es6_parse_int = __commonJS({
    "../../node_modules/core-js/modules/es6.parse-int.js"() {
      var $export = require_export();
      var $parseInt = require_parse_int();
      $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });
    }
  });

  // ../../node_modules/core-js/modules/_parse-float.js
  var require_parse_float = __commonJS({
    "../../node_modules/core-js/modules/_parse-float.js"(exports, module) {
      var $parseFloat = require_global().parseFloat;
      var $trim = require_string_trim().trim;
      module.exports = 1 / $parseFloat(require_string_ws() + "-0") !== -Infinity ? function parseFloat2(str) {
        var string = $trim(String(str), 3);
        var result = $parseFloat(string);
        return result === 0 && string.charAt(0) == "-" ? -0 : result;
      } : $parseFloat;
    }
  });

  // ../../node_modules/core-js/modules/es6.parse-float.js
  var require_es6_parse_float = __commonJS({
    "../../node_modules/core-js/modules/es6.parse-float.js"() {
      var $export = require_export();
      var $parseFloat = require_parse_float();
      $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });
    }
  });

  // ../../node_modules/core-js/modules/_inherit-if-required.js
  var require_inherit_if_required = __commonJS({
    "../../node_modules/core-js/modules/_inherit-if-required.js"(exports, module) {
      var isObject5 = require_is_object();
      var setPrototypeOf = require_set_proto().set;
      module.exports = function(that, target, C) {
        var S = target.constructor;
        var P;
        if (S !== C && typeof S == "function" && (P = S.prototype) !== C.prototype && isObject5(P) && setPrototypeOf) {
          setPrototypeOf(that, P);
        }
        return that;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.number.constructor.js
  var require_es6_number_constructor = __commonJS({
    "../../node_modules/core-js/modules/es6.number.constructor.js"() {
      "use strict";
      var global2 = require_global();
      var has = require_has();
      var cof = require_cof();
      var inheritIfRequired = require_inherit_if_required();
      var toPrimitive = require_to_primitive();
      var fails = require_fails();
      var gOPN = require_object_gopn().f;
      var gOPD = require_object_gopd().f;
      var dP = require_object_dp().f;
      var $trim = require_string_trim().trim;
      var NUMBER = "Number";
      var $Number = global2[NUMBER];
      var Base = $Number;
      var proto = $Number.prototype;
      var BROKEN_COF = cof(require_object_create()(proto)) == NUMBER;
      var TRIM = "trim" in String.prototype;
      var toNumber = function(argument) {
        var it = toPrimitive(argument, false);
        if (typeof it == "string" && it.length > 2) {
          it = TRIM ? it.trim() : $trim(it, 3);
          var first = it.charCodeAt(0);
          var third, radix, maxCode;
          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120)
              return NaN;
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              default:
                return +it;
            }
            for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
              code = digits.charCodeAt(i);
              if (code < 48 || code > maxCode)
                return NaN;
            }
            return parseInt(digits, radix);
          }
        }
        return +it;
      };
      if (!$Number(" 0o1") || !$Number("0b1") || $Number("+0x1")) {
        $Number = function Number2(value) {
          var it = arguments.length < 1 ? 0 : value;
          var that = this;
          return that instanceof $Number && (BROKEN_COF ? fails(function() {
            proto.valueOf.call(that);
          }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
        };
        for (keys2 = require_descriptors() ? gOPN(Base) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), j = 0; keys2.length > j; j++) {
          if (has(Base, key = keys2[j]) && !has($Number, key)) {
            dP($Number, key, gOPD(Base, key));
          }
        }
        $Number.prototype = proto;
        proto.constructor = $Number;
        require_redefine()(global2, NUMBER, $Number);
      }
      var keys2;
      var j;
      var key;
    }
  });

  // ../../node_modules/core-js/modules/_a-number-value.js
  var require_a_number_value = __commonJS({
    "../../node_modules/core-js/modules/_a-number-value.js"(exports, module) {
      var cof = require_cof();
      module.exports = function(it, msg) {
        if (typeof it != "number" && cof(it) != "Number")
          throw TypeError(msg);
        return +it;
      };
    }
  });

  // ../../node_modules/core-js/modules/_string-repeat.js
  var require_string_repeat = __commonJS({
    "../../node_modules/core-js/modules/_string-repeat.js"(exports, module) {
      "use strict";
      var toInteger = require_to_integer();
      var defined = require_defined();
      module.exports = function repeat(count) {
        var str = String(defined(this));
        var res = "";
        var n = toInteger(count);
        if (n < 0 || n == Infinity)
          throw RangeError("Count can't be negative");
        for (; n > 0; (n >>>= 1) && (str += str))
          if (n & 1)
            res += str;
        return res;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.number.to-fixed.js
  var require_es6_number_to_fixed = __commonJS({
    "../../node_modules/core-js/modules/es6.number.to-fixed.js"() {
      "use strict";
      var $export = require_export();
      var toInteger = require_to_integer();
      var aNumberValue = require_a_number_value();
      var repeat = require_string_repeat();
      var $toFixed = 1 .toFixed;
      var floor = Math.floor;
      var data = [0, 0, 0, 0, 0, 0];
      var ERROR = "Number.toFixed: incorrect invocation!";
      var ZERO = "0";
      var multiply3 = function(n, c2) {
        var i = -1;
        var c22 = c2;
        while (++i < 6) {
          c22 += n * data[i];
          data[i] = c22 % 1e7;
          c22 = floor(c22 / 1e7);
        }
      };
      var divide3 = function(n) {
        var i = 6;
        var c2 = 0;
        while (--i >= 0) {
          c2 += data[i];
          data[i] = floor(c2 / n);
          c2 = c2 % n * 1e7;
        }
      };
      var numToString = function() {
        var i = 6;
        var s = "";
        while (--i >= 0) {
          if (s !== "" || i === 0 || data[i] !== 0) {
            var t2 = String(data[i]);
            s = s === "" ? t2 : s + repeat.call(ZERO, 7 - t2.length) + t2;
          }
        }
        return s;
      };
      var pow = function(x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      };
      var log = function(x) {
        var n = 0;
        var x2 = x;
        while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
        }
        while (x2 >= 2) {
          n += 1;
          x2 /= 2;
        }
        return n;
      };
      $export($export.P + $export.F * (!!$toFixed && (8e-5 .toFixed(3) !== "0.000" || 0.9 .toFixed(0) !== "1" || 1.255 .toFixed(2) !== "1.25" || 1000000000000000100 .toFixed(0) !== "1000000000000000128") || !require_fails()(function() {
        $toFixed.call({});
      })), "Number", {
        toFixed: function toFixed(fractionDigits) {
          var x = aNumberValue(this, ERROR);
          var f = toInteger(fractionDigits);
          var s = "";
          var m = ZERO;
          var e, z, j, k;
          if (f < 0 || f > 20)
            throw RangeError(ERROR);
          if (x != x)
            return "NaN";
          if (x <= -1e21 || x >= 1e21)
            return String(x);
          if (x < 0) {
            s = "-";
            x = -x;
          }
          if (x > 1e-21) {
            e = log(x * pow(2, 69, 1)) - 69;
            z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
            z *= 4503599627370496;
            e = 52 - e;
            if (e > 0) {
              multiply3(0, z);
              j = f;
              while (j >= 7) {
                multiply3(1e7, 0);
                j -= 7;
              }
              multiply3(pow(10, j, 1), 0);
              j = e - 1;
              while (j >= 23) {
                divide3(1 << 23);
                j -= 23;
              }
              divide3(1 << j);
              multiply3(1, 1);
              divide3(2);
              m = numToString();
            } else {
              multiply3(0, z);
              multiply3(1 << -e, 0);
              m = numToString() + repeat.call(ZERO, f);
            }
          }
          if (f > 0) {
            k = m.length;
            m = s + (k <= f ? "0." + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + "." + m.slice(k - f));
          } else {
            m = s + m;
          }
          return m;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.to-precision.js
  var require_es6_number_to_precision = __commonJS({
    "../../node_modules/core-js/modules/es6.number.to-precision.js"() {
      "use strict";
      var $export = require_export();
      var $fails = require_fails();
      var aNumberValue = require_a_number_value();
      var $toPrecision = 1 .toPrecision;
      $export($export.P + $export.F * ($fails(function() {
        return $toPrecision.call(1, void 0) !== "1";
      }) || !$fails(function() {
        $toPrecision.call({});
      })), "Number", {
        toPrecision: function toPrecision(precision) {
          var that = aNumberValue(this, "Number#toPrecision: incorrect invocation!");
          return precision === void 0 ? $toPrecision.call(that) : $toPrecision.call(that, precision);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.epsilon.js
  var require_es6_number_epsilon = __commonJS({
    "../../node_modules/core-js/modules/es6.number.epsilon.js"() {
      var $export = require_export();
      $export($export.S, "Number", { EPSILON: Math.pow(2, -52) });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.is-finite.js
  var require_es6_number_is_finite = __commonJS({
    "../../node_modules/core-js/modules/es6.number.is-finite.js"() {
      var $export = require_export();
      var _isFinite = require_global().isFinite;
      $export($export.S, "Number", {
        isFinite: function isFinite2(it) {
          return typeof it == "number" && _isFinite(it);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_is-integer.js
  var require_is_integer = __commonJS({
    "../../node_modules/core-js/modules/_is-integer.js"(exports, module) {
      var isObject5 = require_is_object();
      var floor = Math.floor;
      module.exports = function isInteger(it) {
        return !isObject5(it) && isFinite(it) && floor(it) === it;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.number.is-integer.js
  var require_es6_number_is_integer = __commonJS({
    "../../node_modules/core-js/modules/es6.number.is-integer.js"() {
      var $export = require_export();
      $export($export.S, "Number", { isInteger: require_is_integer() });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.is-nan.js
  var require_es6_number_is_nan = __commonJS({
    "../../node_modules/core-js/modules/es6.number.is-nan.js"() {
      var $export = require_export();
      $export($export.S, "Number", {
        isNaN: function isNaN2(number2) {
          return number2 != number2;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.is-safe-integer.js
  var require_es6_number_is_safe_integer = __commonJS({
    "../../node_modules/core-js/modules/es6.number.is-safe-integer.js"() {
      var $export = require_export();
      var isInteger = require_is_integer();
      var abs = Math.abs;
      $export($export.S, "Number", {
        isSafeInteger: function isSafeInteger(number2) {
          return isInteger(number2) && abs(number2) <= 9007199254740991;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.max-safe-integer.js
  var require_es6_number_max_safe_integer = __commonJS({
    "../../node_modules/core-js/modules/es6.number.max-safe-integer.js"() {
      var $export = require_export();
      $export($export.S, "Number", { MAX_SAFE_INTEGER: 9007199254740991 });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.min-safe-integer.js
  var require_es6_number_min_safe_integer = __commonJS({
    "../../node_modules/core-js/modules/es6.number.min-safe-integer.js"() {
      var $export = require_export();
      $export($export.S, "Number", { MIN_SAFE_INTEGER: -9007199254740991 });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.parse-float.js
  var require_es6_number_parse_float = __commonJS({
    "../../node_modules/core-js/modules/es6.number.parse-float.js"() {
      var $export = require_export();
      var $parseFloat = require_parse_float();
      $export($export.S + $export.F * (Number.parseFloat != $parseFloat), "Number", { parseFloat: $parseFloat });
    }
  });

  // ../../node_modules/core-js/modules/es6.number.parse-int.js
  var require_es6_number_parse_int = __commonJS({
    "../../node_modules/core-js/modules/es6.number.parse-int.js"() {
      var $export = require_export();
      var $parseInt = require_parse_int();
      $export($export.S + $export.F * (Number.parseInt != $parseInt), "Number", { parseInt: $parseInt });
    }
  });

  // ../../node_modules/core-js/modules/_math-log1p.js
  var require_math_log1p = __commonJS({
    "../../node_modules/core-js/modules/_math-log1p.js"(exports, module) {
      module.exports = Math.log1p || function log1p(x) {
        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.math.acosh.js
  var require_es6_math_acosh = __commonJS({
    "../../node_modules/core-js/modules/es6.math.acosh.js"() {
      var $export = require_export();
      var log1p = require_math_log1p();
      var sqrt = Math.sqrt;
      var $acosh = Math.acosh;
      $export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710 && $acosh(Infinity) == Infinity), "Math", {
        acosh: function acosh(x) {
          return (x = +x) < 1 ? NaN : x > 9490626562425156e-8 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.asinh.js
  var require_es6_math_asinh = __commonJS({
    "../../node_modules/core-js/modules/es6.math.asinh.js"() {
      var $export = require_export();
      var $asinh = Math.asinh;
      function asinh(x) {
        return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
      }
      $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), "Math", { asinh });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.atanh.js
  var require_es6_math_atanh = __commonJS({
    "../../node_modules/core-js/modules/es6.math.atanh.js"() {
      var $export = require_export();
      var $atanh = Math.atanh;
      $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), "Math", {
        atanh: function atanh(x) {
          return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_math-sign.js
  var require_math_sign = __commonJS({
    "../../node_modules/core-js/modules/_math-sign.js"(exports, module) {
      module.exports = Math.sign || function sign(x) {
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.math.cbrt.js
  var require_es6_math_cbrt = __commonJS({
    "../../node_modules/core-js/modules/es6.math.cbrt.js"() {
      var $export = require_export();
      var sign = require_math_sign();
      $export($export.S, "Math", {
        cbrt: function cbrt(x) {
          return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.clz32.js
  var require_es6_math_clz32 = __commonJS({
    "../../node_modules/core-js/modules/es6.math.clz32.js"() {
      var $export = require_export();
      $export($export.S, "Math", {
        clz32: function clz32(x) {
          return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.cosh.js
  var require_es6_math_cosh = __commonJS({
    "../../node_modules/core-js/modules/es6.math.cosh.js"() {
      var $export = require_export();
      var exp = Math.exp;
      $export($export.S, "Math", {
        cosh: function cosh(x) {
          return (exp(x = +x) + exp(-x)) / 2;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_math-expm1.js
  var require_math_expm1 = __commonJS({
    "../../node_modules/core-js/modules/_math-expm1.js"(exports, module) {
      var $expm1 = Math.expm1;
      module.exports = !$expm1 || $expm1(10) > 22025.465794806718 || $expm1(10) < 22025.465794806718 || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
        return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
      } : $expm1;
    }
  });

  // ../../node_modules/core-js/modules/es6.math.expm1.js
  var require_es6_math_expm1 = __commonJS({
    "../../node_modules/core-js/modules/es6.math.expm1.js"() {
      var $export = require_export();
      var $expm1 = require_math_expm1();
      $export($export.S + $export.F * ($expm1 != Math.expm1), "Math", { expm1: $expm1 });
    }
  });

  // ../../node_modules/core-js/modules/_math-fround.js
  var require_math_fround = __commonJS({
    "../../node_modules/core-js/modules/_math-fround.js"(exports, module) {
      var sign = require_math_sign();
      var pow = Math.pow;
      var EPSILON = pow(2, -52);
      var EPSILON32 = pow(2, -23);
      var MAX32 = pow(2, 127) * (2 - EPSILON32);
      var MIN32 = pow(2, -126);
      var roundTiesToEven = function(n) {
        return n + 1 / EPSILON - 1 / EPSILON;
      };
      module.exports = Math.fround || function fround(x) {
        var $abs = Math.abs(x);
        var $sign = sign(x);
        var a2, result;
        if ($abs < MIN32)
          return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a2 = (1 + EPSILON32 / EPSILON) * $abs;
        result = a2 - (a2 - $abs);
        if (result > MAX32 || result != result)
          return $sign * Infinity;
        return $sign * result;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.math.fround.js
  var require_es6_math_fround = __commonJS({
    "../../node_modules/core-js/modules/es6.math.fround.js"() {
      var $export = require_export();
      $export($export.S, "Math", { fround: require_math_fround() });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.hypot.js
  var require_es6_math_hypot = __commonJS({
    "../../node_modules/core-js/modules/es6.math.hypot.js"() {
      var $export = require_export();
      var abs = Math.abs;
      $export($export.S, "Math", {
        hypot: function hypot(value1, value2) {
          var sum = 0;
          var i = 0;
          var aLen = arguments.length;
          var larg = 0;
          var arg, div;
          while (i < aLen) {
            arg = abs(arguments[i++]);
            if (larg < arg) {
              div = larg / arg;
              sum = sum * div * div + 1;
              larg = arg;
            } else if (arg > 0) {
              div = arg / larg;
              sum += div * div;
            } else
              sum += arg;
          }
          return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.imul.js
  var require_es6_math_imul = __commonJS({
    "../../node_modules/core-js/modules/es6.math.imul.js"() {
      var $export = require_export();
      var $imul = Math.imul;
      $export($export.S + $export.F * require_fails()(function() {
        return $imul(4294967295, 5) != -5 || $imul.length != 2;
      }), "Math", {
        imul: function imul(x, y) {
          var UINT16 = 65535;
          var xn = +x;
          var yn = +y;
          var xl = UINT16 & xn;
          var yl = UINT16 & yn;
          return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.log10.js
  var require_es6_math_log10 = __commonJS({
    "../../node_modules/core-js/modules/es6.math.log10.js"() {
      var $export = require_export();
      $export($export.S, "Math", {
        log10: function log10(x) {
          return Math.log(x) * Math.LOG10E;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.log1p.js
  var require_es6_math_log1p = __commonJS({
    "../../node_modules/core-js/modules/es6.math.log1p.js"() {
      var $export = require_export();
      $export($export.S, "Math", { log1p: require_math_log1p() });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.log2.js
  var require_es6_math_log2 = __commonJS({
    "../../node_modules/core-js/modules/es6.math.log2.js"() {
      var $export = require_export();
      $export($export.S, "Math", {
        log2: function log2(x) {
          return Math.log(x) / Math.LN2;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.sign.js
  var require_es6_math_sign = __commonJS({
    "../../node_modules/core-js/modules/es6.math.sign.js"() {
      var $export = require_export();
      $export($export.S, "Math", { sign: require_math_sign() });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.sinh.js
  var require_es6_math_sinh = __commonJS({
    "../../node_modules/core-js/modules/es6.math.sinh.js"() {
      var $export = require_export();
      var expm1 = require_math_expm1();
      var exp = Math.exp;
      $export($export.S + $export.F * require_fails()(function() {
        return !Math.sinh(-2e-17) != -2e-17;
      }), "Math", {
        sinh: function sinh(x) {
          return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.tanh.js
  var require_es6_math_tanh = __commonJS({
    "../../node_modules/core-js/modules/es6.math.tanh.js"() {
      var $export = require_export();
      var expm1 = require_math_expm1();
      var exp = Math.exp;
      $export($export.S, "Math", {
        tanh: function tanh(x) {
          var a2 = expm1(x = +x);
          var b2 = expm1(-x);
          return a2 == Infinity ? 1 : b2 == Infinity ? -1 : (a2 - b2) / (exp(x) + exp(-x));
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.math.trunc.js
  var require_es6_math_trunc = __commonJS({
    "../../node_modules/core-js/modules/es6.math.trunc.js"() {
      var $export = require_export();
      $export($export.S, "Math", {
        trunc: function trunc(it) {
          return (it > 0 ? Math.floor : Math.ceil)(it);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.from-code-point.js
  var require_es6_string_from_code_point = __commonJS({
    "../../node_modules/core-js/modules/es6.string.from-code-point.js"() {
      var $export = require_export();
      var toAbsoluteIndex = require_to_absolute_index();
      var fromCharCode = String.fromCharCode;
      var $fromCodePoint = String.fromCodePoint;
      $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
        fromCodePoint: function fromCodePoint(x) {
          var res = [];
          var aLen = arguments.length;
          var i = 0;
          var code;
          while (aLen > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 1114111) !== code)
              throw RangeError(code + " is not a valid code point");
            res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
          }
          return res.join("");
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.raw.js
  var require_es6_string_raw = __commonJS({
    "../../node_modules/core-js/modules/es6.string.raw.js"() {
      var $export = require_export();
      var toIObject = require_to_iobject();
      var toLength = require_to_length();
      $export($export.S, "String", {
        raw: function raw(callSite) {
          var tpl = toIObject(callSite.raw);
          var len = toLength(tpl.length);
          var aLen = arguments.length;
          var res = [];
          var i = 0;
          while (len > i) {
            res.push(String(tpl[i++]));
            if (i < aLen)
              res.push(String(arguments[i]));
          }
          return res.join("");
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.trim.js
  var require_es6_string_trim = __commonJS({
    "../../node_modules/core-js/modules/es6.string.trim.js"() {
      "use strict";
      require_string_trim()("trim", function($trim) {
        return function trim() {
          return $trim(this, 3);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/_string-at.js
  var require_string_at = __commonJS({
    "../../node_modules/core-js/modules/_string-at.js"(exports, module) {
      var toInteger = require_to_integer();
      var defined = require_defined();
      module.exports = function(TO_STRING) {
        return function(that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a2, b2;
          if (i < 0 || i >= l)
            return TO_STRING ? "" : void 0;
          a2 = s.charCodeAt(i);
          return a2 < 55296 || a2 > 56319 || i + 1 === l || (b2 = s.charCodeAt(i + 1)) < 56320 || b2 > 57343 ? TO_STRING ? s.charAt(i) : a2 : TO_STRING ? s.slice(i, i + 2) : (a2 - 55296 << 10) + (b2 - 56320) + 65536;
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/_iterators.js
  var require_iterators = __commonJS({
    "../../node_modules/core-js/modules/_iterators.js"(exports, module) {
      module.exports = {};
    }
  });

  // ../../node_modules/core-js/modules/_iter-create.js
  var require_iter_create = __commonJS({
    "../../node_modules/core-js/modules/_iter-create.js"(exports, module) {
      "use strict";
      var create = require_object_create();
      var descriptor = require_property_desc();
      var setToStringTag = require_set_to_string_tag();
      var IteratorPrototype = {};
      require_hide()(IteratorPrototype, require_wks()("iterator"), function() {
        return this;
      });
      module.exports = function(Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
        setToStringTag(Constructor, NAME + " Iterator");
      };
    }
  });

  // ../../node_modules/core-js/modules/_iter-define.js
  var require_iter_define = __commonJS({
    "../../node_modules/core-js/modules/_iter-define.js"(exports, module) {
      "use strict";
      var LIBRARY = require_library();
      var $export = require_export();
      var redefine = require_redefine();
      var hide = require_hide();
      var Iterators = require_iterators();
      var $iterCreate = require_iter_create();
      var setToStringTag = require_set_to_string_tag();
      var getPrototypeOf = require_object_gpo();
      var ITERATOR = require_wks()("iterator");
      var BUGGY = !([].keys && "next" in [].keys());
      var FF_ITERATOR = "@@iterator";
      var KEYS = "keys";
      var VALUES = "values";
      var returnThis = function() {
        return this;
      };
      module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);
        var getMethod = function(kind) {
          if (!BUGGY && kind in proto)
            return proto[kind];
          switch (kind) {
            case KEYS:
              return function keys2() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }
          return function entries() {
            return new Constructor(this, kind);
          };
        };
        var TAG = NAME + " Iterator";
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : void 0;
        var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype;
        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            setToStringTag(IteratorPrototype, TAG, true);
            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != "function")
              hide(IteratorPrototype, ITERATOR, returnThis);
          }
        }
        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;
          $default = function values() {
            return $native.call(this);
          };
        }
        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        }
        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;
        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED)
            for (key in methods) {
              if (!(key in proto))
                redefine(proto, key, methods[key]);
            }
          else
            $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }
        return methods;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.string.iterator.js
  var require_es6_string_iterator = __commonJS({
    "../../node_modules/core-js/modules/es6.string.iterator.js"() {
      "use strict";
      var $at = require_string_at()(true);
      require_iter_define()(String, "String", function(iterated) {
        this._t = String(iterated);
        this._i = 0;
      }, function() {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length)
          return { value: void 0, done: true };
        point = $at(O, index);
        this._i += point.length;
        return { value: point, done: false };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.code-point-at.js
  var require_es6_string_code_point_at = __commonJS({
    "../../node_modules/core-js/modules/es6.string.code-point-at.js"() {
      "use strict";
      var $export = require_export();
      var $at = require_string_at()(false);
      $export($export.P, "String", {
        codePointAt: function codePointAt(pos) {
          return $at(this, pos);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_is-regexp.js
  var require_is_regexp = __commonJS({
    "../../node_modules/core-js/modules/_is-regexp.js"(exports, module) {
      var isObject5 = require_is_object();
      var cof = require_cof();
      var MATCH = require_wks()("match");
      module.exports = function(it) {
        var isRegExp;
        return isObject5(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : cof(it) == "RegExp");
      };
    }
  });

  // ../../node_modules/core-js/modules/_string-context.js
  var require_string_context = __commonJS({
    "../../node_modules/core-js/modules/_string-context.js"(exports, module) {
      var isRegExp = require_is_regexp();
      var defined = require_defined();
      module.exports = function(that, searchString, NAME) {
        if (isRegExp(searchString))
          throw TypeError("String#" + NAME + " doesn't accept regex!");
        return String(defined(that));
      };
    }
  });

  // ../../node_modules/core-js/modules/_fails-is-regexp.js
  var require_fails_is_regexp = __commonJS({
    "../../node_modules/core-js/modules/_fails-is-regexp.js"(exports, module) {
      var MATCH = require_wks()("match");
      module.exports = function(KEY) {
        var re = /./;
        try {
          "/./"[KEY](re);
        } catch (e) {
          try {
            re[MATCH] = false;
            return !"/./"[KEY](re);
          } catch (f) {
          }
        }
        return true;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.string.ends-with.js
  var require_es6_string_ends_with = __commonJS({
    "../../node_modules/core-js/modules/es6.string.ends-with.js"() {
      "use strict";
      var $export = require_export();
      var toLength = require_to_length();
      var context = require_string_context();
      var ENDS_WITH = "endsWith";
      var $endsWith = ""[ENDS_WITH];
      $export($export.P + $export.F * require_fails_is_regexp()(ENDS_WITH), "String", {
        endsWith: function endsWith(searchString) {
          var that = context(this, searchString, ENDS_WITH);
          var endPosition = arguments.length > 1 ? arguments[1] : void 0;
          var len = toLength(that.length);
          var end = endPosition === void 0 ? len : Math.min(toLength(endPosition), len);
          var search = String(searchString);
          return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.includes.js
  var require_es6_string_includes = __commonJS({
    "../../node_modules/core-js/modules/es6.string.includes.js"() {
      "use strict";
      var $export = require_export();
      var context = require_string_context();
      var INCLUDES = "includes";
      $export($export.P + $export.F * require_fails_is_regexp()(INCLUDES), "String", {
        includes: function includes(searchString) {
          return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.repeat.js
  var require_es6_string_repeat = __commonJS({
    "../../node_modules/core-js/modules/es6.string.repeat.js"() {
      var $export = require_export();
      $export($export.P, "String", {
        repeat: require_string_repeat()
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.starts-with.js
  var require_es6_string_starts_with = __commonJS({
    "../../node_modules/core-js/modules/es6.string.starts-with.js"() {
      "use strict";
      var $export = require_export();
      var toLength = require_to_length();
      var context = require_string_context();
      var STARTS_WITH = "startsWith";
      var $startsWith = ""[STARTS_WITH];
      $export($export.P + $export.F * require_fails_is_regexp()(STARTS_WITH), "String", {
        startsWith: function startsWith(searchString) {
          var that = context(this, searchString, STARTS_WITH);
          var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : void 0, that.length));
          var search = String(searchString);
          return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_string-html.js
  var require_string_html = __commonJS({
    "../../node_modules/core-js/modules/_string-html.js"(exports, module) {
      var $export = require_export();
      var fails = require_fails();
      var defined = require_defined();
      var quot = /"/g;
      var createHTML = function(string, tag, attribute, value) {
        var S = String(defined(string));
        var p1 = "<" + tag;
        if (attribute !== "")
          p1 += " " + attribute + '="' + String(value).replace(quot, "&quot;") + '"';
        return p1 + ">" + S + "</" + tag + ">";
      };
      module.exports = function(NAME, exec) {
        var O = {};
        O[NAME] = exec(createHTML);
        $export($export.P + $export.F * fails(function() {
          var test2 = ""[NAME]('"');
          return test2 !== test2.toLowerCase() || test2.split('"').length > 3;
        }), "String", O);
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.string.anchor.js
  var require_es6_string_anchor = __commonJS({
    "../../node_modules/core-js/modules/es6.string.anchor.js"() {
      "use strict";
      require_string_html()("anchor", function(createHTML) {
        return function anchor(name) {
          return createHTML(this, "a", "name", name);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.big.js
  var require_es6_string_big = __commonJS({
    "../../node_modules/core-js/modules/es6.string.big.js"() {
      "use strict";
      require_string_html()("big", function(createHTML) {
        return function big() {
          return createHTML(this, "big", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.blink.js
  var require_es6_string_blink = __commonJS({
    "../../node_modules/core-js/modules/es6.string.blink.js"() {
      "use strict";
      require_string_html()("blink", function(createHTML) {
        return function blink() {
          return createHTML(this, "blink", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.bold.js
  var require_es6_string_bold = __commonJS({
    "../../node_modules/core-js/modules/es6.string.bold.js"() {
      "use strict";
      require_string_html()("bold", function(createHTML) {
        return function bold() {
          return createHTML(this, "b", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.fixed.js
  var require_es6_string_fixed = __commonJS({
    "../../node_modules/core-js/modules/es6.string.fixed.js"() {
      "use strict";
      require_string_html()("fixed", function(createHTML) {
        return function fixed() {
          return createHTML(this, "tt", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.fontcolor.js
  var require_es6_string_fontcolor = __commonJS({
    "../../node_modules/core-js/modules/es6.string.fontcolor.js"() {
      "use strict";
      require_string_html()("fontcolor", function(createHTML) {
        return function fontcolor(color3) {
          return createHTML(this, "font", "color", color3);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.fontsize.js
  var require_es6_string_fontsize = __commonJS({
    "../../node_modules/core-js/modules/es6.string.fontsize.js"() {
      "use strict";
      require_string_html()("fontsize", function(createHTML) {
        return function fontsize(size2) {
          return createHTML(this, "font", "size", size2);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.italics.js
  var require_es6_string_italics = __commonJS({
    "../../node_modules/core-js/modules/es6.string.italics.js"() {
      "use strict";
      require_string_html()("italics", function(createHTML) {
        return function italics() {
          return createHTML(this, "i", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.link.js
  var require_es6_string_link = __commonJS({
    "../../node_modules/core-js/modules/es6.string.link.js"() {
      "use strict";
      require_string_html()("link", function(createHTML) {
        return function link(url) {
          return createHTML(this, "a", "href", url);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.small.js
  var require_es6_string_small = __commonJS({
    "../../node_modules/core-js/modules/es6.string.small.js"() {
      "use strict";
      require_string_html()("small", function(createHTML) {
        return function small() {
          return createHTML(this, "small", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.strike.js
  var require_es6_string_strike = __commonJS({
    "../../node_modules/core-js/modules/es6.string.strike.js"() {
      "use strict";
      require_string_html()("strike", function(createHTML) {
        return function strike() {
          return createHTML(this, "strike", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.sub.js
  var require_es6_string_sub = __commonJS({
    "../../node_modules/core-js/modules/es6.string.sub.js"() {
      "use strict";
      require_string_html()("sub", function(createHTML) {
        return function sub() {
          return createHTML(this, "sub", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.string.sup.js
  var require_es6_string_sup = __commonJS({
    "../../node_modules/core-js/modules/es6.string.sup.js"() {
      "use strict";
      require_string_html()("sup", function(createHTML) {
        return function sup() {
          return createHTML(this, "sup", "", "");
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.date.now.js
  var require_es6_date_now = __commonJS({
    "../../node_modules/core-js/modules/es6.date.now.js"() {
      var $export = require_export();
      $export($export.S, "Date", { now: function() {
        return new Date().getTime();
      } });
    }
  });

  // ../../node_modules/core-js/modules/es6.date.to-json.js
  var require_es6_date_to_json = __commonJS({
    "../../node_modules/core-js/modules/es6.date.to-json.js"() {
      "use strict";
      var $export = require_export();
      var toObject = require_to_object();
      var toPrimitive = require_to_primitive();
      $export($export.P + $export.F * require_fails()(function() {
        return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function() {
          return 1;
        } }) !== 1;
      }), "Date", {
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O);
          return typeof pv == "number" && !isFinite(pv) ? null : O.toISOString();
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_date-to-iso-string.js
  var require_date_to_iso_string = __commonJS({
    "../../node_modules/core-js/modules/_date-to-iso-string.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      var getTime = Date.prototype.getTime;
      var $toISOString = Date.prototype.toISOString;
      var lz = function(num) {
        return num > 9 ? num : "0" + num;
      };
      module.exports = fails(function() {
        return $toISOString.call(new Date(-5e13 - 1)) != "0385-07-25T07:06:39.999Z";
      }) || !fails(function() {
        $toISOString.call(new Date(NaN));
      }) ? function toISOString() {
        if (!isFinite(getTime.call(this)))
          throw RangeError("Invalid time value");
        var d = this;
        var y = d.getUTCFullYear();
        var m = d.getUTCMilliseconds();
        var s = y < 0 ? "-" : y > 9999 ? "+" : "";
        return s + ("00000" + Math.abs(y)).slice(s ? -6 : -4) + "-" + lz(d.getUTCMonth() + 1) + "-" + lz(d.getUTCDate()) + "T" + lz(d.getUTCHours()) + ":" + lz(d.getUTCMinutes()) + ":" + lz(d.getUTCSeconds()) + "." + (m > 99 ? m : "0" + lz(m)) + "Z";
      } : $toISOString;
    }
  });

  // ../../node_modules/core-js/modules/es6.date.to-iso-string.js
  var require_es6_date_to_iso_string = __commonJS({
    "../../node_modules/core-js/modules/es6.date.to-iso-string.js"() {
      var $export = require_export();
      var toISOString = require_date_to_iso_string();
      $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), "Date", {
        toISOString
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.date.to-string.js
  var require_es6_date_to_string = __commonJS({
    "../../node_modules/core-js/modules/es6.date.to-string.js"() {
      var DateProto = Date.prototype;
      var INVALID_DATE = "Invalid Date";
      var TO_STRING = "toString";
      var $toString = DateProto[TO_STRING];
      var getTime = DateProto.getTime;
      if (new Date(NaN) + "" != INVALID_DATE) {
        require_redefine()(DateProto, TO_STRING, function toString() {
          var value = getTime.call(this);
          return value === value ? $toString.call(this) : INVALID_DATE;
        });
      }
    }
  });

  // ../../node_modules/core-js/modules/_date-to-primitive.js
  var require_date_to_primitive = __commonJS({
    "../../node_modules/core-js/modules/_date-to-primitive.js"(exports, module) {
      "use strict";
      var anObject = require_an_object();
      var toPrimitive = require_to_primitive();
      var NUMBER = "number";
      module.exports = function(hint) {
        if (hint !== "string" && hint !== NUMBER && hint !== "default")
          throw TypeError("Incorrect hint");
        return toPrimitive(anObject(this), hint != NUMBER);
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.date.to-primitive.js
  var require_es6_date_to_primitive = __commonJS({
    "../../node_modules/core-js/modules/es6.date.to-primitive.js"() {
      var TO_PRIMITIVE = require_wks()("toPrimitive");
      var proto = Date.prototype;
      if (!(TO_PRIMITIVE in proto))
        require_hide()(proto, TO_PRIMITIVE, require_date_to_primitive());
    }
  });

  // ../../node_modules/core-js/modules/es6.array.is-array.js
  var require_es6_array_is_array = __commonJS({
    "../../node_modules/core-js/modules/es6.array.is-array.js"() {
      var $export = require_export();
      $export($export.S, "Array", { isArray: require_is_array() });
    }
  });

  // ../../node_modules/core-js/modules/_iter-call.js
  var require_iter_call = __commonJS({
    "../../node_modules/core-js/modules/_iter-call.js"(exports, module) {
      var anObject = require_an_object();
      module.exports = function(iterator, fn, value, entries) {
        try {
          return entries ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (e) {
          var ret = iterator["return"];
          if (ret !== void 0)
            anObject(ret.call(iterator));
          throw e;
        }
      };
    }
  });

  // ../../node_modules/core-js/modules/_is-array-iter.js
  var require_is_array_iter = __commonJS({
    "../../node_modules/core-js/modules/_is-array-iter.js"(exports, module) {
      var Iterators = require_iterators();
      var ITERATOR = require_wks()("iterator");
      var ArrayProto = Array.prototype;
      module.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
      };
    }
  });

  // ../../node_modules/core-js/modules/_create-property.js
  var require_create_property = __commonJS({
    "../../node_modules/core-js/modules/_create-property.js"(exports, module) {
      "use strict";
      var $defineProperty = require_object_dp();
      var createDesc = require_property_desc();
      module.exports = function(object, index, value) {
        if (index in object)
          $defineProperty.f(object, index, createDesc(0, value));
        else
          object[index] = value;
      };
    }
  });

  // ../../node_modules/core-js/modules/core.get-iterator-method.js
  var require_core_get_iterator_method = __commonJS({
    "../../node_modules/core-js/modules/core.get-iterator-method.js"(exports, module) {
      var classof = require_classof();
      var ITERATOR = require_wks()("iterator");
      var Iterators = require_iterators();
      module.exports = require_core().getIteratorMethod = function(it) {
        if (it != void 0)
          return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
      };
    }
  });

  // ../../node_modules/core-js/modules/_iter-detect.js
  var require_iter_detect = __commonJS({
    "../../node_modules/core-js/modules/_iter-detect.js"(exports, module) {
      var ITERATOR = require_wks()("iterator");
      var SAFE_CLOSING = false;
      try {
        riter = [7][ITERATOR]();
        riter["return"] = function() {
          SAFE_CLOSING = true;
        };
        Array.from(riter, function() {
          throw 2;
        });
      } catch (e) {
      }
      var riter;
      module.exports = function(exec, skipClosing) {
        if (!skipClosing && !SAFE_CLOSING)
          return false;
        var safe = false;
        try {
          var arr = [7];
          var iter = arr[ITERATOR]();
          iter.next = function() {
            return { done: safe = true };
          };
          arr[ITERATOR] = function() {
            return iter;
          };
          exec(arr);
        } catch (e) {
        }
        return safe;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.from.js
  var require_es6_array_from = __commonJS({
    "../../node_modules/core-js/modules/es6.array.from.js"() {
      "use strict";
      var ctx = require_ctx();
      var $export = require_export();
      var toObject = require_to_object();
      var call = require_iter_call();
      var isArrayIter = require_is_array_iter();
      var toLength = require_to_length();
      var createProperty = require_create_property();
      var getIterFn = require_core_get_iterator_method();
      $export($export.S + $export.F * !require_iter_detect()(function(iter) {
        Array.from(iter);
      }), "Array", {
        from: function from(arrayLike) {
          var O = toObject(arrayLike);
          var C = typeof this == "function" ? this : Array;
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          var index = 0;
          var iterFn = getIterFn(O);
          var length, result, step, iterator;
          if (mapping)
            mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : void 0, 2);
          if (iterFn != void 0 && !(C == Array && isArrayIter(iterFn))) {
            for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
              createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
            }
          } else {
            length = toLength(O.length);
            for (result = new C(length); length > index; index++) {
              createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
            }
          }
          result.length = index;
          return result;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.of.js
  var require_es6_array_of = __commonJS({
    "../../node_modules/core-js/modules/es6.array.of.js"() {
      "use strict";
      var $export = require_export();
      var createProperty = require_create_property();
      $export($export.S + $export.F * require_fails()(function() {
        function F() {
        }
        return !(Array.of.call(F) instanceof F);
      }), "Array", {
        of: function of() {
          var index = 0;
          var aLen = arguments.length;
          var result = new (typeof this == "function" ? this : Array)(aLen);
          while (aLen > index)
            createProperty(result, index, arguments[index++]);
          result.length = aLen;
          return result;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_strict-method.js
  var require_strict_method = __commonJS({
    "../../node_modules/core-js/modules/_strict-method.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      module.exports = function(method, arg) {
        return !!method && fails(function() {
          arg ? method.call(null, function() {
          }, 1) : method.call(null);
        });
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.join.js
  var require_es6_array_join = __commonJS({
    "../../node_modules/core-js/modules/es6.array.join.js"() {
      "use strict";
      var $export = require_export();
      var toIObject = require_to_iobject();
      var arrayJoin = [].join;
      $export($export.P + $export.F * (require_iobject() != Object || !require_strict_method()(arrayJoin)), "Array", {
        join: function join(separator) {
          return arrayJoin.call(toIObject(this), separator === void 0 ? "," : separator);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.slice.js
  var require_es6_array_slice = __commonJS({
    "../../node_modules/core-js/modules/es6.array.slice.js"() {
      "use strict";
      var $export = require_export();
      var html = require_html();
      var cof = require_cof();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      var arraySlice = [].slice;
      $export($export.P + $export.F * require_fails()(function() {
        if (html)
          arraySlice.call(html);
      }), "Array", {
        slice: function slice(begin, end) {
          var len = toLength(this.length);
          var klass = cof(this);
          end = end === void 0 ? len : end;
          if (klass == "Array")
            return arraySlice.call(this, begin, end);
          var start = toAbsoluteIndex(begin, len);
          var upTo = toAbsoluteIndex(end, len);
          var size2 = toLength(upTo - start);
          var cloned = new Array(size2);
          var i = 0;
          for (; i < size2; i++)
            cloned[i] = klass == "String" ? this.charAt(start + i) : this[start + i];
          return cloned;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.sort.js
  var require_es6_array_sort = __commonJS({
    "../../node_modules/core-js/modules/es6.array.sort.js"() {
      "use strict";
      var $export = require_export();
      var aFunction = require_a_function();
      var toObject = require_to_object();
      var fails = require_fails();
      var $sort = [].sort;
      var test2 = [1, 2, 3];
      $export($export.P + $export.F * (fails(function() {
        test2.sort(void 0);
      }) || !fails(function() {
        test2.sort(null);
      }) || !require_strict_method()($sort)), "Array", {
        sort: function sort(comparefn) {
          return comparefn === void 0 ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_array-species-constructor.js
  var require_array_species_constructor = __commonJS({
    "../../node_modules/core-js/modules/_array-species-constructor.js"(exports, module) {
      var isObject5 = require_is_object();
      var isArray = require_is_array();
      var SPECIES = require_wks()("species");
      module.exports = function(original) {
        var C;
        if (isArray(original)) {
          C = original.constructor;
          if (typeof C == "function" && (C === Array || isArray(C.prototype)))
            C = void 0;
          if (isObject5(C)) {
            C = C[SPECIES];
            if (C === null)
              C = void 0;
          }
        }
        return C === void 0 ? Array : C;
      };
    }
  });

  // ../../node_modules/core-js/modules/_array-species-create.js
  var require_array_species_create = __commonJS({
    "../../node_modules/core-js/modules/_array-species-create.js"(exports, module) {
      var speciesConstructor = require_array_species_constructor();
      module.exports = function(original, length) {
        return new (speciesConstructor(original))(length);
      };
    }
  });

  // ../../node_modules/core-js/modules/_array-methods.js
  var require_array_methods = __commonJS({
    "../../node_modules/core-js/modules/_array-methods.js"(exports, module) {
      var ctx = require_ctx();
      var IObject = require_iobject();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var asc = require_array_species_create();
      module.exports = function(TYPE, $create) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        var create = $create || asc;
        return function($this, callbackfn, that) {
          var O = toObject($this);
          var self2 = IObject(O);
          var f = ctx(callbackfn, that, 3);
          var length = toLength(self2.length);
          var index = 0;
          var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : void 0;
          var val, res;
          for (; length > index; index++)
            if (NO_HOLES || index in self2) {
              val = self2[index];
              res = f(val, index, O);
              if (TYPE) {
                if (IS_MAP)
                  result[index] = res;
                else if (res)
                  switch (TYPE) {
                    case 3:
                      return true;
                    case 5:
                      return val;
                    case 6:
                      return index;
                    case 2:
                      result.push(val);
                  }
                else if (IS_EVERY)
                  return false;
              }
            }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.for-each.js
  var require_es6_array_for_each = __commonJS({
    "../../node_modules/core-js/modules/es6.array.for-each.js"() {
      "use strict";
      var $export = require_export();
      var $forEach = require_array_methods()(0);
      var STRICT = require_strict_method()([].forEach, true);
      $export($export.P + $export.F * !STRICT, "Array", {
        forEach: function forEach(callbackfn) {
          return $forEach(this, callbackfn, arguments[1]);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.map.js
  var require_es6_array_map = __commonJS({
    "../../node_modules/core-js/modules/es6.array.map.js"() {
      "use strict";
      var $export = require_export();
      var $map = require_array_methods()(1);
      $export($export.P + $export.F * !require_strict_method()([].map, true), "Array", {
        map: function map(callbackfn) {
          return $map(this, callbackfn, arguments[1]);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.filter.js
  var require_es6_array_filter = __commonJS({
    "../../node_modules/core-js/modules/es6.array.filter.js"() {
      "use strict";
      var $export = require_export();
      var $filter = require_array_methods()(2);
      $export($export.P + $export.F * !require_strict_method()([].filter, true), "Array", {
        filter: function filter3(callbackfn) {
          return $filter(this, callbackfn, arguments[1]);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.some.js
  var require_es6_array_some = __commonJS({
    "../../node_modules/core-js/modules/es6.array.some.js"() {
      "use strict";
      var $export = require_export();
      var $some = require_array_methods()(3);
      $export($export.P + $export.F * !require_strict_method()([].some, true), "Array", {
        some: function some(callbackfn) {
          return $some(this, callbackfn, arguments[1]);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.every.js
  var require_es6_array_every = __commonJS({
    "../../node_modules/core-js/modules/es6.array.every.js"() {
      "use strict";
      var $export = require_export();
      var $every = require_array_methods()(4);
      $export($export.P + $export.F * !require_strict_method()([].every, true), "Array", {
        every: function every(callbackfn) {
          return $every(this, callbackfn, arguments[1]);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_array-reduce.js
  var require_array_reduce = __commonJS({
    "../../node_modules/core-js/modules/_array-reduce.js"(exports, module) {
      var aFunction = require_a_function();
      var toObject = require_to_object();
      var IObject = require_iobject();
      var toLength = require_to_length();
      module.exports = function(that, callbackfn, aLen, memo2, isRight) {
        aFunction(callbackfn);
        var O = toObject(that);
        var self2 = IObject(O);
        var length = toLength(O.length);
        var index = isRight ? length - 1 : 0;
        var i = isRight ? -1 : 1;
        if (aLen < 2)
          for (; ; ) {
            if (index in self2) {
              memo2 = self2[index];
              index += i;
              break;
            }
            index += i;
            if (isRight ? index < 0 : length <= index) {
              throw TypeError("Reduce of empty array with no initial value");
            }
          }
        for (; isRight ? index >= 0 : length > index; index += i)
          if (index in self2) {
            memo2 = callbackfn(memo2, self2[index], index, O);
          }
        return memo2;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.reduce.js
  var require_es6_array_reduce = __commonJS({
    "../../node_modules/core-js/modules/es6.array.reduce.js"() {
      "use strict";
      var $export = require_export();
      var $reduce = require_array_reduce();
      $export($export.P + $export.F * !require_strict_method()([].reduce, true), "Array", {
        reduce: function reduce(callbackfn) {
          return $reduce(this, callbackfn, arguments.length, arguments[1], false);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.reduce-right.js
  var require_es6_array_reduce_right = __commonJS({
    "../../node_modules/core-js/modules/es6.array.reduce-right.js"() {
      "use strict";
      var $export = require_export();
      var $reduce = require_array_reduce();
      $export($export.P + $export.F * !require_strict_method()([].reduceRight, true), "Array", {
        reduceRight: function reduceRight(callbackfn) {
          return $reduce(this, callbackfn, arguments.length, arguments[1], true);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.index-of.js
  var require_es6_array_index_of = __commonJS({
    "../../node_modules/core-js/modules/es6.array.index-of.js"() {
      "use strict";
      var $export = require_export();
      var $indexOf = require_array_includes()(false);
      var $native = [].indexOf;
      var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
      $export($export.P + $export.F * (NEGATIVE_ZERO || !require_strict_method()($native)), "Array", {
        indexOf: function indexOf(searchElement) {
          return NEGATIVE_ZERO ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.array.last-index-of.js
  var require_es6_array_last_index_of = __commonJS({
    "../../node_modules/core-js/modules/es6.array.last-index-of.js"() {
      "use strict";
      var $export = require_export();
      var toIObject = require_to_iobject();
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      var $native = [].lastIndexOf;
      var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
      $export($export.P + $export.F * (NEGATIVE_ZERO || !require_strict_method()($native)), "Array", {
        lastIndexOf: function lastIndexOf(searchElement) {
          if (NEGATIVE_ZERO)
            return $native.apply(this, arguments) || 0;
          var O = toIObject(this);
          var length = toLength(O.length);
          var index = length - 1;
          if (arguments.length > 1)
            index = Math.min(index, toInteger(arguments[1]));
          if (index < 0)
            index = length + index;
          for (; index >= 0; index--)
            if (index in O) {
              if (O[index] === searchElement)
                return index || 0;
            }
          return -1;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_array-copy-within.js
  var require_array_copy_within = __commonJS({
    "../../node_modules/core-js/modules/_array-copy-within.js"(exports, module) {
      "use strict";
      var toObject = require_to_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      module.exports = [].copyWithin || function copyWithin(target, start) {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : void 0;
        var count = Math.min((end === void 0 ? len : toAbsoluteIndex(end, len)) - from, len - to);
        var inc = 1;
        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }
        while (count-- > 0) {
          if (from in O)
            O[to] = O[from];
          else
            delete O[to];
          to += inc;
          from += inc;
        }
        return O;
      };
    }
  });

  // ../../node_modules/core-js/modules/_add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "../../node_modules/core-js/modules/_add-to-unscopables.js"(exports, module) {
      var UNSCOPABLES = require_wks()("unscopables");
      var ArrayProto = Array.prototype;
      if (ArrayProto[UNSCOPABLES] == void 0)
        require_hide()(ArrayProto, UNSCOPABLES, {});
      module.exports = function(key) {
        ArrayProto[UNSCOPABLES][key] = true;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.copy-within.js
  var require_es6_array_copy_within = __commonJS({
    "../../node_modules/core-js/modules/es6.array.copy-within.js"() {
      var $export = require_export();
      $export($export.P, "Array", { copyWithin: require_array_copy_within() });
      require_add_to_unscopables()("copyWithin");
    }
  });

  // ../../node_modules/core-js/modules/_array-fill.js
  var require_array_fill = __commonJS({
    "../../node_modules/core-js/modules/_array-fill.js"(exports, module) {
      "use strict";
      var toObject = require_to_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      module.exports = function fill(value) {
        var O = toObject(this);
        var length = toLength(O.length);
        var aLen = arguments.length;
        var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : void 0, length);
        var end = aLen > 2 ? arguments[2] : void 0;
        var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
        while (endPos > index)
          O[index++] = value;
        return O;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.fill.js
  var require_es6_array_fill = __commonJS({
    "../../node_modules/core-js/modules/es6.array.fill.js"() {
      var $export = require_export();
      $export($export.P, "Array", { fill: require_array_fill() });
      require_add_to_unscopables()("fill");
    }
  });

  // ../../node_modules/core-js/modules/es6.array.find.js
  var require_es6_array_find = __commonJS({
    "../../node_modules/core-js/modules/es6.array.find.js"() {
      "use strict";
      var $export = require_export();
      var $find = require_array_methods()(5);
      var KEY = "find";
      var forced = true;
      if (KEY in [])
        Array(1)[KEY](function() {
          forced = false;
        });
      $export($export.P + $export.F * forced, "Array", {
        find: function find(callbackfn) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      require_add_to_unscopables()(KEY);
    }
  });

  // ../../node_modules/core-js/modules/es6.array.find-index.js
  var require_es6_array_find_index = __commonJS({
    "../../node_modules/core-js/modules/es6.array.find-index.js"() {
      "use strict";
      var $export = require_export();
      var $find = require_array_methods()(6);
      var KEY = "findIndex";
      var forced = true;
      if (KEY in [])
        Array(1)[KEY](function() {
          forced = false;
        });
      $export($export.P + $export.F * forced, "Array", {
        findIndex: function findIndex(callbackfn) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      require_add_to_unscopables()(KEY);
    }
  });

  // ../../node_modules/core-js/modules/_set-species.js
  var require_set_species = __commonJS({
    "../../node_modules/core-js/modules/_set-species.js"(exports, module) {
      "use strict";
      var global2 = require_global();
      var dP = require_object_dp();
      var DESCRIPTORS = require_descriptors();
      var SPECIES = require_wks()("species");
      module.exports = function(KEY) {
        var C = global2[KEY];
        if (DESCRIPTORS && C && !C[SPECIES])
          dP.f(C, SPECIES, {
            configurable: true,
            get: function() {
              return this;
            }
          });
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.species.js
  var require_es6_array_species = __commonJS({
    "../../node_modules/core-js/modules/es6.array.species.js"() {
      require_set_species()("Array");
    }
  });

  // ../../node_modules/core-js/modules/_iter-step.js
  var require_iter_step = __commonJS({
    "../../node_modules/core-js/modules/_iter-step.js"(exports, module) {
      module.exports = function(done, value) {
        return { value, done: !!done };
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.array.iterator.js
  var require_es6_array_iterator = __commonJS({
    "../../node_modules/core-js/modules/es6.array.iterator.js"(exports, module) {
      "use strict";
      var addToUnscopables = require_add_to_unscopables();
      var step = require_iter_step();
      var Iterators = require_iterators();
      var toIObject = require_to_iobject();
      module.exports = require_iter_define()(Array, "Array", function(iterated, kind) {
        this._t = toIObject(iterated);
        this._i = 0;
        this._k = kind;
      }, function() {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;
        if (!O || index >= O.length) {
          this._t = void 0;
          return step(1);
        }
        if (kind == "keys")
          return step(0, index);
        if (kind == "values")
          return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, "values");
      Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
    }
  });

  // ../../node_modules/core-js/modules/_flags.js
  var require_flags = __commonJS({
    "../../node_modules/core-js/modules/_flags.js"(exports, module) {
      "use strict";
      var anObject = require_an_object();
      module.exports = function() {
        var that = anObject(this);
        var result = "";
        if (that.global)
          result += "g";
        if (that.ignoreCase)
          result += "i";
        if (that.multiline)
          result += "m";
        if (that.unicode)
          result += "u";
        if (that.sticky)
          result += "y";
        return result;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.constructor.js
  var require_es6_regexp_constructor = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.constructor.js"() {
      var global2 = require_global();
      var inheritIfRequired = require_inherit_if_required();
      var dP = require_object_dp().f;
      var gOPN = require_object_gopn().f;
      var isRegExp = require_is_regexp();
      var $flags = require_flags();
      var $RegExp = global2.RegExp;
      var Base = $RegExp;
      var proto = $RegExp.prototype;
      var re1 = /a/g;
      var re2 = /a/g;
      var CORRECT_NEW = new $RegExp(re1) !== re1;
      if (require_descriptors() && (!CORRECT_NEW || require_fails()(function() {
        re2[require_wks()("match")] = false;
        return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, "i") != "/a/i";
      }))) {
        $RegExp = function RegExp2(p, f) {
          var tiRE = this instanceof $RegExp;
          var piRE = isRegExp(p);
          var fiU = f === void 0;
          return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
        };
        proxy = function(key) {
          key in $RegExp || dP($RegExp, key, {
            configurable: true,
            get: function() {
              return Base[key];
            },
            set: function(it) {
              Base[key] = it;
            }
          });
        };
        for (keys2 = gOPN(Base), i = 0; keys2.length > i; )
          proxy(keys2[i++]);
        proto.constructor = $RegExp;
        $RegExp.prototype = proto;
        require_redefine()(global2, "RegExp", $RegExp);
      }
      var proxy;
      var keys2;
      var i;
      require_set_species()("RegExp");
    }
  });

  // ../../node_modules/core-js/modules/_regexp-exec.js
  var require_regexp_exec = __commonJS({
    "../../node_modules/core-js/modules/_regexp-exec.js"(exports, module) {
      "use strict";
      var regexpFlags = require_flags();
      var nativeExec = RegExp.prototype.exec;
      var nativeReplace = String.prototype.replace;
      var patchedExec = nativeExec;
      var LAST_INDEX = "lastIndex";
      var UPDATES_LAST_INDEX_WRONG = function() {
        var re1 = /a/, re2 = /b*/g;
        nativeExec.call(re1, "a");
        nativeExec.call(re2, "a");
        return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
      }();
      var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;
      if (PATCH) {
        patchedExec = function exec(str) {
          var re = this;
          var lastIndex, reCopy, match, i;
          if (NPCG_INCLUDED) {
            reCopy = new RegExp("^" + re.source + "$(?!\\s)", regexpFlags.call(re));
          }
          if (UPDATES_LAST_INDEX_WRONG)
            lastIndex = re[LAST_INDEX];
          match = nativeExec.call(re, str);
          if (UPDATES_LAST_INDEX_WRONG && match) {
            re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
          }
          if (NPCG_INCLUDED && match && match.length > 1) {
            nativeReplace.call(match[0], reCopy, function() {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === void 0)
                  match[i] = void 0;
              }
            });
          }
          return match;
        };
      }
      module.exports = patchedExec;
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.exec.js
  var require_es6_regexp_exec = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.exec.js"() {
      "use strict";
      var regexpExec = require_regexp_exec();
      require_export()({
        target: "RegExp",
        proto: true,
        forced: regexpExec !== /./.exec
      }, {
        exec: regexpExec
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.flags.js
  var require_es6_regexp_flags = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.flags.js"() {
      if (require_descriptors() && /./g.flags != "g")
        require_object_dp().f(RegExp.prototype, "flags", {
          configurable: true,
          get: require_flags()
        });
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.to-string.js
  var require_es6_regexp_to_string = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.to-string.js"() {
      "use strict";
      require_es6_regexp_flags();
      var anObject = require_an_object();
      var $flags = require_flags();
      var DESCRIPTORS = require_descriptors();
      var TO_STRING = "toString";
      var $toString = /./[TO_STRING];
      var define2 = function(fn) {
        require_redefine()(RegExp.prototype, TO_STRING, fn, true);
      };
      if (require_fails()(function() {
        return $toString.call({ source: "a", flags: "b" }) != "/a/b";
      })) {
        define2(function toString() {
          var R = anObject(this);
          return "/".concat(R.source, "/", "flags" in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : void 0);
        });
      } else if ($toString.name != TO_STRING) {
        define2(function toString() {
          return $toString.call(this);
        });
      }
    }
  });

  // ../../node_modules/core-js/modules/_advance-string-index.js
  var require_advance_string_index = __commonJS({
    "../../node_modules/core-js/modules/_advance-string-index.js"(exports, module) {
      "use strict";
      var at = require_string_at()(true);
      module.exports = function(S, index, unicode) {
        return index + (unicode ? at(S, index).length : 1);
      };
    }
  });

  // ../../node_modules/core-js/modules/_regexp-exec-abstract.js
  var require_regexp_exec_abstract = __commonJS({
    "../../node_modules/core-js/modules/_regexp-exec-abstract.js"(exports, module) {
      "use strict";
      var classof = require_classof();
      var builtinExec = RegExp.prototype.exec;
      module.exports = function(R, S) {
        var exec = R.exec;
        if (typeof exec === "function") {
          var result = exec.call(R, S);
          if (typeof result !== "object") {
            throw new TypeError("RegExp exec method returned something other than an Object or null");
          }
          return result;
        }
        if (classof(R) !== "RegExp") {
          throw new TypeError("RegExp#exec called on incompatible receiver");
        }
        return builtinExec.call(R, S);
      };
    }
  });

  // ../../node_modules/core-js/modules/_fix-re-wks.js
  var require_fix_re_wks = __commonJS({
    "../../node_modules/core-js/modules/_fix-re-wks.js"(exports, module) {
      "use strict";
      require_es6_regexp_exec();
      var redefine = require_redefine();
      var hide = require_hide();
      var fails = require_fails();
      var defined = require_defined();
      var wks = require_wks();
      var regexpExec = require_regexp_exec();
      var SPECIES = wks("species");
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
        var re = /./;
        re.exec = function() {
          var result = [];
          result.groups = { a: "7" };
          return result;
        };
        return "".replace(re, "$<a>") !== "7";
      });
      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function() {
        var re = /(?:)/;
        var originalExec = re.exec;
        re.exec = function() {
          return originalExec.apply(this, arguments);
        };
        var result = "ab".split(re);
        return result.length === 2 && result[0] === "a" && result[1] === "b";
      }();
      module.exports = function(KEY, length, exec) {
        var SYMBOL = wks(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function() {
          var O = {};
          O[SYMBOL] = function() {
            return 7;
          };
          return ""[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function() {
          var execCalled = false;
          var re = /a/;
          re.exec = function() {
            execCalled = true;
            return null;
          };
          if (KEY === "split") {
            re.constructor = {};
            re.constructor[SPECIES] = function() {
              return re;
            };
          }
          re[SYMBOL]("");
          return !execCalled;
        }) : void 0;
        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === "replace" && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
          var nativeRegExpMethod = /./[SYMBOL];
          var fns = exec(defined, SYMBOL, ""[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
              }
              return { done: true, value: nativeMethod.call(str, regexp, arg2) };
            }
            return { done: false };
          });
          var strfn = fns[0];
          var rxfn = fns[1];
          redefine(String.prototype, KEY, strfn);
          hide(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
            return rxfn.call(string, this, arg);
          } : function(string) {
            return rxfn.call(string, this);
          });
        }
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.match.js
  var require_es6_regexp_match = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.match.js"() {
      "use strict";
      var anObject = require_an_object();
      var toLength = require_to_length();
      var advanceStringIndex = require_advance_string_index();
      var regExpExec = require_regexp_exec_abstract();
      require_fix_re_wks()("match", 1, function(defined, MATCH, $match, maybeCallNative) {
        return [
          function match(regexp) {
            var O = defined(this);
            var fn = regexp == void 0 ? void 0 : regexp[MATCH];
            return fn !== void 0 ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
          },
          function(regexp) {
            var res = maybeCallNative($match, regexp, this);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            if (!rx.global)
              return regExpExec(rx, S);
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
            var A = [];
            var n = 0;
            var result;
            while ((result = regExpExec(rx, S)) !== null) {
              var matchStr = String(result[0]);
              A[n] = matchStr;
              if (matchStr === "")
                rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
              n++;
            }
            return n === 0 ? null : A;
          }
        ];
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.replace.js
  var require_es6_regexp_replace = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.replace.js"() {
      "use strict";
      var anObject = require_an_object();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var toInteger = require_to_integer();
      var advanceStringIndex = require_advance_string_index();
      var regExpExec = require_regexp_exec_abstract();
      var max = Math.max;
      var min = Math.min;
      var floor = Math.floor;
      var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;
      var maybeToString = function(it) {
        return it === void 0 ? it : String(it);
      };
      require_fix_re_wks()("replace", 2, function(defined, REPLACE, $replace, maybeCallNative) {
        return [
          function replace(searchValue, replaceValue) {
            var O = defined(this);
            var fn = searchValue == void 0 ? void 0 : searchValue[REPLACE];
            return fn !== void 0 ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
          },
          function(regexp, replaceValue) {
            var res = maybeCallNative($replace, regexp, this, replaceValue);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var functionalReplace = typeof replaceValue === "function";
            if (!functionalReplace)
              replaceValue = String(replaceValue);
            var global2 = rx.global;
            if (global2) {
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }
            var results = [];
            while (true) {
              var result = regExpExec(rx, S);
              if (result === null)
                break;
              results.push(result);
              if (!global2)
                break;
              var matchStr = String(result[0]);
              if (matchStr === "")
                rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = "";
            var nextSourcePosition = 0;
            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = String(result[0]);
              var position2 = max(min(toInteger(result.index), S.length), 0);
              var captures = [];
              for (var j = 1; j < result.length; j++)
                captures.push(maybeToString(result[j]));
              var namedCaptures = result.groups;
              if (functionalReplace) {
                var replacerArgs = [matched].concat(captures, position2, S);
                if (namedCaptures !== void 0)
                  replacerArgs.push(namedCaptures);
                var replacement = String(replaceValue.apply(void 0, replacerArgs));
              } else {
                replacement = getSubstitution(matched, S, position2, captures, namedCaptures, replaceValue);
              }
              if (position2 >= nextSourcePosition) {
                accumulatedResult += S.slice(nextSourcePosition, position2) + replacement;
                nextSourcePosition = position2 + matched.length;
              }
            }
            return accumulatedResult + S.slice(nextSourcePosition);
          }
        ];
        function getSubstitution(matched, str, position2, captures, namedCaptures, replacement) {
          var tailPos = position2 + matched.length;
          var m = captures.length;
          var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
          if (namedCaptures !== void 0) {
            namedCaptures = toObject(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
          }
          return $replace.call(replacement, symbols, function(match, ch) {
            var capture;
            switch (ch.charAt(0)) {
              case "$":
                return "$";
              case "&":
                return matched;
              case "`":
                return str.slice(0, position2);
              case "'":
                return str.slice(tailPos);
              case "<":
                capture = namedCaptures[ch.slice(1, -1)];
                break;
              default:
                var n = +ch;
                if (n === 0)
                  return match;
                if (n > m) {
                  var f = floor(n / 10);
                  if (f === 0)
                    return match;
                  if (f <= m)
                    return captures[f - 1] === void 0 ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                  return match;
                }
                capture = captures[n - 1];
            }
            return capture === void 0 ? "" : capture;
          });
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.search.js
  var require_es6_regexp_search = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.search.js"() {
      "use strict";
      var anObject = require_an_object();
      var sameValue = require_same_value();
      var regExpExec = require_regexp_exec_abstract();
      require_fix_re_wks()("search", 1, function(defined, SEARCH, $search, maybeCallNative) {
        return [
          function search(regexp) {
            var O = defined(this);
            var fn = regexp == void 0 ? void 0 : regexp[SEARCH];
            return fn !== void 0 ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
          },
          function(regexp) {
            var res = maybeCallNative($search, regexp, this);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var previousLastIndex = rx.lastIndex;
            if (!sameValue(previousLastIndex, 0))
              rx.lastIndex = 0;
            var result = regExpExec(rx, S);
            if (!sameValue(rx.lastIndex, previousLastIndex))
              rx.lastIndex = previousLastIndex;
            return result === null ? -1 : result.index;
          }
        ];
      });
    }
  });

  // ../../node_modules/core-js/modules/_species-constructor.js
  var require_species_constructor = __commonJS({
    "../../node_modules/core-js/modules/_species-constructor.js"(exports, module) {
      var anObject = require_an_object();
      var aFunction = require_a_function();
      var SPECIES = require_wks()("species");
      module.exports = function(O, D) {
        var C = anObject(O).constructor;
        var S;
        return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? D : aFunction(S);
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.regexp.split.js
  var require_es6_regexp_split = __commonJS({
    "../../node_modules/core-js/modules/es6.regexp.split.js"() {
      "use strict";
      var isRegExp = require_is_regexp();
      var anObject = require_an_object();
      var speciesConstructor = require_species_constructor();
      var advanceStringIndex = require_advance_string_index();
      var toLength = require_to_length();
      var callRegExpExec = require_regexp_exec_abstract();
      var regexpExec = require_regexp_exec();
      var fails = require_fails();
      var $min = Math.min;
      var $push = [].push;
      var $SPLIT = "split";
      var LENGTH = "length";
      var LAST_INDEX = "lastIndex";
      var MAX_UINT32 = 4294967295;
      var SUPPORTS_Y = !fails(function() {
        RegExp(MAX_UINT32, "y");
      });
      require_fix_re_wks()("split", 2, function(defined, SPLIT, $split, maybeCallNative) {
        var internalSplit;
        if ("abbc"[$SPLIT](/(b)*/)[1] == "c" || "test"[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || "ab"[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || "."[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || "."[$SPLIT](/()()/)[LENGTH] > 1 || ""[$SPLIT](/.?/)[LENGTH]) {
          internalSplit = function(separator, limit) {
            var string = String(this);
            if (separator === void 0 && limit === 0)
              return [];
            if (!isRegExp(separator))
              return $split.call(string, separator, limit);
            var output = [];
            var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" : "");
            var lastLastIndex = 0;
            var splitLimit = limit === void 0 ? MAX_UINT32 : limit >>> 0;
            var separatorCopy = new RegExp(separator.source, flags + "g");
            var match, lastIndex, lastLength;
            while (match = regexpExec.call(separatorCopy, string)) {
              lastIndex = separatorCopy[LAST_INDEX];
              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match[LENGTH] > 1 && match.index < string[LENGTH])
                  $push.apply(output, match.slice(1));
                lastLength = match[0][LENGTH];
                lastLastIndex = lastIndex;
                if (output[LENGTH] >= splitLimit)
                  break;
              }
              if (separatorCopy[LAST_INDEX] === match.index)
                separatorCopy[LAST_INDEX]++;
            }
            if (lastLastIndex === string[LENGTH]) {
              if (lastLength || !separatorCopy.test(""))
                output.push("");
            } else
              output.push(string.slice(lastLastIndex));
            return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
          };
        } else if ("0"[$SPLIT](void 0, 0)[LENGTH]) {
          internalSplit = function(separator, limit) {
            return separator === void 0 && limit === 0 ? [] : $split.call(this, separator, limit);
          };
        } else {
          internalSplit = $split;
        }
        return [
          function split(separator, limit) {
            var O = defined(this);
            var splitter = separator == void 0 ? void 0 : separator[SPLIT];
            return splitter !== void 0 ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
          },
          function(regexp, limit) {
            var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var C = speciesConstructor(rx, RegExp);
            var unicodeMatching = rx.unicode;
            var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") + (rx.unicode ? "u" : "") + (SUPPORTS_Y ? "y" : "g");
            var splitter = new C(SUPPORTS_Y ? rx : "^(?:" + rx.source + ")", flags);
            var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
            if (lim === 0)
              return [];
            if (S.length === 0)
              return callRegExpExec(splitter, S) === null ? [S] : [];
            var p = 0;
            var q = 0;
            var A = [];
            while (q < S.length) {
              splitter.lastIndex = SUPPORTS_Y ? q : 0;
              var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
              var e;
              if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
                q = advanceStringIndex(S, q, unicodeMatching);
              } else {
                A.push(S.slice(p, q));
                if (A.length === lim)
                  return A;
                for (var i = 1; i <= z.length - 1; i++) {
                  A.push(z[i]);
                  if (A.length === lim)
                    return A;
                }
                q = p = e;
              }
            }
            A.push(S.slice(p));
            return A;
          }
        ];
      });
    }
  });

  // ../../node_modules/core-js/modules/_an-instance.js
  var require_an_instance = __commonJS({
    "../../node_modules/core-js/modules/_an-instance.js"(exports, module) {
      module.exports = function(it, Constructor, name, forbiddenField) {
        if (!(it instanceof Constructor) || forbiddenField !== void 0 && forbiddenField in it) {
          throw TypeError(name + ": incorrect invocation!");
        }
        return it;
      };
    }
  });

  // ../../node_modules/core-js/modules/_for-of.js
  var require_for_of = __commonJS({
    "../../node_modules/core-js/modules/_for-of.js"(exports, module) {
      var ctx = require_ctx();
      var call = require_iter_call();
      var isArrayIter = require_is_array_iter();
      var anObject = require_an_object();
      var toLength = require_to_length();
      var getIterFn = require_core_get_iterator_method();
      var BREAK = {};
      var RETURN = {};
      var exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function() {
          return iterable;
        } : getIterFn(iterable);
        var f = ctx(fn, that, entries ? 2 : 1);
        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != "function")
          throw TypeError(iterable + " is not iterable!");
        if (isArrayIter(iterFn))
          for (length = toLength(iterable.length); length > index; index++) {
            result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
            if (result === BREAK || result === RETURN)
              return result;
          }
        else
          for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; ) {
            result = call(iterator, f, step.value, entries);
            if (result === BREAK || result === RETURN)
              return result;
          }
      };
      exports.BREAK = BREAK;
      exports.RETURN = RETURN;
    }
  });

  // ../../node_modules/core-js/modules/_task.js
  var require_task = __commonJS({
    "../../node_modules/core-js/modules/_task.js"(exports, module) {
      var ctx = require_ctx();
      var invoke = require_invoke();
      var html = require_html();
      var cel = require_dom_create();
      var global2 = require_global();
      var process2 = global2.process;
      var setTask = global2.setImmediate;
      var clearTask = global2.clearImmediate;
      var MessageChannel2 = global2.MessageChannel;
      var Dispatch = global2.Dispatch;
      var counter3 = 0;
      var queue = {};
      var ONREADYSTATECHANGE = "onreadystatechange";
      var defer;
      var channel;
      var port;
      var run = function() {
        var id = +this;
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };
      var listener = function(event) {
        run.call(event.data);
      };
      if (!setTask || !clearTask) {
        setTask = function setImmediate2(fn) {
          var args = [];
          var i = 1;
          while (arguments.length > i)
            args.push(arguments[i++]);
          queue[++counter3] = function() {
            invoke(typeof fn == "function" ? fn : Function(fn), args);
          };
          defer(counter3);
          return counter3;
        };
        clearTask = function clearImmediate(id) {
          delete queue[id];
        };
        if (require_cof()(process2) == "process") {
          defer = function(id) {
            process2.nextTick(ctx(run, id, 1));
          };
        } else if (Dispatch && Dispatch.now) {
          defer = function(id) {
            Dispatch.now(ctx(run, id, 1));
          };
        } else if (MessageChannel2) {
          channel = new MessageChannel2();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = ctx(port.postMessage, port, 1);
        } else if (global2.addEventListener && typeof postMessage == "function" && !global2.importScripts) {
          defer = function(id) {
            global2.postMessage(id + "", "*");
          };
          global2.addEventListener("message", listener, false);
        } else if (ONREADYSTATECHANGE in cel("script")) {
          defer = function(id) {
            html.appendChild(cel("script"))[ONREADYSTATECHANGE] = function() {
              html.removeChild(this);
              run.call(id);
            };
          };
        } else {
          defer = function(id) {
            setTimeout(ctx(run, id, 1), 0);
          };
        }
      }
      module.exports = {
        set: setTask,
        clear: clearTask
      };
    }
  });

  // ../../node_modules/core-js/modules/_microtask.js
  var require_microtask = __commonJS({
    "../../node_modules/core-js/modules/_microtask.js"(exports, module) {
      var global2 = require_global();
      var macrotask = require_task().set;
      var Observer = global2.MutationObserver || global2.WebKitMutationObserver;
      var process2 = global2.process;
      var Promise2 = global2.Promise;
      var isNode = require_cof()(process2) == "process";
      module.exports = function() {
        var head, last, notify;
        var flush = function() {
          var parent, fn;
          if (isNode && (parent = process2.domain))
            parent.exit();
          while (head) {
            fn = head.fn;
            head = head.next;
            try {
              fn();
            } catch (e) {
              if (head)
                notify();
              else
                last = void 0;
              throw e;
            }
          }
          last = void 0;
          if (parent)
            parent.enter();
        };
        if (isNode) {
          notify = function() {
            process2.nextTick(flush);
          };
        } else if (Observer && !(global2.navigator && global2.navigator.standalone)) {
          var toggle = true;
          var node = document.createTextNode("");
          new Observer(flush).observe(node, { characterData: true });
          notify = function() {
            node.data = toggle = !toggle;
          };
        } else if (Promise2 && Promise2.resolve) {
          var promise = Promise2.resolve(void 0);
          notify = function() {
            promise.then(flush);
          };
        } else {
          notify = function() {
            macrotask.call(global2, flush);
          };
        }
        return function(fn) {
          var task = { fn, next: void 0 };
          if (last)
            last.next = task;
          if (!head) {
            head = task;
            notify();
          }
          last = task;
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/_new-promise-capability.js
  var require_new_promise_capability = __commonJS({
    "../../node_modules/core-js/modules/_new-promise-capability.js"(exports, module) {
      "use strict";
      var aFunction = require_a_function();
      function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function($$resolve, $$reject) {
          if (resolve !== void 0 || reject !== void 0)
            throw TypeError("Bad Promise constructor");
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }
      module.exports.f = function(C) {
        return new PromiseCapability(C);
      };
    }
  });

  // ../../node_modules/core-js/modules/_perform.js
  var require_perform = __commonJS({
    "../../node_modules/core-js/modules/_perform.js"(exports, module) {
      module.exports = function(exec) {
        try {
          return { e: false, v: exec() };
        } catch (e) {
          return { e: true, v: e };
        }
      };
    }
  });

  // ../../node_modules/core-js/modules/_user-agent.js
  var require_user_agent = __commonJS({
    "../../node_modules/core-js/modules/_user-agent.js"(exports, module) {
      var global2 = require_global();
      var navigator2 = global2.navigator;
      module.exports = navigator2 && navigator2.userAgent || "";
    }
  });

  // ../../node_modules/core-js/modules/_promise-resolve.js
  var require_promise_resolve = __commonJS({
    "../../node_modules/core-js/modules/_promise-resolve.js"(exports, module) {
      var anObject = require_an_object();
      var isObject5 = require_is_object();
      var newPromiseCapability = require_new_promise_capability();
      module.exports = function(C, x) {
        anObject(C);
        if (isObject5(x) && x.constructor === C)
          return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
    }
  });

  // ../../node_modules/core-js/modules/_redefine-all.js
  var require_redefine_all = __commonJS({
    "../../node_modules/core-js/modules/_redefine-all.js"(exports, module) {
      var redefine = require_redefine();
      module.exports = function(target, src, safe) {
        for (var key in src)
          redefine(target, key, src[key], safe);
        return target;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.promise.js
  var require_es6_promise = __commonJS({
    "../../node_modules/core-js/modules/es6.promise.js"() {
      "use strict";
      var LIBRARY = require_library();
      var global2 = require_global();
      var ctx = require_ctx();
      var classof = require_classof();
      var $export = require_export();
      var isObject5 = require_is_object();
      var aFunction = require_a_function();
      var anInstance = require_an_instance();
      var forOf = require_for_of();
      var speciesConstructor = require_species_constructor();
      var task = require_task().set;
      var microtask = require_microtask()();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var userAgent = require_user_agent();
      var promiseResolve = require_promise_resolve();
      var PROMISE = "Promise";
      var TypeError2 = global2.TypeError;
      var process2 = global2.process;
      var versions = process2 && process2.versions;
      var v8 = versions && versions.v8 || "";
      var $Promise = global2[PROMISE];
      var isNode = classof(process2) == "process";
      var empty = function() {
      };
      var Internal;
      var newGenericPromiseCapability;
      var OwnPromiseCapability;
      var Wrapper;
      var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
      var USE_NATIVE = !!function() {
        try {
          var promise = $Promise.resolve(1);
          var FakePromise = (promise.constructor = {})[require_wks()("species")] = function(exec) {
            exec(empty, empty);
          };
          return (isNode || typeof PromiseRejectionEvent == "function") && promise.then(empty) instanceof FakePromise && v8.indexOf("6.6") !== 0 && userAgent.indexOf("Chrome/66") === -1;
        } catch (e) {
        }
      }();
      var isThenable = function(it) {
        var then;
        return isObject5(it) && typeof (then = it.then) == "function" ? then : false;
      };
      var notify = function(promise, isReject) {
        if (promise._n)
          return;
        promise._n = true;
        var chain = promise._c;
        microtask(function() {
          var value = promise._v;
          var ok = promise._s == 1;
          var i = 0;
          var run = function(reaction) {
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;
            try {
              if (handler) {
                if (!ok) {
                  if (promise._h == 2)
                    onHandleUnhandled(promise);
                  promise._h = 1;
                }
                if (handler === true)
                  result = value;
                else {
                  if (domain)
                    domain.enter();
                  result = handler(value);
                  if (domain) {
                    domain.exit();
                    exited = true;
                  }
                }
                if (result === reaction.promise) {
                  reject(TypeError2("Promise-chain cycle"));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else
                  resolve(result);
              } else
                reject(value);
            } catch (e) {
              if (domain && !exited)
                domain.exit();
              reject(e);
            }
          };
          while (chain.length > i)
            run(chain[i++]);
          promise._c = [];
          promise._n = false;
          if (isReject && !promise._h)
            onUnhandled(promise);
        });
      };
      var onUnhandled = function(promise) {
        task.call(global2, function() {
          var value = promise._v;
          var unhandled = isUnhandled(promise);
          var result, handler, console2;
          if (unhandled) {
            result = perform(function() {
              if (isNode) {
                process2.emit("unhandledRejection", value, promise);
              } else if (handler = global2.onunhandledrejection) {
                handler({ promise, reason: value });
              } else if ((console2 = global2.console) && console2.error) {
                console2.error("Unhandled promise rejection", value);
              }
            });
            promise._h = isNode || isUnhandled(promise) ? 2 : 1;
          }
          promise._a = void 0;
          if (unhandled && result.e)
            throw result.v;
        });
      };
      var isUnhandled = function(promise) {
        return promise._h !== 1 && (promise._a || promise._c).length === 0;
      };
      var onHandleUnhandled = function(promise) {
        task.call(global2, function() {
          var handler;
          if (isNode) {
            process2.emit("rejectionHandled", promise);
          } else if (handler = global2.onrejectionhandled) {
            handler({ promise, reason: promise._v });
          }
        });
      };
      var $reject = function(value) {
        var promise = this;
        if (promise._d)
          return;
        promise._d = true;
        promise = promise._w || promise;
        promise._v = value;
        promise._s = 2;
        if (!promise._a)
          promise._a = promise._c.slice();
        notify(promise, true);
      };
      var $resolve = function(value) {
        var promise = this;
        var then;
        if (promise._d)
          return;
        promise._d = true;
        promise = promise._w || promise;
        try {
          if (promise === value)
            throw TypeError2("Promise can't be resolved itself");
          if (then = isThenable(value)) {
            microtask(function() {
              var wrapper = { _w: promise, _d: false };
              try {
                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
              } catch (e) {
                $reject.call(wrapper, e);
              }
            });
          } else {
            promise._v = value;
            promise._s = 1;
            notify(promise, false);
          }
        } catch (e) {
          $reject.call({ _w: promise, _d: false }, e);
        }
      };
      if (!USE_NATIVE) {
        $Promise = function Promise2(executor) {
          anInstance(this, $Promise, PROMISE, "_h");
          aFunction(executor);
          Internal.call(this);
          try {
            executor(ctx($resolve, this, 1), ctx($reject, this, 1));
          } catch (err) {
            $reject.call(this, err);
          }
        };
        Internal = function Promise2(executor) {
          this._c = [];
          this._a = void 0;
          this._s = 0;
          this._d = false;
          this._v = void 0;
          this._h = 0;
          this._n = false;
        };
        Internal.prototype = require_redefine_all()($Promise.prototype, {
          then: function then(onFulfilled, onRejected) {
            var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
            reaction.ok = typeof onFulfilled == "function" ? onFulfilled : true;
            reaction.fail = typeof onRejected == "function" && onRejected;
            reaction.domain = isNode ? process2.domain : void 0;
            this._c.push(reaction);
            if (this._a)
              this._a.push(reaction);
            if (this._s)
              notify(this, false);
            return reaction.promise;
          },
          "catch": function(onRejected) {
            return this.then(void 0, onRejected);
          }
        });
        OwnPromiseCapability = function() {
          var promise = new Internal();
          this.promise = promise;
          this.resolve = ctx($resolve, promise, 1);
          this.reject = ctx($reject, promise, 1);
        };
        newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
          return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };
      }
      $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
      require_set_to_string_tag()($Promise, PROMISE);
      require_set_species()(PROMISE);
      Wrapper = require_core()[PROMISE];
      $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          var $$reject = capability.reject;
          $$reject(r);
          return capability.promise;
        }
      });
      $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
        resolve: function resolve(x) {
          return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
        }
      });
      $export($export.S + $export.F * !(USE_NATIVE && require_iter_detect()(function(iter) {
        $Promise.all(iter)["catch"](empty);
      })), PROMISE, {
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var values = [];
            var index = 0;
            var remaining = 1;
            forOf(iterable, false, function(promise) {
              var $index = index++;
              var alreadyCalled = false;
              values.push(void 0);
              remaining++;
              C.resolve(promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[$index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.e)
            reject(result.v);
          return capability.promise;
        },
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function() {
            forOf(iterable, false, function(promise) {
              C.resolve(promise).then(capability.resolve, reject);
            });
          });
          if (result.e)
            reject(result.v);
          return capability.promise;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_validate-collection.js
  var require_validate_collection = __commonJS({
    "../../node_modules/core-js/modules/_validate-collection.js"(exports, module) {
      var isObject5 = require_is_object();
      module.exports = function(it, TYPE) {
        if (!isObject5(it) || it._t !== TYPE)
          throw TypeError("Incompatible receiver, " + TYPE + " required!");
        return it;
      };
    }
  });

  // ../../node_modules/core-js/modules/_collection-strong.js
  var require_collection_strong = __commonJS({
    "../../node_modules/core-js/modules/_collection-strong.js"(exports, module) {
      "use strict";
      var dP = require_object_dp().f;
      var create = require_object_create();
      var redefineAll = require_redefine_all();
      var ctx = require_ctx();
      var anInstance = require_an_instance();
      var forOf = require_for_of();
      var $iterDefine = require_iter_define();
      var step = require_iter_step();
      var setSpecies = require_set_species();
      var DESCRIPTORS = require_descriptors();
      var fastKey = require_meta().fastKey;
      var validate = require_validate_collection();
      var SIZE = DESCRIPTORS ? "_s" : "size";
      var getEntry = function(that, key) {
        var index = fastKey(key);
        var entry;
        if (index !== "F")
          return that._i[index];
        for (entry = that._f; entry; entry = entry.n) {
          if (entry.k == key)
            return entry;
        }
      };
      module.exports = {
        getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function(that, iterable) {
            anInstance(that, C, NAME, "_i");
            that._t = NAME;
            that._i = create(null);
            that._f = void 0;
            that._l = void 0;
            that[SIZE] = 0;
            if (iterable != void 0)
              forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            clear: function clear() {
              for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                entry.r = true;
                if (entry.p)
                  entry.p = entry.p.n = void 0;
                delete data[entry.i];
              }
              that._f = that._l = void 0;
              that[SIZE] = 0;
            },
            "delete": function(key) {
              var that = validate(this, NAME);
              var entry = getEntry(that, key);
              if (entry) {
                var next = entry.n;
                var prev = entry.p;
                delete that._i[entry.i];
                entry.r = true;
                if (prev)
                  prev.n = next;
                if (next)
                  next.p = prev;
                if (that._f == entry)
                  that._f = next;
                if (that._l == entry)
                  that._l = prev;
                that[SIZE]--;
              }
              return !!entry;
            },
            forEach: function forEach(callbackfn) {
              validate(this, NAME);
              var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : void 0, 3);
              var entry;
              while (entry = entry ? entry.n : this._f) {
                f(entry.v, entry.k, this);
                while (entry && entry.r)
                  entry = entry.p;
              }
            },
            has: function has(key) {
              return !!getEntry(validate(this, NAME), key);
            }
          });
          if (DESCRIPTORS)
            dP(C.prototype, "size", {
              get: function() {
                return validate(this, NAME)[SIZE];
              }
            });
          return C;
        },
        def: function(that, key, value) {
          var entry = getEntry(that, key);
          var prev, index;
          if (entry) {
            entry.v = value;
          } else {
            that._l = entry = {
              i: index = fastKey(key, true),
              k: key,
              v: value,
              p: prev = that._l,
              n: void 0,
              r: false
            };
            if (!that._f)
              that._f = entry;
            if (prev)
              prev.n = entry;
            that[SIZE]++;
            if (index !== "F")
              that._i[index] = entry;
          }
          return that;
        },
        getEntry,
        setStrong: function(C, NAME, IS_MAP) {
          $iterDefine(C, NAME, function(iterated, kind) {
            this._t = validate(iterated, NAME);
            this._k = kind;
            this._l = void 0;
          }, function() {
            var that = this;
            var kind = that._k;
            var entry = that._l;
            while (entry && entry.r)
              entry = entry.p;
            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
              that._t = void 0;
              return step(1);
            }
            if (kind == "keys")
              return step(0, entry.k);
            if (kind == "values")
              return step(0, entry.v);
            return step(0, [entry.k, entry.v]);
          }, IS_MAP ? "entries" : "values", !IS_MAP, true);
          setSpecies(NAME);
        }
      };
    }
  });

  // ../../node_modules/core-js/modules/_collection.js
  var require_collection = __commonJS({
    "../../node_modules/core-js/modules/_collection.js"(exports, module) {
      "use strict";
      var global2 = require_global();
      var $export = require_export();
      var redefine = require_redefine();
      var redefineAll = require_redefine_all();
      var meta = require_meta();
      var forOf = require_for_of();
      var anInstance = require_an_instance();
      var isObject5 = require_is_object();
      var fails = require_fails();
      var $iterDetect = require_iter_detect();
      var setToStringTag = require_set_to_string_tag();
      var inheritIfRequired = require_inherit_if_required();
      module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global2[NAME];
        var C = Base;
        var ADDER = IS_MAP ? "set" : "add";
        var proto = C && C.prototype;
        var O = {};
        var fixMethod = function(KEY) {
          var fn = proto[KEY];
          redefine(proto, KEY, KEY == "delete" ? function(a2) {
            return IS_WEAK && !isObject5(a2) ? false : fn.call(this, a2 === 0 ? 0 : a2);
          } : KEY == "has" ? function has(a2) {
            return IS_WEAK && !isObject5(a2) ? false : fn.call(this, a2 === 0 ? 0 : a2);
          } : KEY == "get" ? function get3(a2) {
            return IS_WEAK && !isObject5(a2) ? void 0 : fn.call(this, a2 === 0 ? 0 : a2);
          } : KEY == "add" ? function add3(a2) {
            fn.call(this, a2 === 0 ? 0 : a2);
            return this;
          } : function set(a2, b2) {
            fn.call(this, a2 === 0 ? 0 : a2, b2);
            return this;
          });
        };
        if (typeof C != "function" || !(IS_WEAK || proto.forEach && !fails(function() {
          new C().entries().next();
        }))) {
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
          meta.NEED = true;
        } else {
          var instance = new C();
          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
          var THROWS_ON_PRIMITIVES = fails(function() {
            instance.has(1);
          });
          var ACCEPT_ITERABLES = $iterDetect(function(iter) {
            new C(iter);
          });
          var BUGGY_ZERO = !IS_WEAK && fails(function() {
            var $instance = new C();
            var index = 5;
            while (index--)
              $instance[ADDER](index, index);
            return !$instance.has(-0);
          });
          if (!ACCEPT_ITERABLES) {
            C = wrapper(function(target, iterable) {
              anInstance(target, C, NAME);
              var that = inheritIfRequired(new Base(), target, C);
              if (iterable != void 0)
                forOf(iterable, IS_MAP, that[ADDER], that);
              return that;
            });
            C.prototype = proto;
            proto.constructor = C;
          }
          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod("delete");
            fixMethod("has");
            IS_MAP && fixMethod("get");
          }
          if (BUGGY_ZERO || HASNT_CHAINING)
            fixMethod(ADDER);
          if (IS_WEAK && proto.clear)
            delete proto.clear;
        }
        setToStringTag(C, NAME);
        O[NAME] = C;
        $export($export.G + $export.W + $export.F * (C != Base), O);
        if (!IS_WEAK)
          common.setStrong(C, NAME, IS_MAP);
        return C;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.map.js
  var require_es6_map = __commonJS({
    "../../node_modules/core-js/modules/es6.map.js"(exports, module) {
      "use strict";
      var strong = require_collection_strong();
      var validate = require_validate_collection();
      var MAP = "Map";
      module.exports = require_collection()(MAP, function(get3) {
        return function Map2() {
          return get3(this, arguments.length > 0 ? arguments[0] : void 0);
        };
      }, {
        get: function get3(key) {
          var entry = strong.getEntry(validate(this, MAP), key);
          return entry && entry.v;
        },
        set: function set(key, value) {
          return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
        }
      }, strong, true);
    }
  });

  // ../../node_modules/core-js/modules/es6.set.js
  var require_es6_set = __commonJS({
    "../../node_modules/core-js/modules/es6.set.js"(exports, module) {
      "use strict";
      var strong = require_collection_strong();
      var validate = require_validate_collection();
      var SET = "Set";
      module.exports = require_collection()(SET, function(get3) {
        return function Set2() {
          return get3(this, arguments.length > 0 ? arguments[0] : void 0);
        };
      }, {
        add: function add3(value) {
          return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
        }
      }, strong);
    }
  });

  // ../../node_modules/core-js/modules/_collection-weak.js
  var require_collection_weak = __commonJS({
    "../../node_modules/core-js/modules/_collection-weak.js"(exports, module) {
      "use strict";
      var redefineAll = require_redefine_all();
      var getWeak = require_meta().getWeak;
      var anObject = require_an_object();
      var isObject5 = require_is_object();
      var anInstance = require_an_instance();
      var forOf = require_for_of();
      var createArrayMethod = require_array_methods();
      var $has = require_has();
      var validate = require_validate_collection();
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var id = 0;
      var uncaughtFrozenStore = function(that) {
        return that._l || (that._l = new UncaughtFrozenStore());
      };
      var UncaughtFrozenStore = function() {
        this.a = [];
      };
      var findUncaughtFrozen = function(store, key) {
        return arrayFind(store.a, function(it) {
          return it[0] === key;
        });
      };
      UncaughtFrozenStore.prototype = {
        get: function(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            return entry[1];
        },
        has: function(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            entry[1] = value;
          else
            this.a.push([key, value]);
        },
        "delete": function(key) {
          var index = arrayFindIndex(this.a, function(it) {
            return it[0] === key;
          });
          if (~index)
            this.a.splice(index, 1);
          return !!~index;
        }
      };
      module.exports = {
        getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function(that, iterable) {
            anInstance(that, C, NAME, "_i");
            that._t = NAME;
            that._i = id++;
            that._l = void 0;
            if (iterable != void 0)
              forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            "delete": function(key) {
              if (!isObject5(key))
                return false;
              var data = getWeak(key);
              if (data === true)
                return uncaughtFrozenStore(validate(this, NAME))["delete"](key);
              return data && $has(data, this._i) && delete data[this._i];
            },
            has: function has(key) {
              if (!isObject5(key))
                return false;
              var data = getWeak(key);
              if (data === true)
                return uncaughtFrozenStore(validate(this, NAME)).has(key);
              return data && $has(data, this._i);
            }
          });
          return C;
        },
        def: function(that, key, value) {
          var data = getWeak(anObject(key), true);
          if (data === true)
            uncaughtFrozenStore(that).set(key, value);
          else
            data[that._i] = value;
          return that;
        },
        ufstore: uncaughtFrozenStore
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.weak-map.js
  var require_es6_weak_map = __commonJS({
    "../../node_modules/core-js/modules/es6.weak-map.js"(exports, module) {
      "use strict";
      var global2 = require_global();
      var each = require_array_methods()(0);
      var redefine = require_redefine();
      var meta = require_meta();
      var assign = require_object_assign();
      var weak = require_collection_weak();
      var isObject5 = require_is_object();
      var validate = require_validate_collection();
      var NATIVE_WEAK_MAP = require_validate_collection();
      var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
      var WEAK_MAP = "WeakMap";
      var getWeak = meta.getWeak;
      var isExtensible = Object.isExtensible;
      var uncaughtFrozenStore = weak.ufstore;
      var InternalMap;
      var wrapper = function(get3) {
        return function WeakMap2() {
          return get3(this, arguments.length > 0 ? arguments[0] : void 0);
        };
      };
      var methods = {
        get: function get3(key) {
          if (isObject5(key)) {
            var data = getWeak(key);
            if (data === true)
              return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
            return data ? data[this._i] : void 0;
          }
        },
        set: function set(key, value) {
          return weak.def(validate(this, WEAK_MAP), key, value);
        }
      };
      var $WeakMap = module.exports = require_collection()(WEAK_MAP, wrapper, methods, weak, true, true);
      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
        assign(InternalMap.prototype, methods);
        meta.NEED = true;
        each(["delete", "has", "get", "set"], function(key) {
          var proto = $WeakMap.prototype;
          var method = proto[key];
          redefine(proto, key, function(a2, b2) {
            if (isObject5(a2) && !isExtensible(a2)) {
              if (!this._f)
                this._f = new InternalMap();
              var result = this._f[key](a2, b2);
              return key == "set" ? this : result;
            }
            return method.call(this, a2, b2);
          });
        });
      }
    }
  });

  // ../../node_modules/core-js/modules/es6.weak-set.js
  var require_es6_weak_set = __commonJS({
    "../../node_modules/core-js/modules/es6.weak-set.js"() {
      "use strict";
      var weak = require_collection_weak();
      var validate = require_validate_collection();
      var WEAK_SET = "WeakSet";
      require_collection()(WEAK_SET, function(get3) {
        return function WeakSet2() {
          return get3(this, arguments.length > 0 ? arguments[0] : void 0);
        };
      }, {
        add: function add3(value) {
          return weak.def(validate(this, WEAK_SET), value, true);
        }
      }, weak, false, true);
    }
  });

  // ../../node_modules/core-js/modules/_typed.js
  var require_typed = __commonJS({
    "../../node_modules/core-js/modules/_typed.js"(exports, module) {
      var global2 = require_global();
      var hide = require_hide();
      var uid = require_uid();
      var TYPED = uid("typed_array");
      var VIEW = uid("view");
      var ABV = !!(global2.ArrayBuffer && global2.DataView);
      var CONSTR = ABV;
      var i = 0;
      var l = 9;
      var Typed;
      var TypedArrayConstructors = "Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");
      while (i < l) {
        if (Typed = global2[TypedArrayConstructors[i++]]) {
          hide(Typed.prototype, TYPED, true);
          hide(Typed.prototype, VIEW, true);
        } else
          CONSTR = false;
      }
      module.exports = {
        ABV,
        CONSTR,
        TYPED,
        VIEW
      };
    }
  });

  // ../../node_modules/core-js/modules/_to-index.js
  var require_to_index = __commonJS({
    "../../node_modules/core-js/modules/_to-index.js"(exports, module) {
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      module.exports = function(it) {
        if (it === void 0)
          return 0;
        var number2 = toInteger(it);
        var length = toLength(number2);
        if (number2 !== length)
          throw RangeError("Wrong length!");
        return length;
      };
    }
  });

  // ../../node_modules/core-js/modules/_typed-buffer.js
  var require_typed_buffer = __commonJS({
    "../../node_modules/core-js/modules/_typed-buffer.js"(exports) {
      "use strict";
      var global2 = require_global();
      var DESCRIPTORS = require_descriptors();
      var LIBRARY = require_library();
      var $typed = require_typed();
      var hide = require_hide();
      var redefineAll = require_redefine_all();
      var fails = require_fails();
      var anInstance = require_an_instance();
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      var toIndex = require_to_index();
      var gOPN = require_object_gopn().f;
      var dP = require_object_dp().f;
      var arrayFill = require_array_fill();
      var setToStringTag = require_set_to_string_tag();
      var ARRAY_BUFFER = "ArrayBuffer";
      var DATA_VIEW = "DataView";
      var PROTOTYPE = "prototype";
      var WRONG_LENGTH = "Wrong length!";
      var WRONG_INDEX = "Wrong index!";
      var $ArrayBuffer = global2[ARRAY_BUFFER];
      var $DataView = global2[DATA_VIEW];
      var Math2 = global2.Math;
      var RangeError2 = global2.RangeError;
      var Infinity2 = global2.Infinity;
      var BaseBuffer = $ArrayBuffer;
      var abs = Math2.abs;
      var pow = Math2.pow;
      var floor = Math2.floor;
      var log = Math2.log;
      var LN2 = Math2.LN2;
      var BUFFER = "buffer";
      var BYTE_LENGTH = "byteLength";
      var BYTE_OFFSET = "byteOffset";
      var $BUFFER = DESCRIPTORS ? "_b" : BUFFER;
      var $LENGTH = DESCRIPTORS ? "_l" : BYTE_LENGTH;
      var $OFFSET = DESCRIPTORS ? "_o" : BYTE_OFFSET;
      function packIEEE754(value, mLen, nBytes) {
        var buffer = new Array(nBytes);
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var i = 0;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        var e, m, c2;
        value = abs(value);
        if (value != value || value === Infinity2) {
          m = value != value ? 1 : 0;
          e = eMax;
        } else {
          e = floor(log(value) / LN2);
          if (value * (c2 = pow(2, -e)) < 1) {
            e--;
            c2 *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c2;
          } else {
            value += rt * pow(2, 1 - eBias);
          }
          if (value * c2 >= 2) {
            e++;
            c2 /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c2 - 1) * pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * pow(2, eBias - 1) * pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8)
          ;
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8)
          ;
        buffer[--i] |= s * 128;
        return buffer;
      }
      function unpackIEEE754(buffer, mLen, nBytes) {
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = eLen - 7;
        var i = nBytes - 1;
        var s = buffer[i--];
        var e = s & 127;
        var m;
        s >>= 7;
        for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8)
          ;
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8)
          ;
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : s ? -Infinity2 : Infinity2;
        } else {
          m = m + pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * pow(2, e - mLen);
      }
      function unpackI32(bytes) {
        return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
      }
      function packI8(it) {
        return [it & 255];
      }
      function packI16(it) {
        return [it & 255, it >> 8 & 255];
      }
      function packI32(it) {
        return [it & 255, it >> 8 & 255, it >> 16 & 255, it >> 24 & 255];
      }
      function packF64(it) {
        return packIEEE754(it, 52, 8);
      }
      function packF32(it) {
        return packIEEE754(it, 23, 4);
      }
      function addGetter(C, key2, internal) {
        dP(C[PROTOTYPE], key2, { get: function() {
          return this[internal];
        } });
      }
      function get3(view2, bytes, index, isLittleEndian) {
        var numIndex = +index;
        var intIndex = toIndex(numIndex);
        if (intIndex + bytes > view2[$LENGTH])
          throw RangeError2(WRONG_INDEX);
        var store = view2[$BUFFER]._b;
        var start = intIndex + view2[$OFFSET];
        var pack = store.slice(start, start + bytes);
        return isLittleEndian ? pack : pack.reverse();
      }
      function set(view2, bytes, index, conversion, value, isLittleEndian) {
        var numIndex = +index;
        var intIndex = toIndex(numIndex);
        if (intIndex + bytes > view2[$LENGTH])
          throw RangeError2(WRONG_INDEX);
        var store = view2[$BUFFER]._b;
        var start = intIndex + view2[$OFFSET];
        var pack = conversion(+value);
        for (var i = 0; i < bytes; i++)
          store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
      }
      if (!$typed.ABV) {
        $ArrayBuffer = function ArrayBuffer2(length) {
          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
          var byteLength = toIndex(length);
          this._b = arrayFill.call(new Array(byteLength), 0);
          this[$LENGTH] = byteLength;
        };
        $DataView = function DataView2(buffer, byteOffset, byteLength) {
          anInstance(this, $DataView, DATA_VIEW);
          anInstance(buffer, $ArrayBuffer, DATA_VIEW);
          var bufferLength = buffer[$LENGTH];
          var offset = toInteger(byteOffset);
          if (offset < 0 || offset > bufferLength)
            throw RangeError2("Wrong offset!");
          byteLength = byteLength === void 0 ? bufferLength - offset : toLength(byteLength);
          if (offset + byteLength > bufferLength)
            throw RangeError2(WRONG_LENGTH);
          this[$BUFFER] = buffer;
          this[$OFFSET] = offset;
          this[$LENGTH] = byteLength;
        };
        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, BYTE_LENGTH, "_l");
          addGetter($DataView, BUFFER, "_b");
          addGetter($DataView, BYTE_LENGTH, "_l");
          addGetter($DataView, BYTE_OFFSET, "_o");
        }
        redefineAll($DataView[PROTOTYPE], {
          getInt8: function getInt8(byteOffset) {
            return get3(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get3(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset) {
            var bytes = get3(this, 2, byteOffset, arguments[1]);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset) {
            var bytes = get3(this, 2, byteOffset, arguments[1]);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset) {
            return unpackI32(get3(this, 4, byteOffset, arguments[1]));
          },
          getUint32: function getUint32(byteOffset) {
            return unpackI32(get3(this, 4, byteOffset, arguments[1])) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset) {
            return unpackIEEE754(get3(this, 4, byteOffset, arguments[1]), 23, 4);
          },
          getFloat64: function getFloat64(byteOffset) {
            return unpackIEEE754(get3(this, 8, byteOffset, arguments[1]), 52, 8);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packI8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packI8, value);
          },
          setInt16: function setInt16(byteOffset, value) {
            set(this, 2, byteOffset, packI16, value, arguments[2]);
          },
          setUint16: function setUint16(byteOffset, value) {
            set(this, 2, byteOffset, packI16, value, arguments[2]);
          },
          setInt32: function setInt32(byteOffset, value) {
            set(this, 4, byteOffset, packI32, value, arguments[2]);
          },
          setUint32: function setUint32(byteOffset, value) {
            set(this, 4, byteOffset, packI32, value, arguments[2]);
          },
          setFloat32: function setFloat32(byteOffset, value) {
            set(this, 4, byteOffset, packF32, value, arguments[2]);
          },
          setFloat64: function setFloat64(byteOffset, value) {
            set(this, 8, byteOffset, packF64, value, arguments[2]);
          }
        });
      } else {
        if (!fails(function() {
          $ArrayBuffer(1);
        }) || !fails(function() {
          new $ArrayBuffer(-1);
        }) || fails(function() {
          new $ArrayBuffer();
          new $ArrayBuffer(1.5);
          new $ArrayBuffer(NaN);
          return $ArrayBuffer.name != ARRAY_BUFFER;
        })) {
          $ArrayBuffer = function ArrayBuffer2(length) {
            anInstance(this, $ArrayBuffer);
            return new BaseBuffer(toIndex(length));
          };
          ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
          for (keys2 = gOPN(BaseBuffer), j = 0; keys2.length > j; ) {
            if (!((key = keys2[j++]) in $ArrayBuffer))
              hide($ArrayBuffer, key, BaseBuffer[key]);
          }
          if (!LIBRARY)
            ArrayBufferProto.constructor = $ArrayBuffer;
        }
        view = new $DataView(new $ArrayBuffer(2));
        $setInt8 = $DataView[PROTOTYPE].setInt8;
        view.setInt8(0, 2147483648);
        view.setInt8(1, 2147483649);
        if (view.getInt8(0) || !view.getInt8(1))
          redefineAll($DataView[PROTOTYPE], {
            setInt8: function setInt8(byteOffset, value) {
              $setInt8.call(this, byteOffset, value << 24 >> 24);
            },
            setUint8: function setUint8(byteOffset, value) {
              $setInt8.call(this, byteOffset, value << 24 >> 24);
            }
          }, true);
      }
      var ArrayBufferProto;
      var keys2;
      var j;
      var key;
      var view;
      var $setInt8;
      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      hide($DataView[PROTOTYPE], $typed.VIEW, true);
      exports[ARRAY_BUFFER] = $ArrayBuffer;
      exports[DATA_VIEW] = $DataView;
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.array-buffer.js
  var require_es6_typed_array_buffer = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.array-buffer.js"() {
      "use strict";
      var $export = require_export();
      var $typed = require_typed();
      var buffer = require_typed_buffer();
      var anObject = require_an_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      var isObject5 = require_is_object();
      var ArrayBuffer2 = require_global().ArrayBuffer;
      var speciesConstructor = require_species_constructor();
      var $ArrayBuffer = buffer.ArrayBuffer;
      var $DataView = buffer.DataView;
      var $isView = $typed.ABV && ArrayBuffer2.isView;
      var $slice = $ArrayBuffer.prototype.slice;
      var VIEW = $typed.VIEW;
      var ARRAY_BUFFER = "ArrayBuffer";
      $export($export.G + $export.W + $export.F * (ArrayBuffer2 !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
      $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
        isView: function isView(it) {
          return $isView && $isView(it) || isObject5(it) && VIEW in it;
        }
      });
      $export($export.P + $export.U + $export.F * require_fails()(function() {
        return !new $ArrayBuffer(2).slice(1, void 0).byteLength;
      }), ARRAY_BUFFER, {
        slice: function slice(start, end) {
          if ($slice !== void 0 && end === void 0)
            return $slice.call(anObject(this), start);
          var len = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, len);
          var fin = toAbsoluteIndex(end === void 0 ? len : end, len);
          var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
          var viewS = new $DataView(this);
          var viewT = new $DataView(result);
          var index = 0;
          while (first < fin) {
            viewT.setUint8(index++, viewS.getUint8(first++));
          }
          return result;
        }
      });
      require_set_species()(ARRAY_BUFFER);
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.data-view.js
  var require_es6_typed_data_view = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.data-view.js"() {
      var $export = require_export();
      $export($export.G + $export.W + $export.F * !require_typed().ABV, {
        DataView: require_typed_buffer().DataView
      });
    }
  });

  // ../../node_modules/core-js/modules/_typed-array.js
  var require_typed_array = __commonJS({
    "../../node_modules/core-js/modules/_typed-array.js"(exports, module) {
      "use strict";
      if (require_descriptors()) {
        LIBRARY = require_library();
        global2 = require_global();
        fails = require_fails();
        $export = require_export();
        $typed = require_typed();
        $buffer = require_typed_buffer();
        ctx = require_ctx();
        anInstance = require_an_instance();
        propertyDesc = require_property_desc();
        hide = require_hide();
        redefineAll = require_redefine_all();
        toInteger = require_to_integer();
        toLength = require_to_length();
        toIndex = require_to_index();
        toAbsoluteIndex = require_to_absolute_index();
        toPrimitive = require_to_primitive();
        has = require_has();
        classof = require_classof();
        isObject5 = require_is_object();
        toObject = require_to_object();
        isArrayIter = require_is_array_iter();
        create = require_object_create();
        getPrototypeOf = require_object_gpo();
        gOPN = require_object_gopn().f;
        getIterFn = require_core_get_iterator_method();
        uid = require_uid();
        wks = require_wks();
        createArrayMethod = require_array_methods();
        createArrayIncludes = require_array_includes();
        speciesConstructor = require_species_constructor();
        ArrayIterators = require_es6_array_iterator();
        Iterators = require_iterators();
        $iterDetect = require_iter_detect();
        setSpecies = require_set_species();
        arrayFill = require_array_fill();
        arrayCopyWithin = require_array_copy_within();
        $DP = require_object_dp();
        $GOPD = require_object_gopd();
        dP = $DP.f;
        gOPD = $GOPD.f;
        RangeError2 = global2.RangeError;
        TypeError2 = global2.TypeError;
        Uint8Array2 = global2.Uint8Array;
        ARRAY_BUFFER = "ArrayBuffer";
        SHARED_BUFFER = "Shared" + ARRAY_BUFFER;
        BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
        PROTOTYPE = "prototype";
        ArrayProto = Array[PROTOTYPE];
        $ArrayBuffer = $buffer.ArrayBuffer;
        $DataView = $buffer.DataView;
        arrayForEach = createArrayMethod(0);
        arrayFilter = createArrayMethod(2);
        arraySome = createArrayMethod(3);
        arrayEvery = createArrayMethod(4);
        arrayFind = createArrayMethod(5);
        arrayFindIndex = createArrayMethod(6);
        arrayIncludes = createArrayIncludes(true);
        arrayIndexOf = createArrayIncludes(false);
        arrayValues = ArrayIterators.values;
        arrayKeys = ArrayIterators.keys;
        arrayEntries = ArrayIterators.entries;
        arrayLastIndexOf = ArrayProto.lastIndexOf;
        arrayReduce = ArrayProto.reduce;
        arrayReduceRight = ArrayProto.reduceRight;
        arrayJoin = ArrayProto.join;
        arraySort = ArrayProto.sort;
        arraySlice = ArrayProto.slice;
        arrayToString = ArrayProto.toString;
        arrayToLocaleString = ArrayProto.toLocaleString;
        ITERATOR = wks("iterator");
        TAG = wks("toStringTag");
        TYPED_CONSTRUCTOR = uid("typed_constructor");
        DEF_CONSTRUCTOR = uid("def_constructor");
        ALL_CONSTRUCTORS = $typed.CONSTR;
        TYPED_ARRAY = $typed.TYPED;
        VIEW = $typed.VIEW;
        WRONG_LENGTH = "Wrong length!";
        $map = createArrayMethod(1, function(O, length) {
          return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
        });
        LITTLE_ENDIAN = fails(function() {
          return new Uint8Array2(new Uint16Array([1]).buffer)[0] === 1;
        });
        FORCED_SET = !!Uint8Array2 && !!Uint8Array2[PROTOTYPE].set && fails(function() {
          new Uint8Array2(1).set({});
        });
        toOffset = function(it, BYTES) {
          var offset = toInteger(it);
          if (offset < 0 || offset % BYTES)
            throw RangeError2("Wrong offset!");
          return offset;
        };
        validate = function(it) {
          if (isObject5(it) && TYPED_ARRAY in it)
            return it;
          throw TypeError2(it + " is not a typed array!");
        };
        allocate = function(C, length) {
          if (!(isObject5(C) && TYPED_CONSTRUCTOR in C)) {
            throw TypeError2("It is not a typed array constructor!");
          }
          return new C(length);
        };
        speciesFromList = function(O, list2) {
          return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list2);
        };
        fromList = function(C, list2) {
          var index = 0;
          var length = list2.length;
          var result = allocate(C, length);
          while (length > index)
            result[index] = list2[index++];
          return result;
        };
        addGetter = function(it, key, internal) {
          dP(it, key, { get: function() {
            return this._d[internal];
          } });
        };
        $from = function from(source) {
          var O = toObject(source);
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          var iterFn = getIterFn(O);
          var i, length, values, result, step, iterator;
          if (iterFn != void 0 && !isArrayIter(iterFn)) {
            for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
              values.push(step.value);
            }
            O = values;
          }
          if (mapping && aLen > 2)
            mapfn = ctx(mapfn, arguments[2], 2);
          for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
            result[i] = mapping ? mapfn(O[i], i) : O[i];
          }
          return result;
        };
        $of = function of() {
          var index = 0;
          var length = arguments.length;
          var result = allocate(this, length);
          while (length > index)
            result[index] = arguments[index++];
          return result;
        };
        TO_LOCALE_BUG = !!Uint8Array2 && fails(function() {
          arrayToLocaleString.call(new Uint8Array2(1));
        });
        $toLocaleString = function toLocaleString() {
          return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
        };
        proto = {
          copyWithin: function copyWithin(target, start) {
            return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : void 0);
          },
          every: function every(callbackfn) {
            return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          },
          fill: function fill(value) {
            return arrayFill.apply(validate(this), arguments);
          },
          filter: function filter3(callbackfn) {
            return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0));
          },
          find: function find(predicate) {
            return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
          },
          findIndex: function findIndex(predicate) {
            return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
          },
          forEach: function forEach(callbackfn) {
            arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          },
          indexOf: function indexOf(searchElement) {
            return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
          },
          includes: function includes(searchElement) {
            return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
          },
          join: function join(separator) {
            return arrayJoin.apply(validate(this), arguments);
          },
          lastIndexOf: function lastIndexOf(searchElement) {
            return arrayLastIndexOf.apply(validate(this), arguments);
          },
          map: function map(mapfn) {
            return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : void 0);
          },
          reduce: function reduce(callbackfn) {
            return arrayReduce.apply(validate(this), arguments);
          },
          reduceRight: function reduceRight(callbackfn) {
            return arrayReduceRight.apply(validate(this), arguments);
          },
          reverse: function reverse() {
            var that = this;
            var length = validate(that).length;
            var middle = Math.floor(length / 2);
            var index = 0;
            var value;
            while (index < middle) {
              value = that[index];
              that[index++] = that[--length];
              that[length] = value;
            }
            return that;
          },
          some: function some(callbackfn) {
            return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          },
          sort: function sort(comparefn) {
            return arraySort.call(validate(this), comparefn);
          },
          subarray: function subarray(begin, end) {
            var O = validate(this);
            var length = O.length;
            var $begin = toAbsoluteIndex(begin, length);
            return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === void 0 ? length : toAbsoluteIndex(end, length)) - $begin));
          }
        };
        $slice = function slice(start, end) {
          return speciesFromList(this, arraySlice.call(validate(this), start, end));
        };
        $set = function set(arrayLike) {
          validate(this);
          var offset = toOffset(arguments[1], 1);
          var length = this.length;
          var src = toObject(arrayLike);
          var len = toLength(src.length);
          var index = 0;
          if (len + offset > length)
            throw RangeError2(WRONG_LENGTH);
          while (index < len)
            this[offset + index] = src[index++];
        };
        $iterators = {
          entries: function entries() {
            return arrayEntries.call(validate(this));
          },
          keys: function keys2() {
            return arrayKeys.call(validate(this));
          },
          values: function values() {
            return arrayValues.call(validate(this));
          }
        };
        isTAIndex = function(target, key) {
          return isObject5(target) && target[TYPED_ARRAY] && typeof key != "symbol" && key in target && String(+key) == String(key);
        };
        $getDesc = function getOwnPropertyDescriptor(target, key) {
          return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
        };
        $setDesc = function defineProperty(target, key, desc) {
          if (isTAIndex(target, key = toPrimitive(key, true)) && isObject5(desc) && has(desc, "value") && !has(desc, "get") && !has(desc, "set") && !desc.configurable && (!has(desc, "writable") || desc.writable) && (!has(desc, "enumerable") || desc.enumerable)) {
            target[key] = desc.value;
            return target;
          }
          return dP(target, key, desc);
        };
        if (!ALL_CONSTRUCTORS) {
          $GOPD.f = $getDesc;
          $DP.f = $setDesc;
        }
        $export($export.S + $export.F * !ALL_CONSTRUCTORS, "Object", {
          getOwnPropertyDescriptor: $getDesc,
          defineProperty: $setDesc
        });
        if (fails(function() {
          arrayToString.call({});
        })) {
          arrayToString = arrayToLocaleString = function toString() {
            return arrayJoin.call(this);
          };
        }
        $TypedArrayPrototype$ = redefineAll({}, proto);
        redefineAll($TypedArrayPrototype$, $iterators);
        hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
        redefineAll($TypedArrayPrototype$, {
          slice: $slice,
          set: $set,
          constructor: function() {
          },
          toString: arrayToString,
          toLocaleString: $toLocaleString
        });
        addGetter($TypedArrayPrototype$, "buffer", "b");
        addGetter($TypedArrayPrototype$, "byteOffset", "o");
        addGetter($TypedArrayPrototype$, "byteLength", "l");
        addGetter($TypedArrayPrototype$, "length", "e");
        dP($TypedArrayPrototype$, TAG, {
          get: function() {
            return this[TYPED_ARRAY];
          }
        });
        module.exports = function(KEY, BYTES, wrapper, CLAMPED) {
          CLAMPED = !!CLAMPED;
          var NAME = KEY + (CLAMPED ? "Clamped" : "") + "Array";
          var GETTER = "get" + KEY;
          var SETTER = "set" + KEY;
          var TypedArray = global2[NAME];
          var Base = TypedArray || {};
          var TAC = TypedArray && getPrototypeOf(TypedArray);
          var FORCED = !TypedArray || !$typed.ABV;
          var O = {};
          var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
          var getter = function(that, index) {
            var data = that._d;
            return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
          };
          var setter = function(that, index, value) {
            var data = that._d;
            if (CLAMPED)
              value = (value = Math.round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
            data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
          };
          var addElement = function(that, index) {
            dP(that, index, {
              get: function() {
                return getter(this, index);
              },
              set: function(value) {
                return setter(this, index, value);
              },
              enumerable: true
            });
          };
          if (FORCED) {
            TypedArray = wrapper(function(that, data, $offset, $length) {
              anInstance(that, TypedArray, NAME, "_d");
              var index = 0;
              var offset = 0;
              var buffer, byteLength, length, klass;
              if (!isObject5(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new $ArrayBuffer(byteLength);
              } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                buffer = data;
                offset = toOffset($offset, BYTES);
                var $len = data.byteLength;
                if ($length === void 0) {
                  if ($len % BYTES)
                    throw RangeError2(WRONG_LENGTH);
                  byteLength = $len - offset;
                  if (byteLength < 0)
                    throw RangeError2(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + offset > $len)
                    throw RangeError2(WRONG_LENGTH);
                }
                length = byteLength / BYTES;
              } else if (TYPED_ARRAY in data) {
                return fromList(TypedArray, data);
              } else {
                return $from.call(TypedArray, data);
              }
              hide(that, "_d", {
                b: buffer,
                o: offset,
                l: byteLength,
                e: length,
                v: new $DataView(buffer)
              });
              while (index < length)
                addElement(that, index++);
            });
            TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
            hide(TypedArrayPrototype, "constructor", TypedArray);
          } else if (!fails(function() {
            TypedArray(1);
          }) || !fails(function() {
            new TypedArray(-1);
          }) || !$iterDetect(function(iter) {
            new TypedArray();
            new TypedArray(null);
            new TypedArray(1.5);
            new TypedArray(iter);
          }, true)) {
            TypedArray = wrapper(function(that, data, $offset, $length) {
              anInstance(that, TypedArray, NAME);
              var klass;
              if (!isObject5(data))
                return new Base(toIndex(data));
              if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                return $length !== void 0 ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== void 0 ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
              }
              if (TYPED_ARRAY in data)
                return fromList(TypedArray, data);
              return $from.call(TypedArray, data);
            });
            arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key) {
              if (!(key in TypedArray))
                hide(TypedArray, key, Base[key]);
            });
            TypedArray[PROTOTYPE] = TypedArrayPrototype;
            if (!LIBRARY)
              TypedArrayPrototype.constructor = TypedArray;
          }
          var $nativeIterator = TypedArrayPrototype[ITERATOR];
          var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == "values" || $nativeIterator.name == void 0);
          var $iterator = $iterators.values;
          hide(TypedArray, TYPED_CONSTRUCTOR, true);
          hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
          hide(TypedArrayPrototype, VIEW, true);
          hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
          if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
            dP(TypedArrayPrototype, TAG, {
              get: function() {
                return NAME;
              }
            });
          }
          O[NAME] = TypedArray;
          $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
          $export($export.S, NAME, {
            BYTES_PER_ELEMENT: BYTES
          });
          $export($export.S + $export.F * fails(function() {
            Base.of.call(TypedArray, 1);
          }), NAME, {
            from: $from,
            of: $of
          });
          if (!(BYTES_PER_ELEMENT in TypedArrayPrototype))
            hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
          $export($export.P, NAME, proto);
          setSpecies(NAME);
          $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
          $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
          if (!LIBRARY && TypedArrayPrototype.toString != arrayToString)
            TypedArrayPrototype.toString = arrayToString;
          $export($export.P + $export.F * fails(function() {
            new TypedArray(1).slice();
          }), NAME, { slice: $slice });
          $export($export.P + $export.F * (fails(function() {
            return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
          }) || !fails(function() {
            TypedArrayPrototype.toLocaleString.call([1, 2]);
          })), NAME, { toLocaleString: $toLocaleString });
          Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
          if (!LIBRARY && !CORRECT_ITER_NAME)
            hide(TypedArrayPrototype, ITERATOR, $iterator);
        };
      } else
        module.exports = function() {
        };
      var LIBRARY;
      var global2;
      var fails;
      var $export;
      var $typed;
      var $buffer;
      var ctx;
      var anInstance;
      var propertyDesc;
      var hide;
      var redefineAll;
      var toInteger;
      var toLength;
      var toIndex;
      var toAbsoluteIndex;
      var toPrimitive;
      var has;
      var classof;
      var isObject5;
      var toObject;
      var isArrayIter;
      var create;
      var getPrototypeOf;
      var gOPN;
      var getIterFn;
      var uid;
      var wks;
      var createArrayMethod;
      var createArrayIncludes;
      var speciesConstructor;
      var ArrayIterators;
      var Iterators;
      var $iterDetect;
      var setSpecies;
      var arrayFill;
      var arrayCopyWithin;
      var $DP;
      var $GOPD;
      var dP;
      var gOPD;
      var RangeError2;
      var TypeError2;
      var Uint8Array2;
      var ARRAY_BUFFER;
      var SHARED_BUFFER;
      var BYTES_PER_ELEMENT;
      var PROTOTYPE;
      var ArrayProto;
      var $ArrayBuffer;
      var $DataView;
      var arrayForEach;
      var arrayFilter;
      var arraySome;
      var arrayEvery;
      var arrayFind;
      var arrayFindIndex;
      var arrayIncludes;
      var arrayIndexOf;
      var arrayValues;
      var arrayKeys;
      var arrayEntries;
      var arrayLastIndexOf;
      var arrayReduce;
      var arrayReduceRight;
      var arrayJoin;
      var arraySort;
      var arraySlice;
      var arrayToString;
      var arrayToLocaleString;
      var ITERATOR;
      var TAG;
      var TYPED_CONSTRUCTOR;
      var DEF_CONSTRUCTOR;
      var ALL_CONSTRUCTORS;
      var TYPED_ARRAY;
      var VIEW;
      var WRONG_LENGTH;
      var $map;
      var LITTLE_ENDIAN;
      var FORCED_SET;
      var toOffset;
      var validate;
      var allocate;
      var speciesFromList;
      var fromList;
      var addGetter;
      var $from;
      var $of;
      var TO_LOCALE_BUG;
      var $toLocaleString;
      var proto;
      var $slice;
      var $set;
      var $iterators;
      var isTAIndex;
      var $getDesc;
      var $setDesc;
      var $TypedArrayPrototype$;
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.int8-array.js
  var require_es6_typed_int8_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.int8-array.js"() {
      require_typed_array()("Int8", 1, function(init) {
        return function Int8Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.uint8-array.js
  var require_es6_typed_uint8_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.uint8-array.js"() {
      require_typed_array()("Uint8", 1, function(init) {
        return function Uint8Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.uint8-clamped-array.js
  var require_es6_typed_uint8_clamped_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.uint8-clamped-array.js"() {
      require_typed_array()("Uint8", 1, function(init) {
        return function Uint8ClampedArray2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      }, true);
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.int16-array.js
  var require_es6_typed_int16_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.int16-array.js"() {
      require_typed_array()("Int16", 2, function(init) {
        return function Int16Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.uint16-array.js
  var require_es6_typed_uint16_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.uint16-array.js"() {
      require_typed_array()("Uint16", 2, function(init) {
        return function Uint16Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.int32-array.js
  var require_es6_typed_int32_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.int32-array.js"() {
      require_typed_array()("Int32", 4, function(init) {
        return function Int32Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.uint32-array.js
  var require_es6_typed_uint32_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.uint32-array.js"() {
      require_typed_array()("Uint32", 4, function(init) {
        return function Uint32Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.float32-array.js
  var require_es6_typed_float32_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.float32-array.js"() {
      require_typed_array()("Float32", 4, function(init) {
        return function Float32Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.typed.float64-array.js
  var require_es6_typed_float64_array = __commonJS({
    "../../node_modules/core-js/modules/es6.typed.float64-array.js"() {
      require_typed_array()("Float64", 8, function(init) {
        return function Float64Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.apply.js
  var require_es6_reflect_apply = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.apply.js"() {
      var $export = require_export();
      var aFunction = require_a_function();
      var anObject = require_an_object();
      var rApply = (require_global().Reflect || {}).apply;
      var fApply = Function.apply;
      $export($export.S + $export.F * !require_fails()(function() {
        rApply(function() {
        });
      }), "Reflect", {
        apply: function apply(target, thisArgument, argumentsList) {
          var T = aFunction(target);
          var L = anObject(argumentsList);
          return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.construct.js
  var require_es6_reflect_construct = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.construct.js"() {
      var $export = require_export();
      var create = require_object_create();
      var aFunction = require_a_function();
      var anObject = require_an_object();
      var isObject5 = require_is_object();
      var fails = require_fails();
      var bind = require_bind();
      var rConstruct = (require_global().Reflect || {}).construct;
      var NEW_TARGET_BUG = fails(function() {
        function F() {
        }
        return !(rConstruct(function() {
        }, [], F) instanceof F);
      });
      var ARGS_BUG = !fails(function() {
        rConstruct(function() {
        });
      });
      $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), "Reflect", {
        construct: function construct(Target, args) {
          aFunction(Target);
          anObject(args);
          var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
          if (ARGS_BUG && !NEW_TARGET_BUG)
            return rConstruct(Target, args, newTarget);
          if (Target == newTarget) {
            switch (args.length) {
              case 0:
                return new Target();
              case 1:
                return new Target(args[0]);
              case 2:
                return new Target(args[0], args[1]);
              case 3:
                return new Target(args[0], args[1], args[2]);
              case 4:
                return new Target(args[0], args[1], args[2], args[3]);
            }
            var $args = [null];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
          }
          var proto = newTarget.prototype;
          var instance = create(isObject5(proto) ? proto : Object.prototype);
          var result = Function.apply.call(Target, instance, args);
          return isObject5(result) ? result : instance;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.define-property.js
  var require_es6_reflect_define_property = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.define-property.js"() {
      var dP = require_object_dp();
      var $export = require_export();
      var anObject = require_an_object();
      var toPrimitive = require_to_primitive();
      $export($export.S + $export.F * require_fails()(function() {
        Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
      }), "Reflect", {
        defineProperty: function defineProperty(target, propertyKey, attributes) {
          anObject(target);
          propertyKey = toPrimitive(propertyKey, true);
          anObject(attributes);
          try {
            dP.f(target, propertyKey, attributes);
            return true;
          } catch (e) {
            return false;
          }
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.delete-property.js
  var require_es6_reflect_delete_property = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.delete-property.js"() {
      var $export = require_export();
      var gOPD = require_object_gopd().f;
      var anObject = require_an_object();
      $export($export.S, "Reflect", {
        deleteProperty: function deleteProperty(target, propertyKey) {
          var desc = gOPD(anObject(target), propertyKey);
          return desc && !desc.configurable ? false : delete target[propertyKey];
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.enumerate.js
  var require_es6_reflect_enumerate = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.enumerate.js"() {
      "use strict";
      var $export = require_export();
      var anObject = require_an_object();
      var Enumerate = function(iterated) {
        this._t = anObject(iterated);
        this._i = 0;
        var keys2 = this._k = [];
        var key;
        for (key in iterated)
          keys2.push(key);
      };
      require_iter_create()(Enumerate, "Object", function() {
        var that = this;
        var keys2 = that._k;
        var key;
        do {
          if (that._i >= keys2.length)
            return { value: void 0, done: true };
        } while (!((key = keys2[that._i++]) in that._t));
        return { value: key, done: false };
      });
      $export($export.S, "Reflect", {
        enumerate: function enumerate(target) {
          return new Enumerate(target);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.get.js
  var require_es6_reflect_get = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.get.js"() {
      var gOPD = require_object_gopd();
      var getPrototypeOf = require_object_gpo();
      var has = require_has();
      var $export = require_export();
      var isObject5 = require_is_object();
      var anObject = require_an_object();
      function get3(target, propertyKey) {
        var receiver = arguments.length < 3 ? target : arguments[2];
        var desc, proto;
        if (anObject(target) === receiver)
          return target[propertyKey];
        if (desc = gOPD.f(target, propertyKey))
          return has(desc, "value") ? desc.value : desc.get !== void 0 ? desc.get.call(receiver) : void 0;
        if (isObject5(proto = getPrototypeOf(target)))
          return get3(proto, propertyKey, receiver);
      }
      $export($export.S, "Reflect", { get: get3 });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js
  var require_es6_reflect_get_own_property_descriptor = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js"() {
      var gOPD = require_object_gopd();
      var $export = require_export();
      var anObject = require_an_object();
      $export($export.S, "Reflect", {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
          return gOPD.f(anObject(target), propertyKey);
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.get-prototype-of.js
  var require_es6_reflect_get_prototype_of = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.get-prototype-of.js"() {
      var $export = require_export();
      var getProto = require_object_gpo();
      var anObject = require_an_object();
      $export($export.S, "Reflect", {
        getPrototypeOf: function getPrototypeOf(target) {
          return getProto(anObject(target));
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.has.js
  var require_es6_reflect_has = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.has.js"() {
      var $export = require_export();
      $export($export.S, "Reflect", {
        has: function has(target, propertyKey) {
          return propertyKey in target;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.is-extensible.js
  var require_es6_reflect_is_extensible = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.is-extensible.js"() {
      var $export = require_export();
      var anObject = require_an_object();
      var $isExtensible = Object.isExtensible;
      $export($export.S, "Reflect", {
        isExtensible: function isExtensible(target) {
          anObject(target);
          return $isExtensible ? $isExtensible(target) : true;
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/_own-keys.js
  var require_own_keys = __commonJS({
    "../../node_modules/core-js/modules/_own-keys.js"(exports, module) {
      var gOPN = require_object_gopn();
      var gOPS = require_object_gops();
      var anObject = require_an_object();
      var Reflect2 = require_global().Reflect;
      module.exports = Reflect2 && Reflect2.ownKeys || function ownKeys(it) {
        var keys2 = gOPN.f(anObject(it));
        var getSymbols = gOPS.f;
        return getSymbols ? keys2.concat(getSymbols(it)) : keys2;
      };
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.own-keys.js
  var require_es6_reflect_own_keys = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.own-keys.js"() {
      var $export = require_export();
      $export($export.S, "Reflect", { ownKeys: require_own_keys() });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.prevent-extensions.js
  var require_es6_reflect_prevent_extensions = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.prevent-extensions.js"() {
      var $export = require_export();
      var anObject = require_an_object();
      var $preventExtensions = Object.preventExtensions;
      $export($export.S, "Reflect", {
        preventExtensions: function preventExtensions(target) {
          anObject(target);
          try {
            if ($preventExtensions)
              $preventExtensions(target);
            return true;
          } catch (e) {
            return false;
          }
        }
      });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.set.js
  var require_es6_reflect_set = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.set.js"() {
      var dP = require_object_dp();
      var gOPD = require_object_gopd();
      var getPrototypeOf = require_object_gpo();
      var has = require_has();
      var $export = require_export();
      var createDesc = require_property_desc();
      var anObject = require_an_object();
      var isObject5 = require_is_object();
      function set(target, propertyKey, V) {
        var receiver = arguments.length < 4 ? target : arguments[3];
        var ownDesc = gOPD.f(anObject(target), propertyKey);
        var existingDescriptor, proto;
        if (!ownDesc) {
          if (isObject5(proto = getPrototypeOf(target))) {
            return set(proto, propertyKey, V, receiver);
          }
          ownDesc = createDesc(0);
        }
        if (has(ownDesc, "value")) {
          if (ownDesc.writable === false || !isObject5(receiver))
            return false;
          if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false)
              return false;
            existingDescriptor.value = V;
            dP.f(receiver, propertyKey, existingDescriptor);
          } else
            dP.f(receiver, propertyKey, createDesc(0, V));
          return true;
        }
        return ownDesc.set === void 0 ? false : (ownDesc.set.call(receiver, V), true);
      }
      $export($export.S, "Reflect", { set });
    }
  });

  // ../../node_modules/core-js/modules/es6.reflect.set-prototype-of.js
  var require_es6_reflect_set_prototype_of = __commonJS({
    "../../node_modules/core-js/modules/es6.reflect.set-prototype-of.js"() {
      var $export = require_export();
      var setProto = require_set_proto();
      if (setProto)
        $export($export.S, "Reflect", {
          setPrototypeOf: function setPrototypeOf(target, proto) {
            setProto.check(target, proto);
            try {
              setProto.set(target, proto);
              return true;
            } catch (e) {
              return false;
            }
          }
        });
    }
  });

  // ../../node_modules/core-js/es6/index.js
  var require_es6 = __commonJS({
    "../../node_modules/core-js/es6/index.js"(exports, module) {
      require_es6_symbol();
      require_es6_object_create();
      require_es6_object_define_property();
      require_es6_object_define_properties();
      require_es6_object_get_own_property_descriptor();
      require_es6_object_get_prototype_of();
      require_es6_object_keys();
      require_es6_object_get_own_property_names();
      require_es6_object_freeze();
      require_es6_object_seal();
      require_es6_object_prevent_extensions();
      require_es6_object_is_frozen();
      require_es6_object_is_sealed();
      require_es6_object_is_extensible();
      require_es6_object_assign();
      require_es6_object_is();
      require_es6_object_set_prototype_of();
      require_es6_object_to_string();
      require_es6_function_bind();
      require_es6_function_name();
      require_es6_function_has_instance();
      require_es6_parse_int();
      require_es6_parse_float();
      require_es6_number_constructor();
      require_es6_number_to_fixed();
      require_es6_number_to_precision();
      require_es6_number_epsilon();
      require_es6_number_is_finite();
      require_es6_number_is_integer();
      require_es6_number_is_nan();
      require_es6_number_is_safe_integer();
      require_es6_number_max_safe_integer();
      require_es6_number_min_safe_integer();
      require_es6_number_parse_float();
      require_es6_number_parse_int();
      require_es6_math_acosh();
      require_es6_math_asinh();
      require_es6_math_atanh();
      require_es6_math_cbrt();
      require_es6_math_clz32();
      require_es6_math_cosh();
      require_es6_math_expm1();
      require_es6_math_fround();
      require_es6_math_hypot();
      require_es6_math_imul();
      require_es6_math_log10();
      require_es6_math_log1p();
      require_es6_math_log2();
      require_es6_math_sign();
      require_es6_math_sinh();
      require_es6_math_tanh();
      require_es6_math_trunc();
      require_es6_string_from_code_point();
      require_es6_string_raw();
      require_es6_string_trim();
      require_es6_string_iterator();
      require_es6_string_code_point_at();
      require_es6_string_ends_with();
      require_es6_string_includes();
      require_es6_string_repeat();
      require_es6_string_starts_with();
      require_es6_string_anchor();
      require_es6_string_big();
      require_es6_string_blink();
      require_es6_string_bold();
      require_es6_string_fixed();
      require_es6_string_fontcolor();
      require_es6_string_fontsize();
      require_es6_string_italics();
      require_es6_string_link();
      require_es6_string_small();
      require_es6_string_strike();
      require_es6_string_sub();
      require_es6_string_sup();
      require_es6_date_now();
      require_es6_date_to_json();
      require_es6_date_to_iso_string();
      require_es6_date_to_string();
      require_es6_date_to_primitive();
      require_es6_array_is_array();
      require_es6_array_from();
      require_es6_array_of();
      require_es6_array_join();
      require_es6_array_slice();
      require_es6_array_sort();
      require_es6_array_for_each();
      require_es6_array_map();
      require_es6_array_filter();
      require_es6_array_some();
      require_es6_array_every();
      require_es6_array_reduce();
      require_es6_array_reduce_right();
      require_es6_array_index_of();
      require_es6_array_last_index_of();
      require_es6_array_copy_within();
      require_es6_array_fill();
      require_es6_array_find();
      require_es6_array_find_index();
      require_es6_array_species();
      require_es6_array_iterator();
      require_es6_regexp_constructor();
      require_es6_regexp_exec();
      require_es6_regexp_to_string();
      require_es6_regexp_flags();
      require_es6_regexp_match();
      require_es6_regexp_replace();
      require_es6_regexp_search();
      require_es6_regexp_split();
      require_es6_promise();
      require_es6_map();
      require_es6_set();
      require_es6_weak_map();
      require_es6_weak_set();
      require_es6_typed_array_buffer();
      require_es6_typed_data_view();
      require_es6_typed_int8_array();
      require_es6_typed_uint8_array();
      require_es6_typed_uint8_clamped_array();
      require_es6_typed_int16_array();
      require_es6_typed_uint16_array();
      require_es6_typed_int32_array();
      require_es6_typed_uint32_array();
      require_es6_typed_float32_array();
      require_es6_typed_float64_array();
      require_es6_reflect_apply();
      require_es6_reflect_construct();
      require_es6_reflect_define_property();
      require_es6_reflect_delete_property();
      require_es6_reflect_enumerate();
      require_es6_reflect_get();
      require_es6_reflect_get_own_property_descriptor();
      require_es6_reflect_get_prototype_of();
      require_es6_reflect_has();
      require_es6_reflect_is_extensible();
      require_es6_reflect_own_keys();
      require_es6_reflect_prevent_extensions();
      require_es6_reflect_set();
      require_es6_reflect_set_prototype_of();
      module.exports = require_core();
    }
  });

  // ../../node_modules/core-js/modules/es7.array.includes.js
  var require_es7_array_includes = __commonJS({
    "../../node_modules/core-js/modules/es7.array.includes.js"() {
      "use strict";
      var $export = require_export();
      var $includes = require_array_includes()(true);
      $export($export.P, "Array", {
        includes: function includes(el) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      require_add_to_unscopables()("includes");
    }
  });

  // ../../node_modules/core-js/fn/array/includes.js
  var require_includes = __commonJS({
    "../../node_modules/core-js/fn/array/includes.js"(exports, module) {
      require_es7_array_includes();
      module.exports = require_core().Array.includes;
    }
  });

  // ../../node_modules/core-js/modules/_flatten-into-array.js
  var require_flatten_into_array = __commonJS({
    "../../node_modules/core-js/modules/_flatten-into-array.js"(exports, module) {
      "use strict";
      var isArray = require_is_array();
      var isObject5 = require_is_object();
      var toLength = require_to_length();
      var ctx = require_ctx();
      var IS_CONCAT_SPREADABLE = require_wks()("isConcatSpreadable");
      function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
        var element, spreadable;
        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
            spreadable = false;
            if (isObject5(element)) {
              spreadable = element[IS_CONCAT_SPREADABLE];
              spreadable = spreadable !== void 0 ? !!spreadable : isArray(element);
            }
            if (spreadable && depth > 0) {
              targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 9007199254740991)
                throw TypeError();
              target[targetIndex] = element;
            }
            targetIndex++;
          }
          sourceIndex++;
        }
        return targetIndex;
      }
      module.exports = flattenIntoArray;
    }
  });

  // ../../node_modules/core-js/modules/es7.array.flat-map.js
  var require_es7_array_flat_map = __commonJS({
    "../../node_modules/core-js/modules/es7.array.flat-map.js"() {
      "use strict";
      var $export = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var aFunction = require_a_function();
      var arraySpeciesCreate = require_array_species_create();
      $export($export.P, "Array", {
        flatMap: function flatMap(callbackfn) {
          var O = toObject(this);
          var sourceLen, A;
          aFunction(callbackfn);
          sourceLen = toLength(O.length);
          A = arraySpeciesCreate(O, 0);
          flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
          return A;
        }
      });
      require_add_to_unscopables()("flatMap");
    }
  });

  // ../../node_modules/core-js/fn/array/flat-map.js
  var require_flat_map = __commonJS({
    "../../node_modules/core-js/fn/array/flat-map.js"(exports, module) {
      require_es7_array_flat_map();
      module.exports = require_core().Array.flatMap;
    }
  });

  // ../../node_modules/core-js/modules/_string-pad.js
  var require_string_pad = __commonJS({
    "../../node_modules/core-js/modules/_string-pad.js"(exports, module) {
      var toLength = require_to_length();
      var repeat = require_string_repeat();
      var defined = require_defined();
      module.exports = function(that, maxLength, fillString, left) {
        var S = String(defined(that));
        var stringLength = S.length;
        var fillStr = fillString === void 0 ? " " : String(fillString);
        var intMaxLength = toLength(maxLength);
        if (intMaxLength <= stringLength || fillStr == "")
          return S;
        var fillLen = intMaxLength - stringLength;
        var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen)
          stringFiller = stringFiller.slice(0, fillLen);
        return left ? stringFiller + S : S + stringFiller;
      };
    }
  });

  // ../../node_modules/core-js/modules/es7.string.pad-start.js
  var require_es7_string_pad_start = __commonJS({
    "../../node_modules/core-js/modules/es7.string.pad-start.js"() {
      "use strict";
      var $export = require_export();
      var $pad = require_string_pad();
      var userAgent = require_user_agent();
      var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
      $export($export.P + $export.F * WEBKIT_BUG, "String", {
        padStart: function padStart(maxLength) {
          return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : void 0, true);
        }
      });
    }
  });

  // ../../node_modules/core-js/fn/string/pad-start.js
  var require_pad_start = __commonJS({
    "../../node_modules/core-js/fn/string/pad-start.js"(exports, module) {
      require_es7_string_pad_start();
      module.exports = require_core().String.padStart;
    }
  });

  // ../../node_modules/core-js/modules/es7.string.pad-end.js
  var require_es7_string_pad_end = __commonJS({
    "../../node_modules/core-js/modules/es7.string.pad-end.js"() {
      "use strict";
      var $export = require_export();
      var $pad = require_string_pad();
      var userAgent = require_user_agent();
      var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
      $export($export.P + $export.F * WEBKIT_BUG, "String", {
        padEnd: function padEnd(maxLength) {
          return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : void 0, false);
        }
      });
    }
  });

  // ../../node_modules/core-js/fn/string/pad-end.js
  var require_pad_end = __commonJS({
    "../../node_modules/core-js/fn/string/pad-end.js"(exports, module) {
      require_es7_string_pad_end();
      module.exports = require_core().String.padEnd;
    }
  });

  // ../../node_modules/core-js/modules/es7.string.trim-left.js
  var require_es7_string_trim_left = __commonJS({
    "../../node_modules/core-js/modules/es7.string.trim-left.js"() {
      "use strict";
      require_string_trim()("trimLeft", function($trim) {
        return function trimLeft() {
          return $trim(this, 1);
        };
      }, "trimStart");
    }
  });

  // ../../node_modules/core-js/fn/string/trim-start.js
  var require_trim_start = __commonJS({
    "../../node_modules/core-js/fn/string/trim-start.js"(exports, module) {
      require_es7_string_trim_left();
      module.exports = require_core().String.trimLeft;
    }
  });

  // ../../node_modules/core-js/modules/es7.string.trim-right.js
  var require_es7_string_trim_right = __commonJS({
    "../../node_modules/core-js/modules/es7.string.trim-right.js"() {
      "use strict";
      require_string_trim()("trimRight", function($trim) {
        return function trimRight() {
          return $trim(this, 2);
        };
      }, "trimEnd");
    }
  });

  // ../../node_modules/core-js/fn/string/trim-end.js
  var require_trim_end = __commonJS({
    "../../node_modules/core-js/fn/string/trim-end.js"(exports, module) {
      require_es7_string_trim_right();
      module.exports = require_core().String.trimRight;
    }
  });

  // ../../node_modules/core-js/modules/es7.symbol.async-iterator.js
  var require_es7_symbol_async_iterator = __commonJS({
    "../../node_modules/core-js/modules/es7.symbol.async-iterator.js"() {
      require_wks_define()("asyncIterator");
    }
  });

  // ../../node_modules/core-js/fn/symbol/async-iterator.js
  var require_async_iterator = __commonJS({
    "../../node_modules/core-js/fn/symbol/async-iterator.js"(exports, module) {
      require_es7_symbol_async_iterator();
      module.exports = require_wks_ext().f("asyncIterator");
    }
  });

  // ../../node_modules/core-js/modules/es7.object.get-own-property-descriptors.js
  var require_es7_object_get_own_property_descriptors = __commonJS({
    "../../node_modules/core-js/modules/es7.object.get-own-property-descriptors.js"() {
      var $export = require_export();
      var ownKeys = require_own_keys();
      var toIObject = require_to_iobject();
      var gOPD = require_object_gopd();
      var createProperty = require_create_property();
      $export($export.S, "Object", {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIObject(object);
          var getDesc = gOPD.f;
          var keys2 = ownKeys(O);
          var result = {};
          var i = 0;
          var key, desc;
          while (keys2.length > i) {
            desc = getDesc(O, key = keys2[i++]);
            if (desc !== void 0)
              createProperty(result, key, desc);
          }
          return result;
        }
      });
    }
  });

  // ../../node_modules/core-js/fn/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors = __commonJS({
    "../../node_modules/core-js/fn/object/get-own-property-descriptors.js"(exports, module) {
      require_es7_object_get_own_property_descriptors();
      module.exports = require_core().Object.getOwnPropertyDescriptors;
    }
  });

  // ../../node_modules/core-js/modules/_object-to-array.js
  var require_object_to_array = __commonJS({
    "../../node_modules/core-js/modules/_object-to-array.js"(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var getKeys = require_object_keys();
      var toIObject = require_to_iobject();
      var isEnum = require_object_pie().f;
      module.exports = function(isEntries) {
        return function(it) {
          var O = toIObject(it);
          var keys2 = getKeys(O);
          var length = keys2.length;
          var i = 0;
          var result = [];
          var key;
          while (length > i) {
            key = keys2[i++];
            if (!DESCRIPTORS || isEnum.call(O, key)) {
              result.push(isEntries ? [key, O[key]] : O[key]);
            }
          }
          return result;
        };
      };
    }
  });

  // ../../node_modules/core-js/modules/es7.object.values.js
  var require_es7_object_values = __commonJS({
    "../../node_modules/core-js/modules/es7.object.values.js"() {
      var $export = require_export();
      var $values = require_object_to_array()(false);
      $export($export.S, "Object", {
        values: function values(it) {
          return $values(it);
        }
      });
    }
  });

  // ../../node_modules/core-js/fn/object/values.js
  var require_values = __commonJS({
    "../../node_modules/core-js/fn/object/values.js"(exports, module) {
      require_es7_object_values();
      module.exports = require_core().Object.values;
    }
  });

  // ../../node_modules/core-js/modules/es7.object.entries.js
  var require_es7_object_entries = __commonJS({
    "../../node_modules/core-js/modules/es7.object.entries.js"() {
      var $export = require_export();
      var $entries = require_object_to_array()(true);
      $export($export.S, "Object", {
        entries: function entries(it) {
          return $entries(it);
        }
      });
    }
  });

  // ../../node_modules/core-js/fn/object/entries.js
  var require_entries = __commonJS({
    "../../node_modules/core-js/fn/object/entries.js"(exports, module) {
      require_es7_object_entries();
      module.exports = require_core().Object.entries;
    }
  });

  // ../../node_modules/core-js/modules/es7.promise.finally.js
  var require_es7_promise_finally = __commonJS({
    "../../node_modules/core-js/modules/es7.promise.finally.js"() {
      "use strict";
      var $export = require_export();
      var core = require_core();
      var global2 = require_global();
      var speciesConstructor = require_species_constructor();
      var promiseResolve = require_promise_resolve();
      $export($export.P + $export.R, "Promise", { "finally": function(onFinally) {
        var C = speciesConstructor(this, core.Promise || global2.Promise);
        var isFunction5 = typeof onFinally == "function";
        return this.then(isFunction5 ? function(x) {
          return promiseResolve(C, onFinally()).then(function() {
            return x;
          });
        } : onFinally, isFunction5 ? function(e) {
          return promiseResolve(C, onFinally()).then(function() {
            throw e;
          });
        } : onFinally);
      } });
    }
  });

  // ../../node_modules/core-js/fn/promise/finally.js
  var require_finally = __commonJS({
    "../../node_modules/core-js/fn/promise/finally.js"(exports, module) {
      "use strict";
      require_es6_promise();
      require_es7_promise_finally();
      module.exports = require_core().Promise["finally"];
    }
  });

  // ../../node_modules/core-js/modules/web.timers.js
  var require_web_timers = __commonJS({
    "../../node_modules/core-js/modules/web.timers.js"() {
      var global2 = require_global();
      var $export = require_export();
      var userAgent = require_user_agent();
      var slice = [].slice;
      var MSIE = /MSIE .\./.test(userAgent);
      var wrap2 = function(set) {
        return function(fn, time) {
          var boundArgs = arguments.length > 2;
          var args = boundArgs ? slice.call(arguments, 2) : false;
          return set(boundArgs ? function() {
            (typeof fn == "function" ? fn : Function(fn)).apply(this, args);
          } : fn, time);
        };
      };
      $export($export.G + $export.B + $export.F * MSIE, {
        setTimeout: wrap2(global2.setTimeout),
        setInterval: wrap2(global2.setInterval)
      });
    }
  });

  // ../../node_modules/core-js/modules/web.immediate.js
  var require_web_immediate = __commonJS({
    "../../node_modules/core-js/modules/web.immediate.js"() {
      var $export = require_export();
      var $task = require_task();
      $export($export.G + $export.B, {
        setImmediate: $task.set,
        clearImmediate: $task.clear
      });
    }
  });

  // ../../node_modules/core-js/modules/web.dom.iterable.js
  var require_web_dom_iterable = __commonJS({
    "../../node_modules/core-js/modules/web.dom.iterable.js"() {
      var $iterators = require_es6_array_iterator();
      var getKeys = require_object_keys();
      var redefine = require_redefine();
      var global2 = require_global();
      var hide = require_hide();
      var Iterators = require_iterators();
      var wks = require_wks();
      var ITERATOR = wks("iterator");
      var TO_STRING_TAG = wks("toStringTag");
      var ArrayValues = Iterators.Array;
      var DOMIterables = {
        CSSRuleList: true,
        CSSStyleDeclaration: false,
        CSSValueList: false,
        ClientRectList: false,
        DOMRectList: false,
        DOMStringList: false,
        DOMTokenList: true,
        DataTransferItemList: false,
        FileList: false,
        HTMLAllCollection: false,
        HTMLCollection: false,
        HTMLFormElement: false,
        HTMLSelectElement: false,
        MediaList: true,
        MimeTypeArray: false,
        NamedNodeMap: false,
        NodeList: true,
        PaintRequestList: false,
        Plugin: false,
        PluginArray: false,
        SVGLengthList: false,
        SVGNumberList: false,
        SVGPathSegList: false,
        SVGPointList: false,
        SVGStringList: false,
        SVGTransformList: false,
        SourceBufferList: false,
        StyleSheetList: true,
        TextTrackCueList: false,
        TextTrackList: false,
        TouchList: false
      };
      for (collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
        NAME = collections[i];
        explicit = DOMIterables[NAME];
        Collection = global2[NAME];
        proto = Collection && Collection.prototype;
        if (proto) {
          if (!proto[ITERATOR])
            hide(proto, ITERATOR, ArrayValues);
          if (!proto[TO_STRING_TAG])
            hide(proto, TO_STRING_TAG, NAME);
          Iterators[NAME] = ArrayValues;
          if (explicit) {
            for (key in $iterators)
              if (!proto[key])
                redefine(proto, key, $iterators[key], true);
          }
        }
      }
      var NAME;
      var explicit;
      var Collection;
      var proto;
      var key;
      var collections;
      var i;
    }
  });

  // ../../node_modules/core-js/web/index.js
  var require_web = __commonJS({
    "../../node_modules/core-js/web/index.js"(exports, module) {
      require_web_timers();
      require_web_immediate();
      require_web_dom_iterable();
      module.exports = require_core();
    }
  });

  // ../../node_modules/regenerator-runtime/runtime.js
  var require_runtime = __commonJS({
    "../../node_modules/regenerator-runtime/runtime.js"(exports, module) {
      var runtime = function(exports2) {
        "use strict";
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined2;
        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define2(obj, key, value) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }
        try {
          define2({}, "");
        } catch (err) {
          define2 = function(obj, key, value) {
            return obj[key] = value;
          };
        }
        function wrap2(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []);
          generator._invoke = makeInvokeMethod(innerFn, self2, context);
          return generator;
        }
        exports2.wrap = wrap2;
        function tryCatch(fn, obj, arg) {
          try {
            return { type: "normal", arg: fn.call(obj, arg) };
          } catch (err) {
            return { type: "throw", arg: err };
          }
        }
        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define2(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          IteratorPrototype = NativeIteratorPrototype;
        }
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = GeneratorFunctionPrototype;
        define2(Gp, "constructor", GeneratorFunctionPrototype);
        define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
        GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define2(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        exports2.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };
        exports2.mark = function(genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define2(genFun, toStringTagSymbol, "GeneratorFunction");
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };
        exports2.awrap = function(arg) {
          return { __await: arg };
        };
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;
              if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                return PromiseImpl.resolve(value.__await).then(function(value2) {
                  invoke("next", value2, resolve, reject);
                }, function(err) {
                  invoke("throw", err, resolve, reject);
                });
              }
              return PromiseImpl.resolve(value).then(function(unwrapped) {
                result.value = unwrapped;
                resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
          }
          var previousPromise;
          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
          this._invoke = enqueue;
        }
        defineIteratorMethods(AsyncIterator.prototype);
        define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        });
        exports2.AsyncIterator = AsyncIterator;
        exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0)
            PromiseImpl = Promise;
          var iter = new AsyncIterator(wrap2(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        };
        function makeInvokeMethod(innerFn, self2, context) {
          var state2 = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state2 === GenStateExecuting) {
              throw new Error("Generator is already running");
            }
            if (state2 === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }
              return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while (true) {
              var delegate = context.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if (context.method === "next") {
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state2 === GenStateSuspendedStart) {
                  state2 = GenStateCompleted;
                  throw context.arg;
                }
                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }
              state2 = GenStateExecuting;
              var record = tryCatch(innerFn, self2, context);
              if (record.type === "normal") {
                state2 = context.done ? GenStateCompleted : GenStateSuspendedYield;
                if (record.arg === ContinueSentinel) {
                  continue;
                }
                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state2 = GenStateCompleted;
                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];
          if (method === undefined2) {
            context.delegate = null;
            if (context.method === "throw") {
              if (delegate.iterator["return"]) {
                context.method = "return";
                context.arg = undefined2;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                  return ContinueSentinel;
                }
              }
              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
          }
          var record = tryCatch(method, delegate.iterator, context.arg);
          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }
          var info = record.arg;
          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined2;
            }
          } else {
            return info;
          }
          context.delegate = null;
          return ContinueSentinel;
        }
        defineIteratorMethods(Gp);
        define2(Gp, toStringTagSymbol, "Generator");
        define2(Gp, iteratorSymbol, function() {
          return this;
        });
        define2(Gp, "toString", function() {
          return "[object Generator]";
        });
        function pushTryEntry(locs) {
          var entry = { tryLoc: locs[0] };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{ tryLoc: "root" }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }
        exports2.keys = function(object) {
          var keys2 = [];
          for (var key in object) {
            keys2.push(key);
          }
          keys2.reverse();
          return function next() {
            while (keys2.length) {
              var key2 = keys2.pop();
              if (key2 in object) {
                next.value = key2;
                next.done = false;
                return next;
              }
            }
            next.done = true;
            return next;
          };
        };
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
              return iterable;
            }
            if (!isNaN(iterable.length)) {
              var i = -1, next = function next2() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next2.value = iterable[i];
                    next2.done = false;
                    return next2;
                  }
                }
                next2.value = undefined2;
                next2.done = true;
                return next2;
              };
              return next.next = next;
            }
          }
          return { next: doneResult };
        }
        exports2.values = values;
        function doneResult() {
          return { value: undefined2, done: true };
        }
        Context.prototype = {
          constructor: Context,
          reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = this._sent = undefined2;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined2;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
              for (var name in this) {
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined2;
                }
              }
            }
          },
          stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }
            return this.rval;
          },
          dispatchException: function(exception) {
            if (this.done) {
              throw exception;
            }
            var context = this;
            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;
              if (caught) {
                context.method = "next";
                context.arg = undefined2;
              }
              return !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;
              if (entry.tryLoc === "root") {
                return handle("end");
              }
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }
            return this.complete(record);
          },
          complete: function(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
            return ContinueSentinel;
          },
          finish: function(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName,
              nextLoc
            };
            if (this.method === "next") {
              this.arg = undefined2;
            }
            return ContinueSentinel;
          }
        };
        return exports2;
      }(typeof module === "object" ? module.exports : {});
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        if (typeof globalThis === "object") {
          globalThis.regeneratorRuntime = runtime;
        } else {
          Function("r", "regeneratorRuntime = r")(runtime);
        }
      }
    }
  });

  // ../../node_modules/@babel/polyfill/lib/noConflict.js
  var require_noConflict = __commonJS({
    "../../node_modules/@babel/polyfill/lib/noConflict.js"() {
      "use strict";
      require_es6();
      require_includes();
      require_flat_map();
      require_pad_start();
      require_pad_end();
      require_trim_start();
      require_trim_end();
      require_async_iterator();
      require_get_own_property_descriptors();
      require_values();
      require_entries();
      require_finally();
      require_web();
      require_runtime();
    }
  });

  // ../../node_modules/core-js/library/modules/_global.js
  var require_global2 = __commonJS({
    "../../node_modules/core-js/library/modules/_global.js"(exports, module) {
      var global2 = module.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      if (typeof __g == "number")
        __g = global2;
    }
  });

  // ../../node_modules/core-js/library/modules/_core.js
  var require_core2 = __commonJS({
    "../../node_modules/core-js/library/modules/_core.js"(exports, module) {
      var core = module.exports = { version: "2.6.12" };
      if (typeof __e == "number")
        __e = core;
    }
  });

  // ../../node_modules/core-js/library/modules/_a-function.js
  var require_a_function2 = __commonJS({
    "../../node_modules/core-js/library/modules/_a-function.js"(exports, module) {
      module.exports = function(it) {
        if (typeof it != "function")
          throw TypeError(it + " is not a function!");
        return it;
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_ctx.js
  var require_ctx2 = __commonJS({
    "../../node_modules/core-js/library/modules/_ctx.js"(exports, module) {
      var aFunction = require_a_function2();
      module.exports = function(fn, that, length) {
        aFunction(fn);
        if (that === void 0)
          return fn;
        switch (length) {
          case 1:
            return function(a2) {
              return fn.call(that, a2);
            };
          case 2:
            return function(a2, b2) {
              return fn.call(that, a2, b2);
            };
          case 3:
            return function(a2, b2, c2) {
              return fn.call(that, a2, b2, c2);
            };
        }
        return function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_is-object.js
  var require_is_object2 = __commonJS({
    "../../node_modules/core-js/library/modules/_is-object.js"(exports, module) {
      module.exports = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_an-object.js
  var require_an_object2 = __commonJS({
    "../../node_modules/core-js/library/modules/_an-object.js"(exports, module) {
      var isObject5 = require_is_object2();
      module.exports = function(it) {
        if (!isObject5(it))
          throw TypeError(it + " is not an object!");
        return it;
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_fails.js
  var require_fails2 = __commonJS({
    "../../node_modules/core-js/library/modules/_fails.js"(exports, module) {
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_descriptors.js
  var require_descriptors2 = __commonJS({
    "../../node_modules/core-js/library/modules/_descriptors.js"(exports, module) {
      module.exports = !require_fails2()(function() {
        return Object.defineProperty({}, "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    }
  });

  // ../../node_modules/core-js/library/modules/_dom-create.js
  var require_dom_create2 = __commonJS({
    "../../node_modules/core-js/library/modules/_dom-create.js"(exports, module) {
      var isObject5 = require_is_object2();
      var document2 = require_global2().document;
      var is = isObject5(document2) && isObject5(document2.createElement);
      module.exports = function(it) {
        return is ? document2.createElement(it) : {};
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_ie8-dom-define.js
  var require_ie8_dom_define2 = __commonJS({
    "../../node_modules/core-js/library/modules/_ie8-dom-define.js"(exports, module) {
      module.exports = !require_descriptors2() && !require_fails2()(function() {
        return Object.defineProperty(require_dom_create2()("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    }
  });

  // ../../node_modules/core-js/library/modules/_to-primitive.js
  var require_to_primitive2 = __commonJS({
    "../../node_modules/core-js/library/modules/_to-primitive.js"(exports, module) {
      var isObject5 = require_is_object2();
      module.exports = function(it, S) {
        if (!isObject5(it))
          return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == "function" && !isObject5(val = fn.call(it)))
          return val;
        if (typeof (fn = it.valueOf) == "function" && !isObject5(val = fn.call(it)))
          return val;
        if (!S && typeof (fn = it.toString) == "function" && !isObject5(val = fn.call(it)))
          return val;
        throw TypeError("Can't convert object to primitive value");
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_object-dp.js
  var require_object_dp2 = __commonJS({
    "../../node_modules/core-js/library/modules/_object-dp.js"(exports) {
      var anObject = require_an_object2();
      var IE8_DOM_DEFINE = require_ie8_dom_define2();
      var toPrimitive = require_to_primitive2();
      var dP = Object.defineProperty;
      exports.f = require_descriptors2() ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return dP(O, P, Attributes);
          } catch (e) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw TypeError("Accessors not supported!");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_property-desc.js
  var require_property_desc2 = __commonJS({
    "../../node_modules/core-js/library/modules/_property-desc.js"(exports, module) {
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_hide.js
  var require_hide2 = __commonJS({
    "../../node_modules/core-js/library/modules/_hide.js"(exports, module) {
      var dP = require_object_dp2();
      var createDesc = require_property_desc2();
      module.exports = require_descriptors2() ? function(object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_has.js
  var require_has2 = __commonJS({
    "../../node_modules/core-js/library/modules/_has.js"(exports, module) {
      var hasOwnProperty = {}.hasOwnProperty;
      module.exports = function(it, key) {
        return hasOwnProperty.call(it, key);
      };
    }
  });

  // ../../node_modules/core-js/library/modules/_export.js
  var require_export2 = __commonJS({
    "../../node_modules/core-js/library/modules/_export.js"(exports, module) {
      var global2 = require_global2();
      var core = require_core2();
      var ctx = require_ctx2();
      var hide = require_hide2();
      var has = require_has2();
      var PROTOTYPE = "prototype";
      var $export = function(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var IS_WRAP = type & $export.W;
        var exports2 = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports2[PROTOTYPE];
        var target = IS_GLOBAL ? global2 : IS_STATIC ? global2[name] : (global2[name] || {})[PROTOTYPE];
        var key, own, out;
        if (IS_GLOBAL)
          source = name;
        for (key in source) {
          own = !IS_FORCED && target && target[key] !== void 0;
          if (own && has(exports2, key))
            continue;
          out = own ? target[key] : source[key];
          exports2[key] = IS_GLOBAL && typeof target[key] != "function" ? source[key] : IS_BIND && own ? ctx(out, global2) : IS_WRAP && target[key] == out ? function(C) {
            var F = function(a2, b2, c2) {
              if (this instanceof C) {
                switch (arguments.length) {
                  case 0:
                    return new C();
                  case 1:
                    return new C(a2);
                  case 2:
                    return new C(a2, b2);
                }
                return new C(a2, b2, c2);
              }
              return C.apply(this, arguments);
            };
            F[PROTOTYPE] = C[PROTOTYPE];
            return F;
          }(out) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
          if (IS_PROTO) {
            (exports2.virtual || (exports2.virtual = {}))[key] = out;
            if (type & $export.R && expProto && !expProto[key])
              hide(expProto, key, out);
          }
        }
      };
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      $export.U = 64;
      $export.R = 128;
      module.exports = $export;
    }
  });

  // ../../node_modules/core-js/library/modules/es7.global.js
  var require_es7_global = __commonJS({
    "../../node_modules/core-js/library/modules/es7.global.js"() {
      var $export = require_export2();
      $export($export.G, { global: require_global2() });
    }
  });

  // ../../node_modules/core-js/library/fn/global.js
  var require_global3 = __commonJS({
    "../../node_modules/core-js/library/fn/global.js"(exports, module) {
      require_es7_global();
      module.exports = require_core2().global;
    }
  });

  // ../../node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../../node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement7(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement3(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape3(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape3("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement3(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement3(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext11(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef3(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext16(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState6(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef11(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect18(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback6(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo11(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement3(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement3(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement3(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement7.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement3.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition2(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children5 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children5;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext11;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef3;
          exports.isValidElement = isValidElement3;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition2;
          exports.unstable_act = act;
          exports.useCallback = useCallback6;
          exports.useContext = useContext16;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect18;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo11;
          exports.useReducer = useReducer;
          exports.useRef = useRef11;
          exports.useState = useState6;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/react/index.js
  var require_react = __commonJS({
    "../../node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../../node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../../node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../../node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../../node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React20 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React20.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc2) {
            doc2 = doc2 || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc2 === "undefined") {
              return null;
            }
            try {
              return doc2.activeElement || doc2.body;
            } catch (e) {
              return doc2.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React20.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style2 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b2, c2, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize3 = Interface[_propName];
                if (normalize3) {
                  this[_propName] = normalize3(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state2 = node._wrapperState;
            if (!state2 || !state2.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc2 = nativeEventTarget.ownerDocument;
              if (doc2) {
                win2 = doc2.defaultView || doc2.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win2 : getNodeFromInstance(from);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc2 = node.ownerDocument || document;
            var win2 = doc2 && doc2.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc2.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element = getActiveElement();
            while (element instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win2 = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win2.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win2 = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc2 = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc2)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names3 = [];
              attributeNames.forEach(function(name) {
                names3.push(name);
              });
              error("Extra attributes from the server: %s", names3);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement7(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement7(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              if (container2.documentElement) {
                container2.removeChild(container2.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node.type;
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list2 = fiber.dependencies;
              if (list2 !== null) {
                nextFiber = fiber.child;
                var dependency = list2.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list2.lanes = mergeLanes(list2.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect2 = effects[i];
                var callback = effect2.callback;
                if (callback !== null) {
                  effect2.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React20.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state2 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state2 === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state2 = node.memoizedState;
                if (state2 !== null) {
                  var dehydrated = state2.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state2, action) {
            return typeof action === "function" ? action(state2) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect2 = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect2.next = effect2;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect2.next = effect2;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect2;
                effect2.next = firstEffect;
                componentUpdateQueue.lastEffect = effect2;
              }
            }
            return effect2;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition2(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition2.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state2 = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state2, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component2));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode2, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode2, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state2 = node.memoizedState;
                if (state2 !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state2 = workInProgress2.memoizedState;
                if (state2 !== null) {
                  if (state2.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                if ((effect2.tag & flags) === flags) {
                  var destroy = effect2.destroy;
                  effect2.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect2 = effect2.next;
              } while (effect2 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                if ((effect2.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect2.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect2.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect2.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect2.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect2.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect2 = effect2.next;
              } while (effect2 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect2 = firstEffect;
                      do {
                        var _effect = effect2, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect2 = effect2.next;
                      } while (effect2 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(child, root2, committedLanes);
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition3 = ReactCurrentBatchConfig$3.transition;
                if (!transition3._updatedFibers) {
                  transition3._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition3._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c2, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode2) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode2;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode2) {
            return new FiberNode(tag, pendingProps, key, mode2);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode2;
            if (tag === ConcurrentRoot) {
              mode2 = ConcurrentMode;
              if (isStrictMode === true) {
                mode2 |= StrictLegacyMode;
                {
                  mode2 |= StrictEffectsMode;
                }
              }
            } else {
              mode2 = NoMode;
            }
            if (isDevToolsPresent) {
              mode2 |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode2);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= StrictLegacyMode;
                    if ((mode2 & ConcurrentMode) !== NoMode) {
                      mode2 |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode2);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode2, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode2, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode2, lanes) {
            var fiber = createFiber(HostText, content, null, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode2, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context;
            } else {
              container2.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root2.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container2 = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(initialChildren, callback, container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container2._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container2._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container2, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
          }
          function render(element, container2, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../../node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../../node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../../node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c2, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c2, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c2, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c2, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // ../../node_modules/lodash.mergewith/index.js
  var require_lodash = __commonJS({
    "../../node_modules/lodash.mergewith/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var asyncTag = "[object AsyncFunction]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var nullTag = "[object Null]";
      var objectTag = "[object Object]";
      var proxyTag = "[object Proxy]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var undefinedTag = "[object Undefined]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function overArg(func, transform2) {
        return function(arg) {
          return func(transform2(arg));
        };
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var Symbol2 = root.Symbol;
      var Uint8Array2 = root.Uint8Array;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      var objectCreate = Object.create;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var nativeMax = Math.max;
      var nativeNow = Date.now;
      var Map2 = getNative(root, "Map");
      var nativeCreate = getNative(Object, "create");
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject5(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function Stack2(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack2.prototype.clear = stackClear;
      Stack2.prototype["delete"] = stackDelete;
      Stack2.prototype.get = stackGet;
      Stack2.prototype.has = stackHas;
      Stack2.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var baseFor = createBaseFor();
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsNative(value) {
        if (!isObject5(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction5(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseKeysIn(object) {
        if (!isObject5(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack2());
          if (isObject5(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject5(objValue) || isFunction5(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index, object) {
        if (!isObject5(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform2) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform2(array);
          return apply(func, this, otherArgs);
        };
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setToString = shortOut(baseSetToString);
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction5(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      function isFunction5(value) {
        if (!isObject5(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject5(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      var mergeWith5 = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      function constant(value) {
        return function() {
          return value;
        };
      }
      function identity(value) {
        return value;
      }
      function stubFalse() {
        return false;
      }
      module.exports = mergeWith5;
    }
  });

  // ../../node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js
  var require_emotion_sheet_cjs_dev = __commonJS({
    "../../node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function sheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
          if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
          }
        }
      }
      function createStyleElement(options) {
        var tag = document.createElement("style");
        tag.setAttribute("data-emotion", options.key);
        if (options.nonce !== void 0) {
          tag.setAttribute("nonce", options.nonce);
        }
        tag.appendChild(document.createTextNode(""));
        tag.setAttribute("data-s", "");
        return tag;
      }
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
      exports.StyleSheet = StyleSheet;
    }
  });

  // ../../node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js
  var require_emotion_sheet_cjs = __commonJS({
    "../../node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_sheet_cjs_dev();
      }
    }
  });

  // ../../node_modules/stylis/dist/umd/stylis.js
  var require_stylis = __commonJS({
    "../../node_modules/stylis/dist/umd/stylis.js"(exports, module) {
      (function(e, r) {
        typeof exports === "object" && typeof module !== "undefined" ? r(exports) : typeof define === "function" && define.amd ? define(["exports"], r) : (e = e || self, r(e.stylis = {}));
      })(exports, function(e) {
        "use strict";
        var r = "-ms-";
        var a2 = "-moz-";
        var c2 = "-webkit-";
        var t2 = "comm";
        var n = "rule";
        var s = "decl";
        var i = "@page";
        var u = "@media";
        var o = "@import";
        var f = "@charset";
        var l = "@viewport";
        var h = "@supports";
        var p = "@document";
        var v = "@namespace";
        var b2 = "@keyframes";
        var d = "@font-face";
        var m = "@counter-style";
        var w = "@font-feature-values";
        var k = Math.abs;
        var $ = String.fromCharCode;
        var g = Object.assign;
        function x(e2, r2) {
          return (((r2 << 2 ^ O(e2, 0)) << 2 ^ O(e2, 1)) << 2 ^ O(e2, 2)) << 2 ^ O(e2, 3);
        }
        function E(e2) {
          return e2.trim();
        }
        function y(e2, r2) {
          return (e2 = r2.exec(e2)) ? e2[0] : e2;
        }
        function T(e2, r2, a3) {
          return e2.replace(r2, a3);
        }
        function A(e2, r2) {
          return e2.indexOf(r2);
        }
        function O(e2, r2) {
          return e2.charCodeAt(r2) | 0;
        }
        function C(e2, r2, a3) {
          return e2.slice(r2, a3);
        }
        function M(e2) {
          return e2.length;
        }
        function S(e2) {
          return e2.length;
        }
        function R(e2, r2) {
          return r2.push(e2), e2;
        }
        function z(e2, r2) {
          return e2.map(r2).join("");
        }
        e.line = 1;
        e.column = 1;
        e.length = 0;
        e.position = 0;
        e.character = 0;
        e.characters = "";
        function N(r2, a3, c3, t3, n2, s2, i2) {
          return { value: r2, root: a3, parent: c3, type: t3, props: n2, children: s2, line: e.line, column: e.column, length: i2, return: "" };
        }
        function P(e2, r2) {
          return g(N("", null, null, "", null, null, 0), e2, { length: -e2.length }, r2);
        }
        function j() {
          return e.character;
        }
        function U() {
          e.character = e.position > 0 ? O(e.characters, --e.position) : 0;
          if (e.column--, e.character === 10)
            e.column = 1, e.line--;
          return e.character;
        }
        function _() {
          e.character = e.position < e.length ? O(e.characters, e.position++) : 0;
          if (e.column++, e.character === 10)
            e.column = 1, e.line++;
          return e.character;
        }
        function F() {
          return O(e.characters, e.position);
        }
        function I() {
          return e.position;
        }
        function L(r2, a3) {
          return C(e.characters, r2, a3);
        }
        function D(e2) {
          switch (e2) {
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            case 59:
            case 123:
            case 125:
              return 4;
            case 58:
              return 3;
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }
        function K(r2) {
          return e.line = e.column = 1, e.length = M(e.characters = r2), e.position = 0, [];
        }
        function V(r2) {
          return e.characters = "", r2;
        }
        function W(r2) {
          return E(L(e.position - 1, Z(r2 === 91 ? r2 + 2 : r2 === 40 ? r2 + 1 : r2)));
        }
        function Y(e2) {
          return V(G(K(e2)));
        }
        function B(r2) {
          while (e.character = F())
            if (e.character < 33)
              _();
            else
              break;
          return D(r2) > 2 || D(e.character) > 3 ? "" : " ";
        }
        function G(r2) {
          while (_())
            switch (D(e.character)) {
              case 0:
                R(J(e.position - 1), r2);
                break;
              case 2:
                R(W(e.character), r2);
                break;
              default:
                R($(e.character), r2);
            }
          return r2;
        }
        function H(r2, a3) {
          while (--a3 && _())
            if (e.character < 48 || e.character > 102 || e.character > 57 && e.character < 65 || e.character > 70 && e.character < 97)
              break;
          return L(r2, I() + (a3 < 6 && F() == 32 && _() == 32));
        }
        function Z(r2) {
          while (_())
            switch (e.character) {
              case r2:
                return e.position;
              case 34:
              case 39:
                if (r2 !== 34 && r2 !== 39)
                  Z(e.character);
                break;
              case 40:
                if (r2 === 41)
                  Z(r2);
                break;
              case 92:
                _();
                break;
            }
          return e.position;
        }
        function q(r2, a3) {
          while (_())
            if (r2 + e.character === 47 + 10)
              break;
            else if (r2 + e.character === 42 + 42 && F() === 47)
              break;
          return "/*" + L(a3, e.position - 1) + "*" + $(r2 === 47 ? r2 : _());
        }
        function J(r2) {
          while (!D(F()))
            _();
          return L(r2, e.position);
        }
        function Q(e2) {
          return V(X("", null, null, null, [""], e2 = K(e2), 0, [0], e2));
        }
        function X(e2, r2, a3, c3, t3, n2, s2, i2, u2) {
          var o2 = 0;
          var f2 = 0;
          var l2 = s2;
          var h2 = 0;
          var p2 = 0;
          var v2 = 0;
          var b3 = 1;
          var d2 = 1;
          var m2 = 1;
          var w2 = 0;
          var k2 = "";
          var g2 = t3;
          var x2 = n2;
          var E2 = c3;
          var y2 = k2;
          while (d2)
            switch (v2 = w2, w2 = _()) {
              case 40:
                if (v2 != 108 && y2.charCodeAt(l2 - 1) == 58) {
                  if (A(y2 += T(W(w2), "&", "&\f"), "&\f") != -1)
                    m2 = -1;
                  break;
                }
              case 34:
              case 39:
              case 91:
                y2 += W(w2);
                break;
              case 9:
              case 10:
              case 13:
              case 32:
                y2 += B(v2);
                break;
              case 92:
                y2 += H(I() - 1, 7);
                continue;
              case 47:
                switch (F()) {
                  case 42:
                  case 47:
                    R(re(q(_(), I()), r2, a3), u2);
                    break;
                  default:
                    y2 += "/";
                }
                break;
              case 123 * b3:
                i2[o2++] = M(y2) * m2;
              case 125 * b3:
              case 59:
              case 0:
                switch (w2) {
                  case 0:
                  case 125:
                    d2 = 0;
                  case 59 + f2:
                    if (p2 > 0 && M(y2) - l2)
                      R(p2 > 32 ? ae(y2 + ";", c3, a3, l2 - 1) : ae(T(y2, " ", "") + ";", c3, a3, l2 - 2), u2);
                    break;
                  case 59:
                    y2 += ";";
                  default:
                    R(E2 = ee(y2, r2, a3, o2, f2, t3, i2, k2, g2 = [], x2 = [], l2), n2);
                    if (w2 === 123)
                      if (f2 === 0)
                        X(y2, r2, E2, E2, g2, n2, l2, i2, x2);
                      else
                        switch (h2) {
                          case 100:
                          case 109:
                          case 115:
                            X(e2, E2, E2, c3 && R(ee(e2, E2, E2, 0, 0, t3, i2, k2, t3, g2 = [], l2), x2), t3, x2, l2, i2, c3 ? g2 : x2);
                            break;
                          default:
                            X(y2, E2, E2, E2, [""], x2, 0, i2, x2);
                        }
                }
                o2 = f2 = p2 = 0, b3 = m2 = 1, k2 = y2 = "", l2 = s2;
                break;
              case 58:
                l2 = 1 + M(y2), p2 = v2;
              default:
                if (b3 < 1) {
                  if (w2 == 123)
                    --b3;
                  else if (w2 == 125 && b3++ == 0 && U() == 125)
                    continue;
                }
                switch (y2 += $(w2), w2 * b3) {
                  case 38:
                    m2 = f2 > 0 ? 1 : (y2 += "\f", -1);
                    break;
                  case 44:
                    i2[o2++] = (M(y2) - 1) * m2, m2 = 1;
                    break;
                  case 64:
                    if (F() === 45)
                      y2 += W(_());
                    h2 = F(), f2 = l2 = M(k2 = y2 += J(I())), w2++;
                    break;
                  case 45:
                    if (v2 === 45 && M(y2) == 2)
                      b3 = 0;
                }
            }
          return n2;
        }
        function ee(e2, r2, a3, c3, t3, s2, i2, u2, o2, f2, l2) {
          var h2 = t3 - 1;
          var p2 = t3 === 0 ? s2 : [""];
          var v2 = S(p2);
          for (var b3 = 0, d2 = 0, m2 = 0; b3 < c3; ++b3)
            for (var w2 = 0, $2 = C(e2, h2 + 1, h2 = k(d2 = i2[b3])), g2 = e2; w2 < v2; ++w2)
              if (g2 = E(d2 > 0 ? p2[w2] + " " + $2 : T($2, /&\f/g, p2[w2])))
                o2[m2++] = g2;
          return N(e2, r2, a3, t3 === 0 ? n : u2, o2, f2, l2);
        }
        function re(e2, r2, a3) {
          return N(e2, r2, a3, t2, $(j()), C(e2, 2, -2), 0);
        }
        function ae(e2, r2, a3, c3) {
          return N(e2, r2, a3, s, C(e2, 0, c3), C(e2, c3 + 1, -1), c3);
        }
        function ce(e2, t3) {
          switch (x(e2, t3)) {
            case 5103:
              return c2 + "print-" + e2 + e2;
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return c2 + e2 + e2;
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return c2 + e2 + a2 + e2 + r + e2 + e2;
            case 6828:
            case 4268:
              return c2 + e2 + r + e2 + e2;
            case 6165:
              return c2 + e2 + r + "flex-" + e2 + e2;
            case 5187:
              return c2 + e2 + T(e2, /(\w+).+(:[^]+)/, c2 + "box-$1$2" + r + "flex-$1$2") + e2;
            case 5443:
              return c2 + e2 + r + "flex-item-" + T(e2, /flex-|-self/, "") + e2;
            case 4675:
              return c2 + e2 + r + "flex-line-pack" + T(e2, /align-content|flex-|-self/, "") + e2;
            case 5548:
              return c2 + e2 + r + T(e2, "shrink", "negative") + e2;
            case 5292:
              return c2 + e2 + r + T(e2, "basis", "preferred-size") + e2;
            case 6060:
              return c2 + "box-" + T(e2, "-grow", "") + c2 + e2 + r + T(e2, "grow", "positive") + e2;
            case 4554:
              return c2 + T(e2, /([^-])(transform)/g, "$1" + c2 + "$2") + e2;
            case 6187:
              return T(T(T(e2, /(zoom-|grab)/, c2 + "$1"), /(image-set)/, c2 + "$1"), e2, "") + e2;
            case 5495:
            case 3959:
              return T(e2, /(image-set\([^]*)/, c2 + "$1$`$1");
            case 4968:
              return T(T(e2, /(.+:)(flex-)?(.*)/, c2 + "box-pack:$3" + r + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + c2 + e2 + e2;
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return T(e2, /(.+)-inline(.+)/, c2 + "$1$2") + e2;
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              if (M(e2) - 1 - t3 > 6)
                switch (O(e2, t3 + 1)) {
                  case 109:
                    if (O(e2, t3 + 4) !== 45)
                      break;
                  case 102:
                    return T(e2, /(.+:)(.+)-([^]+)/, "$1" + c2 + "$2-$3$1" + a2 + (O(e2, t3 + 3) == 108 ? "$3" : "$2-$3")) + e2;
                  case 115:
                    return ~A(e2, "stretch") ? ce(T(e2, "stretch", "fill-available"), t3) + e2 : e2;
                }
              break;
            case 4949:
              if (O(e2, t3 + 1) !== 115)
                break;
            case 6444:
              switch (O(e2, M(e2) - 3 - (~A(e2, "!important") && 10))) {
                case 107:
                  return T(e2, ":", ":" + c2) + e2;
                case 101:
                  return T(e2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + c2 + (O(e2, 14) === 45 ? "inline-" : "") + "box$3$1" + c2 + "$2$3$1" + r + "$2box$3") + e2;
              }
              break;
            case 5936:
              switch (O(e2, t3 + 11)) {
                case 114:
                  return c2 + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "tb") + e2;
                case 108:
                  return c2 + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "tb-rl") + e2;
                case 45:
                  return c2 + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "lr") + e2;
              }
              return c2 + e2 + r + e2 + e2;
          }
          return e2;
        }
        function te(e2, r2) {
          var a3 = "";
          var c3 = S(e2);
          for (var t3 = 0; t3 < c3; t3++)
            a3 += r2(e2[t3], t3, e2, r2) || "";
          return a3;
        }
        function ne(e2, r2, a3, c3) {
          switch (e2.type) {
            case o:
            case s:
              return e2.return = e2.return || e2.value;
            case t2:
              return "";
            case b2:
              return e2.return = e2.value + "{" + te(e2.children, c3) + "}";
            case n:
              e2.value = e2.props.join(",");
          }
          return M(a3 = te(e2.children, c3)) ? e2.return = e2.value + "{" + a3 + "}" : "";
        }
        function se(e2) {
          var r2 = S(e2);
          return function(a3, c3, t3, n2) {
            var s2 = "";
            for (var i2 = 0; i2 < r2; i2++)
              s2 += e2[i2](a3, c3, t3, n2) || "";
            return s2;
          };
        }
        function ie(e2) {
          return function(r2) {
            if (!r2.root) {
              if (r2 = r2.return)
                e2(r2);
            }
          };
        }
        function ue(e2, t3, i2, u2) {
          if (e2.length > -1) {
            if (!e2.return)
              switch (e2.type) {
                case s:
                  e2.return = ce(e2.value, e2.length);
                  break;
                case b2:
                  return te([P(e2, { value: T(e2.value, "@", "@" + c2) })], u2);
                case n:
                  if (e2.length)
                    return z(e2.props, function(t4) {
                      switch (y(t4, /(::plac\w+|:read-\w+)/)) {
                        case ":read-only":
                        case ":read-write":
                          return te([P(e2, { props: [T(t4, /:(read-\w+)/, ":" + a2 + "$1")] })], u2);
                        case "::placeholder":
                          return te([P(e2, { props: [T(t4, /:(plac\w+)/, ":" + c2 + "input-$1")] }), P(e2, { props: [T(t4, /:(plac\w+)/, ":" + a2 + "$1")] }), P(e2, { props: [T(t4, /:(plac\w+)/, r + "input-$1")] })], u2);
                      }
                      return "";
                    });
              }
          }
        }
        function oe(e2) {
          switch (e2.type) {
            case n:
              e2.props = e2.props.map(function(r2) {
                return z(Y(r2), function(r3, a3, c3) {
                  switch (O(r3, 0)) {
                    case 12:
                      return C(r3, 1, M(r3));
                    case 0:
                    case 40:
                    case 43:
                    case 62:
                    case 126:
                      return r3;
                    case 58:
                      if (c3[++a3] === "global")
                        c3[a3] = "", c3[++a3] = "\f" + C(c3[a3], a3 = 1, -1);
                    case 32:
                      return a3 === 1 ? "" : r3;
                    default:
                      switch (a3) {
                        case 0:
                          e2 = r3;
                          return S(c3) > 1 ? "" : r3;
                        case (a3 = S(c3) - 1):
                        case 2:
                          return a3 === 2 ? r3 + e2 + e2 : r3 + e2;
                        default:
                          return r3;
                      }
                  }
                });
              });
          }
        }
        e.CHARSET = f;
        e.COMMENT = t2;
        e.COUNTER_STYLE = m;
        e.DECLARATION = s;
        e.DOCUMENT = p;
        e.FONT_FACE = d;
        e.FONT_FEATURE_VALUES = w;
        e.IMPORT = o;
        e.KEYFRAMES = b2;
        e.MEDIA = u;
        e.MOZ = a2;
        e.MS = r;
        e.NAMESPACE = v;
        e.PAGE = i;
        e.RULESET = n;
        e.SUPPORTS = h;
        e.VIEWPORT = l;
        e.WEBKIT = c2;
        e.abs = k;
        e.alloc = K;
        e.append = R;
        e.assign = g;
        e.caret = I;
        e.char = j;
        e.charat = O;
        e.combine = z;
        e.comment = re;
        e.commenter = q;
        e.compile = Q;
        e.copy = P;
        e.dealloc = V;
        e.declaration = ae;
        e.delimit = W;
        e.delimiter = Z;
        e.escaping = H;
        e.from = $;
        e.hash = x;
        e.identifier = J;
        e.indexof = A;
        e.match = y;
        e.middleware = se;
        e.namespace = oe;
        e.next = _;
        e.node = N;
        e.parse = X;
        e.peek = F;
        e.prefix = ce;
        e.prefixer = ue;
        e.prev = U;
        e.replace = T;
        e.ruleset = ee;
        e.rulesheet = ie;
        e.serialize = te;
        e.sizeof = S;
        e.slice = L;
        e.stringify = ne;
        e.strlen = M;
        e.substr = C;
        e.token = D;
        e.tokenize = Y;
        e.tokenizer = G;
        e.trim = E;
        e.whitespace = B;
        Object.defineProperty(e, "__esModule", { value: true });
      });
    }
  });

  // ../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js
  var require_emotion_weak_memoize_cjs_dev = __commonJS({
    "../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
      exports.default = weakMemoize;
    }
  });

  // ../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js
  var require_emotion_weak_memoize_cjs = __commonJS({
    "../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_weak_memoize_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js
  var require_emotion_memoize_cjs_dev = __commonJS({
    "../../node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize3(fn) {
        var cache = /* @__PURE__ */ Object.create(null);
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize3;
    }
  });

  // ../../node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js
  var require_emotion_memoize_cjs = __commonJS({
    "../../node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_memoize_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js
  var require_emotion_cache_cjs_dev = __commonJS({
    "../../node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sheet = require_emotion_sheet_cjs();
      var stylis = require_stylis();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character = 0;
        while (true) {
          previous = character;
          character = stylis.peek();
          if (previous === 38 && character === 12) {
            points[index] = 1;
          }
          if (stylis.token(character)) {
            break;
          }
          stylis.next();
        }
        return stylis.slice(begin, stylis.position);
      };
      var toRules = function toRules2(parsed, points) {
        var index = -1;
        var character = 44;
        do {
          switch (stylis.token(character)) {
            case 0:
              if (character === 38 && stylis.peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(stylis.position - 1, points, index);
              break;
            case 2:
              parsed[index] += stylis.delimit(character);
              break;
            case 4:
              if (character === 44) {
                parsed[++index] = stylis.peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            default:
              parsed[index] += stylis.from(character);
          }
        } while (character = stylis.next());
        return parsed;
      };
      var getRules = function getRules2(value, points) {
        return stylis.dealloc(toRules(stylis.alloc(value), points));
      };
      var fixedElements = /* @__PURE__ */ new WeakMap();
      var compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      var removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      var isIgnoringComment = function isIgnoringComment2(element) {
        return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
      };
      var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
        return function(element, index, children) {
          if (element.type !== "rule" || cache.compat)
            return;
          var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = element.parent === children[0];
            var commentContainer = isNested ? children[0].children : children;
            for (var i = commentContainer.length - 1; i >= 0; i--) {
              var node = commentContainer[i];
              if (node.line < element.line) {
                break;
              }
              if (node.column < element.column) {
                if (isIgnoringComment(node)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      var isImportRule = function isImportRule2(element) {
        return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
      };
      var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
        for (var i = index - 1; i >= 0; i--) {
          if (!isImportRule(children[i])) {
            return true;
          }
        }
        return false;
      };
      var nullifyElement = function nullifyElement2(element) {
        element.type = "";
        element.value = "";
        element["return"] = "";
        element.children = "";
        element.props = "";
      };
      var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
        if (!isImportRule(element)) {
          return;
        }
        if (element.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element);
        } else if (isPrependedWithRegularRules(index, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element);
        }
      };
      var isBrowser2 = typeof document !== "undefined";
      var getServerStylisCache = isBrowser2 ? void 0 : weakMemoize__default["default"](function() {
        return memoize__default["default"](function() {
          var cache = {};
          return function(name) {
            return cache[name];
          };
        });
      });
      var defaultStylisPlugins = [stylis.prefixer];
      var createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (isBrowser2 && key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node) {
            var dataEmotionAttribute = node.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node);
            node.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container2;
        var nodesToHydrate = [];
        if (isBrowser2) {
          container2 = options.container || document.head;
          Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
            var attrib = node.getAttribute("data-emotion").split(" ");
            for (var i = 1; i < attrib.length; i++) {
              inserted[attrib[i]] = true;
            }
            nodesToHydrate.push(node);
          });
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache.compat;
            }
          }), incorrectImportAlarm);
        }
        if (isBrowser2) {
          var currentSheet;
          var finalizingPlugins = [stylis.stringify, true ? function(element) {
            if (!element.root) {
              if (element["return"]) {
                currentSheet.insert(element["return"]);
              } else if (element.value && element.type !== stylis.COMMENT) {
                currentSheet.insert(element.value + "{}");
              }
            }
          } : stylis.rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis$1 = function stylis$12(styles2) {
            return stylis.serialize(stylis.compile(styles2), serializer);
          };
          _insert = function insert(selector2, serialized, sheet2, shouldCache) {
            currentSheet = sheet2;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet2.insert(rule + serialized.map);
                }
              };
            }
            stylis$1(selector2 ? selector2 + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        } else {
          var _finalizingPlugins = [stylis.stringify];
          var _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
          var _stylis = function _stylis2(styles2) {
            return stylis.serialize(stylis.compile(styles2), _serializer);
          };
          var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
          var getRules2 = function getRules3(selector2, serialized) {
            var name = serialized.name;
            if (serverStylisCache[name] === void 0) {
              serverStylisCache[name] = _stylis(selector2 ? selector2 + "{" + serialized.styles + "}" : serialized.styles);
            }
            return serverStylisCache[name];
          };
          _insert = function _insert2(selector2, serialized, sheet2, shouldCache) {
            var name = serialized.name;
            var rules = getRules2(selector2, serialized);
            if (cache.compat === void 0) {
              if (shouldCache) {
                cache.inserted[name] = true;
              }
              if (serialized.map !== void 0) {
                return rules + serialized.map;
              }
              return rules;
            } else {
              if (shouldCache) {
                cache.inserted[name] = rules;
              } else {
                return rules;
              }
            }
          };
        }
        var cache = {
          key,
          sheet: new sheet.StyleSheet({
            key,
            container: container2,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
      exports.default = createCache;
    }
  });

  // ../../node_modules/@emotion/cache/dist/emotion-cache.cjs.js
  var require_emotion_cache_cjs = __commonJS({
    "../../node_modules/@emotion/cache/dist/emotion-cache.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_cache_cjs_dev();
      }
    }
  });

  // ../../node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "../../node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends() {
        module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends.apply(this, arguments);
      }
      module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // ../../node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "../../node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../../node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "../../node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys2.length; ++i) {
            var key = keys2[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // ../../node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js
  var require_emotion_react_isolated_hnrs_cjs_dev = __commonJS({
    "../../node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hoistNonReactStatics$1 = require_hoist_non_react_statics_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var hoistNonReactStatics__default = /* @__PURE__ */ _interopDefault(hoistNonReactStatics$1);
      var hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return hoistNonReactStatics__default["default"](targetComponent, sourceComponent);
      };
      exports.default = hoistNonReactStatics;
    }
  });

  // ../../node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js
  var require_emotion_utils_cjs_dev = __commonJS({
    "../../node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var isBrowser2 = typeof document !== "undefined";
      function getRegisteredStyles(registered, registeredStyles, classNames2) {
        var rawClassName = "";
        classNames2.split(" ").forEach(function(className) {
          if (registered[className] !== void 0) {
            registeredStyles.push(registered[className] + ";");
          } else {
            rawClassName += className + " ";
          }
        });
        return rawClassName;
      }
      var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
        var className = cache.key + "-" + serialized.name;
        if ((isStringTag === false || isBrowser2 === false && cache.compat !== void 0) && cache.registered[className] === void 0) {
          cache.registered[className] = serialized.styles;
        }
      };
      var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
        registerStyles(cache, serialized, isStringTag);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var stylesForSSR = "";
          var current = serialized;
          do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            if (!isBrowser2 && maybeStyles !== void 0) {
              stylesForSSR += maybeStyles;
            }
            current = current.next;
          } while (current !== void 0);
          if (!isBrowser2 && stylesForSSR.length !== 0) {
            return stylesForSSR;
          }
        }
      };
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.insertStyles = insertStyles;
      exports.registerStyles = registerStyles;
    }
  });

  // ../../node_modules/@emotion/utils/dist/emotion-utils.cjs.js
  var require_emotion_utils_cjs = __commonJS({
    "../../node_modules/@emotion/utils/dist/emotion-utils.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_utils_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js
  var require_emotion_hash_cjs_dev = __commonJS({
    "../../node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function murmur2(str) {
        var h = 0;
        var k, i = 0, len = str.length;
        for (; len >= 4; ++i, len -= 4) {
          k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
          k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
          k ^= k >>> 24;
          h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        }
        switch (len) {
          case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
          case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
          case 1:
            h ^= str.charCodeAt(i) & 255;
            h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        }
        h ^= h >>> 13;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        return ((h ^ h >>> 15) >>> 0).toString(36);
      }
      exports.default = murmur2;
    }
  });

  // ../../node_modules/@emotion/hash/dist/emotion-hash.cjs.js
  var require_emotion_hash_cjs = __commonJS({
    "../../node_modules/@emotion/hash/dist/emotion-hash.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_hash_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/serialize/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js
  var require_emotion_unitless_cjs_dev = __commonJS({
    "../../node_modules/@emotion/serialize/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      exports.default = unitlessKeys;
    }
  });

  // ../../node_modules/@emotion/serialize/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js
  var require_emotion_unitless_cjs = __commonJS({
    "../../node_modules/@emotion/serialize/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_unitless_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js
  var require_emotion_serialize_cjs_dev = __commonJS({
    "../../node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hashString = require_emotion_hash_cjs();
      var unitless = require_emotion_unitless_cjs();
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var hashString__default = /* @__PURE__ */ _interopDefault(hashString);
      var unitless__default = /* @__PURE__ */ _interopDefault(unitless);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      var hyphenateRegex = /[A-Z]|^ms/g;
      var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      var isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      var isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      var processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitless__default["default"][key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue2(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      var contentValuePattern;
      var contentValues;
      var oldProcessStyleValue;
      var msPattern;
      var hyphenPattern;
      var hyphenatedCache;
      var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      function handleInterpolation(mergedProps, registered, interpolation) {
        if (interpolation == null) {
          return "";
        }
        if (interpolation.__emotion_styles !== void 0) {
          if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
            throw new Error(noComponentSelectorMessage);
          }
          return interpolation;
        }
        switch (typeof interpolation) {
          case "boolean": {
            return "";
          }
          case "object": {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }
            if (interpolation.styles !== void 0) {
              var next = interpolation.next;
              if (next !== void 0) {
                while (next !== void 0) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }
              var styles2 = interpolation.styles + ";";
              if (interpolation.map !== void 0) {
                styles2 += interpolation.map;
              }
              return styles2;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
          }
          case "function": {
            if (mergedProps !== void 0) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result);
            } else if (true) {
              console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            }
            break;
          }
          case "string":
            if (true) {
              var matched = [];
              var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
              });
              if (matched.length) {
                console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
              }
            }
            break;
        }
        if (registered == null) {
          return interpolation;
        }
        var cached = registered[interpolation];
        return cached !== void 0 ? cached : interpolation;
      }
      function createStringFromObject(mergedProps, registered, obj) {
        var string = "";
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
          }
        } else {
          for (var _key in obj) {
            var value = obj[_key];
            if (typeof value !== "object") {
              if (registered != null && registered[value] !== void 0) {
                string += _key + "{" + registered[value] + "}";
              } else if (isProcessableValue(value)) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
              }
            } else {
              if (_key === "NO_COMPONENT_SELECTOR" && true) {
                throw new Error(noComponentSelectorMessage);
              }
              if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
                for (var _i = 0; _i < value.length; _i++) {
                  if (isProcessableValue(value[_i])) {
                    string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                  }
                }
              } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch (_key) {
                  case "animation":
                  case "animationName": {
                    string += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }
                  default: {
                    if (_key === "undefined") {
                      console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                    }
                    string += _key + "{" + interpolated + "}";
                  }
                }
              }
            }
          }
        }
        return string;
      }
      var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      var sourceMapPattern;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      var cursor;
      var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles2 = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles2 += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles2 += strings[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles2 += handleInterpolation(mergedProps, registered, args[i]);
          if (stringMode) {
            if (strings[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles2 += strings[i];
          }
        }
        var sourceMap;
        if (true) {
          styles2 = styles2.replace(sourceMapPattern, function(match2) {
            sourceMap = match2;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match;
        while ((match = labelPattern.exec(styles2)) !== null) {
          identifierName += "-" + match[1];
        }
        var name = hashString__default["default"](styles2) + identifierName;
        if (true) {
          return {
            name,
            styles: styles2,
            map: sourceMap,
            next: cursor,
            toString: function toString() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles: styles2,
          next: cursor
        };
      };
      exports.serializeStyles = serializeStyles;
    }
  });

  // ../../node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js
  var require_emotion_serialize_cjs = __commonJS({
    "../../node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_serialize_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.dev.js
  var require_emotion_use_insertion_effect_with_fallbacks_cjs_dev = __commonJS({
    "../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React20 = require_react();
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React20);
      var isBrowser2 = typeof document !== "undefined";
      var syncFallback = function syncFallback2(create) {
        return create();
      };
      var useInsertionEffect = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : false;
      var useInsertionEffectAlwaysWithSyncFallback = !isBrowser2 ? syncFallback : useInsertionEffect || syncFallback;
      var useInsertionEffectWithLayoutFallback = useInsertionEffect || React20.useLayoutEffect;
      exports.useInsertionEffectAlwaysWithSyncFallback = useInsertionEffectAlwaysWithSyncFallback;
      exports.useInsertionEffectWithLayoutFallback = useInsertionEffectWithLayoutFallback;
    }
  });

  // ../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.js
  var require_emotion_use_insertion_effect_with_fallbacks_cjs = __commonJS({
    "../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_use_insertion_effect_with_fallbacks_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/react/dist/emotion-element-b63ca7c6.cjs.dev.js
  var require_emotion_element_b63ca7c6_cjs_dev = __commonJS({
    "../../node_modules/@emotion/react/dist/emotion-element-b63ca7c6.cjs.dev.js"(exports) {
      "use strict";
      var React20 = require_react();
      var createCache = require_emotion_cache_cjs();
      var _extends = require_extends();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var _isolatedHnrs_dist_emotionReact_isolatedHnrs = require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var createCache__default = /* @__PURE__ */ _interopDefault(createCache);
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var isBrowser2 = typeof document !== "undefined";
      var hasOwnProperty = {}.hasOwnProperty;
      var EmotionCacheContext = /* @__PURE__ */ React20.createContext(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache__default["default"]({
        key: "css"
      }) : null);
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      var CacheProvider = EmotionCacheContext.Provider;
      var __unsafe_useEmotionCache = function useEmotionCache() {
        return React20.useContext(EmotionCacheContext);
      };
      exports.withEmotionCache = function withEmotionCache(func) {
        return /* @__PURE__ */ React20.forwardRef(function(props, ref) {
          var cache = React20.useContext(EmotionCacheContext);
          return func(props, cache, ref);
        });
      };
      if (!isBrowser2) {
        exports.withEmotionCache = function withEmotionCache(func) {
          return function(props) {
            var cache = React20.useContext(EmotionCacheContext);
            if (cache === null) {
              cache = createCache__default["default"]({
                key: "css"
              });
              return /* @__PURE__ */ React20.createElement(EmotionCacheContext.Provider, {
                value: cache
              }, func(props, cache));
            } else {
              return func(props, cache);
            }
          };
        };
      }
      var ThemeContext2 = /* @__PURE__ */ React20.createContext({});
      if (true) {
        ThemeContext2.displayName = "EmotionThemeContext";
      }
      var useTheme2 = function useTheme3() {
        return React20.useContext(ThemeContext2);
      };
      var getTheme2 = function getTheme3(outerTheme, theme2) {
        if (typeof theme2 === "function") {
          var mergedTheme = theme2(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme2 == null || typeof theme2 !== "object" || Array.isArray(theme2)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends({}, outerTheme, theme2);
      };
      var createCacheWithTheme = /* @__PURE__ */ weakMemoize__default["default"](function(outerTheme) {
        return weakMemoize__default["default"](function(theme2) {
          return getTheme2(outerTheme, theme2);
        });
      });
      var ThemeProvider2 = function ThemeProvider3(props) {
        var theme2 = React20.useContext(ThemeContext2);
        if (props.theme !== theme2) {
          theme2 = createCacheWithTheme(theme2)(props.theme);
        }
        return /* @__PURE__ */ React20.createElement(ThemeContext2.Provider, {
          value: theme2
        }, props.children);
      };
      function withTheme(Component2) {
        var componentName = Component2.displayName || Component2.name || "Component";
        var render = function render2(props, ref) {
          var theme2 = React20.useContext(ThemeContext2);
          return /* @__PURE__ */ React20.createElement(Component2, _extends({
            theme: theme2,
            ref
          }, props));
        };
        var WithTheme = /* @__PURE__ */ React20.forwardRef(render);
        WithTheme.displayName = "WithTheme(" + componentName + ")";
        return _isolatedHnrs_dist_emotionReact_isolatedHnrs["default"](WithTheme, Component2);
      }
      var getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line) {
        var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
        if (match)
          return getLastPart(match[1]);
        match = /^([A-Za-z0-9$.]+)@/.exec(line);
        if (match)
          return getLastPart(match[1]);
        return void 0;
      };
      var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      var sanitizeIdentifier = function sanitizeIdentifier2(identifier) {
        return identifier.replace(/\$/g, "-");
      };
      var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i = 0; i < lines.length; i++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      var createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        utils.registerStyles(cache, serialized, isStringTag);
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          return utils.insertStyles(cache, serialized, isStringTag);
        });
        if (!isBrowser2 && rules !== void 0) {
          var _ref2;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React20.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var Emotion = /* @__PURE__ */ exports.withEmotionCache(function(props, cache, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
          cssProp = cache.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serialize.serializeStyles(registeredStyles, void 0, React20.useContext(ThemeContext2));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serialize.serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React20.createElement(React20.Fragment, null, /* @__PURE__ */ React20.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React20.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      exports.CacheProvider = CacheProvider;
      exports.Emotion = Emotion;
      exports.ThemeContext = ThemeContext2;
      exports.ThemeProvider = ThemeProvider2;
      exports.__unsafe_useEmotionCache = __unsafe_useEmotionCache;
      exports.createEmotionProps = createEmotionProps;
      exports.hasOwnProperty = hasOwnProperty;
      exports.isBrowser = isBrowser2;
      exports.useTheme = useTheme2;
      exports.withTheme = withTheme;
    }
  });

  // ../../node_modules/@emotion/react/dist/emotion-react.cjs.dev.js
  var require_emotion_react_cjs_dev = __commonJS({
    "../../node_modules/@emotion/react/dist/emotion-react.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React20 = require_react();
      require_emotion_cache_cjs();
      var emotionElement = require_emotion_element_b63ca7c6_cjs_dev();
      require_extends();
      require_emotion_weak_memoize_cjs();
      require_hoist_non_react_statics_cjs();
      require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      var pkg = {
        name: "@emotion/react",
        version: "11.10.4",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": "./macro.js"
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.js",
          "macro.d.ts",
          "macro.js.flow"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.10.0",
          "@emotion/cache": "^11.10.0",
          "@emotion/serialize": "^1.1.0",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
          "@emotion/utils": "^1.2.0",
          "@emotion/weak-memoize": "^0.3.0",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          "@babel/core": "^7.0.0",
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@babel/core": {
            optional: true
          },
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@babel/core": "^7.18.5",
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.10.0",
          "@emotion/css-prettifier": "1.1.0",
          "@emotion/server": "11.10.0",
          "@emotion/styled": "11.10.4",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": "./macro.js"
            }
          }
        }
      };
      var jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !emotionElement.hasOwnProperty.call(props, "css")) {
          return React20.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = emotionElement.Emotion;
        createElementArgArray[1] = emotionElement.createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React20.createElement.apply(null, createElementArgArray);
      };
      var warnedAboutCssPropForGlobal = false;
      var Global3 = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
        if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles2 = props.styles;
        var serialized = serialize.serializeStyles([styles2], void 0, React20.useContext(emotionElement.ThemeContext));
        if (!emotionElement.isBrowser) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            serializedStyles += next.styles;
            next = next.next;
          }
          var shouldCache = cache.compat === true;
          var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React20.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache.sheet.nonce, _ref));
        }
        var sheetRef = React20.useRef();
        useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node !== null) {
            rehydrating = true;
            node.setAttribute("data-emotion", key);
            sheet.hydrate([node]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            utils.insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      if (true) {
        Global3.displayName = "EmotionGlobal";
      }
      function css2() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return serialize.serializeStyles(args);
      }
      var keyframes4 = function keyframes5() {
        var insertable = css2.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      var classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      function merge2(registered, css3, className) {
        var registeredStyles = [];
        var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
        if (registeredStyles.length < 2) {
          return className;
        }
        return rawClassName + css3(registeredStyles);
      }
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          var rules2 = "";
          for (var i = 0; i < serializedArr.length; i++) {
            var res = utils.insertStyles(cache, serializedArr[i], false);
            if (!emotionElement.isBrowser && res !== void 0) {
              rules2 += res;
            }
          }
          if (!emotionElement.isBrowser) {
            return rules2;
          }
        });
        if (!emotionElement.isBrowser && rules.length !== 0) {
          var _ref2;
          return /* @__PURE__ */ React20.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
            return serialized.name;
          }).join(" "), _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var ClassNames = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css3 = function css4() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serialize.serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          utils.registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx4 = function cx5() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge2(cache.registered, css3, classnames(args));
        };
        var content = {
          css: css3,
          cx: cx4,
          theme: React20.useContext(emotionElement.ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React20.createElement(React20.Fragment, null, /* @__PURE__ */ React20.createElement(Insertion, {
          cache,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser2 = typeof document !== "undefined";
        isJest = typeof jest !== "undefined";
        if (isBrowser2 && !isJest) {
          globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser2 ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
      var isBrowser2;
      var isJest;
      var globalContext;
      var globalKey;
      exports.CacheProvider = emotionElement.CacheProvider;
      exports.ThemeContext = emotionElement.ThemeContext;
      exports.ThemeProvider = emotionElement.ThemeProvider;
      exports.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache;
      exports.useTheme = emotionElement.useTheme;
      Object.defineProperty(exports, "withEmotionCache", {
        enumerable: true,
        get: function() {
          return emotionElement.withEmotionCache;
        }
      });
      exports.withTheme = emotionElement.withTheme;
      exports.ClassNames = ClassNames;
      exports.Global = Global3;
      exports.createElement = jsx;
      exports.css = css2;
      exports.jsx = jsx;
      exports.keyframes = keyframes4;
    }
  });

  // ../../node_modules/@emotion/react/dist/emotion-react.cjs.js
  var require_emotion_react_cjs = __commonJS({
    "../../node_modules/@emotion/react/dist/emotion-react.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_react_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js
  var require_emotion_is_prop_valid_cjs_dev = __commonJS({
    "../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var isPropValid = /* @__PURE__ */ memoize__default["default"](function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      });
      exports.default = isPropValid;
    }
  });

  // ../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js
  var require_emotion_is_prop_valid_cjs = __commonJS({
    "../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_is_prop_valid_cjs_dev();
      }
    }
  });

  // ../../node_modules/@emotion/styled/base/dist/emotion-styled-base.cjs.dev.js
  var require_emotion_styled_base_cjs_dev = __commonJS({
    "../../node_modules/@emotion/styled/base/dist/emotion-styled-base.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _extends = require_extends();
      var React20 = require_react();
      var isPropValid = require_emotion_is_prop_valid_cjs();
      var react = require_emotion_react_cjs();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var isPropValid__default = /* @__PURE__ */ _interopDefault(isPropValid);
      var testOmitPropsOnStringTag = isPropValid__default["default"];
      var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var isBrowser2 = typeof document !== "undefined";
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        utils.registerStyles(cache, serialized, isStringTag);
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          return utils.insertStyles(cache, serialized, isStringTag);
        });
        if (!isBrowser2 && rules !== void 0) {
          var _ref2;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React20.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var createStyled = function createStyled2(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles2.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles2.push.apply(styles2, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles2.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              if (args[0][i] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
              }
              styles2.push(args[i], args[0][i]);
            }
          }
          var Styled = react.withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React20.useContext(react.ThemeContext);
            }
            if (typeof props.className === "string") {
              className = utils.getRegisteredStyles(cache.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serialize.serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as")
                continue;
              if (finalShouldForwardProp(_key)) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React20.createElement(React20.Fragment, null, /* @__PURE__ */ React20.createElement(Insertion, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React20.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles2;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled2(nextTag, _extends({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles2);
          };
          return Styled;
        };
      };
      exports.default = createStyled;
    }
  });

  // ../../node_modules/@emotion/styled/dist/emotion-styled.cjs.dev.js
  var require_emotion_styled_cjs_dev = __commonJS({
    "../../node_modules/@emotion/styled/dist/emotion-styled.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      require_extends();
      require_react();
      require_emotion_is_prop_valid_cjs();
      var base_dist_emotionStyledBase = require_emotion_styled_base_cjs_dev();
      require_emotion_react_cjs();
      require_emotion_utils_cjs();
      require_emotion_serialize_cjs();
      require_emotion_use_insertion_effect_with_fallbacks_cjs();
      var tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      var newStyled = base_dist_emotionStyledBase["default"].bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
      exports.default = newStyled;
    }
  });

  // ../../node_modules/@emotion/styled/dist/emotion-styled.cjs.js
  var require_emotion_styled_cjs = __commonJS({
    "../../node_modules/@emotion/styled/dist/emotion-styled.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_styled_cjs_dev();
      }
    }
  });

  // ../../node_modules/react-fast-compare/index.js
  var require_react_fast_compare = __commonJS({
    "../../node_modules/react-fast-compare/index.js"(exports, module) {
      var hasElementType = typeof Element !== "undefined";
      var hasMap = typeof Map === "function";
      var hasSet = typeof Set === "function";
      var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
      function equal(a2, b2) {
        if (a2 === b2)
          return true;
        if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
          if (a2.constructor !== b2.constructor)
            return false;
          var length, i, keys2;
          if (Array.isArray(a2)) {
            length = a2.length;
            if (length != b2.length)
              return false;
            for (i = length; i-- !== 0; )
              if (!equal(a2[i], b2[i]))
                return false;
            return true;
          }
          var it;
          if (hasMap && a2 instanceof Map && b2 instanceof Map) {
            if (a2.size !== b2.size)
              return false;
            it = a2.entries();
            while (!(i = it.next()).done)
              if (!b2.has(i.value[0]))
                return false;
            it = a2.entries();
            while (!(i = it.next()).done)
              if (!equal(i.value[1], b2.get(i.value[0])))
                return false;
            return true;
          }
          if (hasSet && a2 instanceof Set && b2 instanceof Set) {
            if (a2.size !== b2.size)
              return false;
            it = a2.entries();
            while (!(i = it.next()).done)
              if (!b2.has(i.value[0]))
                return false;
            return true;
          }
          if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
            length = a2.length;
            if (length != b2.length)
              return false;
            for (i = length; i-- !== 0; )
              if (a2[i] !== b2[i])
                return false;
            return true;
          }
          if (a2.constructor === RegExp)
            return a2.source === b2.source && a2.flags === b2.flags;
          if (a2.valueOf !== Object.prototype.valueOf)
            return a2.valueOf() === b2.valueOf();
          if (a2.toString !== Object.prototype.toString)
            return a2.toString() === b2.toString();
          keys2 = Object.keys(a2);
          length = keys2.length;
          if (length !== Object.keys(b2).length)
            return false;
          for (i = length; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b2, keys2[i]))
              return false;
          if (hasElementType && a2 instanceof Element)
            return false;
          for (i = length; i-- !== 0; ) {
            if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a2.$$typeof) {
              continue;
            }
            if (!equal(a2[keys2[i]], b2[keys2[i]]))
              return false;
          }
          return true;
        }
        return a2 !== a2 && b2 !== b2;
      }
      module.exports = function isEqual2(a2, b2) {
        try {
          return equal(a2, b2);
        } catch (error) {
          if ((error.message || "").match(/stack|recursion/i)) {
            console.warn("react-fast-compare cannot handle circular refs");
            return false;
          }
          throw error;
        }
      };
    }
  });

  // ../../node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "../../node_modules/tslib/tslib.js"(exports, module) {
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __classPrivateFieldIn2;
      var __createBinding2;
      (function(factory2) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory2(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory2(createExporter(root, createExporter(module.exports)));
        } else {
          factory2(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b2) {
          d.__proto__ = b2;
        } || function(d, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d[p] = b2[p];
        };
        __extends2 = function(d, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d, b2);
          function __() {
            this.constructor = d;
          }
          d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign2 = Object.assign || function(t2) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t2[p] = s[p];
          }
          return t2;
        };
        __rest2 = function(s, e) {
          var t2 = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t2[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t2[p[i]] = s[p[i]];
            }
          return t2;
        };
        __decorate2 = function(decorators, target, key, desc) {
          var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c2 < 3 ? d(r) : c2 > 3 ? d(target, key, r) : d(target, key)) || r;
          return c2 > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t2[0] & 1)
              throw t2[1];
            return t2[1];
          }, trys: [], ops: [] }, f, y, t2, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
                  return t2;
                if (y = 0, t2)
                  op = [op[0] & 2, t2.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t2 = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t2[1]) {
                      _.label = t2[1];
                      t2 = op;
                      break;
                    }
                    if (t2 && _.label < t2[2]) {
                      _.label = t2[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t2[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t2 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding2(o, m, p);
        };
        __createBinding2 = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m[k];
            } };
          }
          Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values2 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read2(arguments[i]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
              r[k] = a2[j];
          return r;
        };
        __spreadArray2 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await2 = function(v) {
          return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a2, b2) {
                  q.push([n, v, a2, b2]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues2 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet2 = function(receiver, state2, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, state2, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state2.set(receiver, value), value;
        };
        __classPrivateFieldIn2 = function(state2, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state2 === "function" ? receiver === state2 : state2.has(receiver);
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
      });
    }
  });

  // ../../node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "../../node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize3(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize3;
    }
  });

  // ../../node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "../../node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize3 = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index = memoize3(function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      });
      exports.default = index;
    }
  });

  // ../scrawl/dist/index.js
  var require_dist = __commonJS({
    "../scrawl/dist/index.js"(exports, module) {
      var __create3 = Object.create;
      var __defProp3 = Object.defineProperty;
      var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames3 = Object.getOwnPropertyNames;
      var __getProtoOf3 = Object.getPrototypeOf;
      var __hasOwnProp3 = Object.prototype.hasOwnProperty;
      var __markAsModule2 = (target) => __defProp3(target, "__esModule", { value: true });
      var __commonJS3 = (cb2, mod) => function __require() {
        return mod || (0, cb2[__getOwnPropNames3(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
      };
      var __export = (target, all) => {
        for (var name in all)
          __defProp3(target, name, { get: all[name], enumerable: true });
      };
      var __reExport2 = (target, module2, copyDefault, desc) => {
        if (module2 && typeof module2 === "object" || typeof module2 === "function") {
          for (let key of __getOwnPropNames3(module2))
            if (!__hasOwnProp3.call(target, key) && (copyDefault || key !== "default"))
              __defProp3(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc3(module2, key)) || desc.enumerable });
        }
        return target;
      };
      var __toESM3 = (module2, isNodeMode) => {
        return __reExport2(__markAsModule2(__defProp3(module2 != null ? __create3(__getProtoOf3(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
      };
      var __toCommonJS = /* @__PURE__ */ ((cache) => {
        return (module2, temp) => {
          return cache && cache.get(module2) || (temp = __reExport2(__markAsModule2({}), module2, 1), cache && cache.set(module2, temp), temp);
        };
      })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
      var require_freeGlobal = __commonJS3({
        "../../node_modules/lodash/_freeGlobal.js"(exports2, module2) {
          var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
          module2.exports = freeGlobal2;
        }
      });
      var require_root = __commonJS3({
        "../../node_modules/lodash/_root.js"(exports2, module2) {
          var freeGlobal2 = require_freeGlobal();
          var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
          var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
          module2.exports = root2;
        }
      });
      var require_Symbol = __commonJS3({
        "../../node_modules/lodash/_Symbol.js"(exports2, module2) {
          var root2 = require_root();
          var Symbol3 = root2.Symbol;
          module2.exports = Symbol3;
        }
      });
      var require_getRawTag = __commonJS3({
        "../../node_modules/lodash/_getRawTag.js"(exports2, module2) {
          var Symbol3 = require_Symbol();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          var nativeObjectToString3 = objectProto16.toString;
          var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
          function getRawTag2(value) {
            var isOwn = hasOwnProperty13.call(value, symToStringTag3), tag = value[symToStringTag3];
            try {
              value[symToStringTag3] = void 0;
              var unmasked = true;
            } catch (e2) {
            }
            var result = nativeObjectToString3.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag3] = tag;
              } else {
                delete value[symToStringTag3];
              }
            }
            return result;
          }
          module2.exports = getRawTag2;
        }
      });
      var require_objectToString = __commonJS3({
        "../../node_modules/lodash/_objectToString.js"(exports2, module2) {
          var objectProto16 = Object.prototype;
          var nativeObjectToString3 = objectProto16.toString;
          function objectToString2(value) {
            return nativeObjectToString3.call(value);
          }
          module2.exports = objectToString2;
        }
      });
      var require_baseGetTag = __commonJS3({
        "../../node_modules/lodash/_baseGetTag.js"(exports2, module2) {
          var Symbol3 = require_Symbol();
          var getRawTag2 = require_getRawTag();
          var objectToString2 = require_objectToString();
          var nullTag2 = "[object Null]";
          var undefinedTag2 = "[object Undefined]";
          var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
          function baseGetTag2(value) {
            if (value == null) {
              return value === void 0 ? undefinedTag2 : nullTag2;
            }
            return symToStringTag3 && symToStringTag3 in Object(value) ? getRawTag2(value) : objectToString2(value);
          }
          module2.exports = baseGetTag2;
        }
      });
      var require_isArray = __commonJS3({
        "../../node_modules/lodash/isArray.js"(exports2, module2) {
          var isArray2 = Array.isArray;
          module2.exports = isArray2;
        }
      });
      var require_isObjectLike = __commonJS3({
        "../../node_modules/lodash/isObjectLike.js"(exports2, module2) {
          function isObjectLike2(value) {
            return value != null && typeof value == "object";
          }
          module2.exports = isObjectLike2;
        }
      });
      var require_isString = __commonJS3({
        "../../node_modules/lodash/isString.js"(exports2, module2) {
          var baseGetTag2 = require_baseGetTag();
          var isArray2 = require_isArray();
          var isObjectLike2 = require_isObjectLike();
          var stringTag3 = "[object String]";
          function isString2(value) {
            return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag3;
          }
          module2.exports = isString2;
        }
      });
      var require_createBaseFor = __commonJS3({
        "../../node_modules/lodash/_createBaseFor.js"(exports2, module2) {
          function createBaseFor2(fromRight) {
            return function(object, iteratee, keysFunc) {
              var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          module2.exports = createBaseFor2;
        }
      });
      var require_baseFor = __commonJS3({
        "../../node_modules/lodash/_baseFor.js"(exports2, module2) {
          var createBaseFor2 = require_createBaseFor();
          var baseFor2 = createBaseFor2();
          module2.exports = baseFor2;
        }
      });
      var require_baseTimes = __commonJS3({
        "../../node_modules/lodash/_baseTimes.js"(exports2, module2) {
          function baseTimes2(n2, iteratee) {
            var index = -1, result = Array(n2);
            while (++index < n2) {
              result[index] = iteratee(index);
            }
            return result;
          }
          module2.exports = baseTimes2;
        }
      });
      var require_baseIsArguments = __commonJS3({
        "../../node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
          var baseGetTag2 = require_baseGetTag();
          var isObjectLike2 = require_isObjectLike();
          var argsTag4 = "[object Arguments]";
          function baseIsArguments2(value) {
            return isObjectLike2(value) && baseGetTag2(value) == argsTag4;
          }
          module2.exports = baseIsArguments2;
        }
      });
      var require_isArguments = __commonJS3({
        "../../node_modules/lodash/isArguments.js"(exports2, module2) {
          var baseIsArguments2 = require_baseIsArguments();
          var isObjectLike2 = require_isObjectLike();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          var propertyIsEnumerable3 = objectProto16.propertyIsEnumerable;
          var isArguments2 = baseIsArguments2(function() {
            return arguments;
          }()) ? baseIsArguments2 : function(value) {
            return isObjectLike2(value) && hasOwnProperty13.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
          };
          module2.exports = isArguments2;
        }
      });
      var require_stubFalse = __commonJS3({
        "../../node_modules/lodash/stubFalse.js"(exports2, module2) {
          function stubFalse2() {
            return false;
          }
          module2.exports = stubFalse2;
        }
      });
      var require_isBuffer = __commonJS3({
        "../../node_modules/lodash/isBuffer.js"(exports2, module2) {
          var root2 = require_root();
          var stubFalse2 = require_stubFalse();
          var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
          var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
          var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
          var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
          var nativeIsBuffer2 = Buffer4 ? Buffer4.isBuffer : void 0;
          var isBuffer2 = nativeIsBuffer2 || stubFalse2;
          module2.exports = isBuffer2;
        }
      });
      var require_isIndex = __commonJS3({
        "../../node_modules/lodash/_isIndex.js"(exports2, module2) {
          var MAX_SAFE_INTEGER3 = 9007199254740991;
          var reIsUint2 = /^(?:0|[1-9]\d*)$/;
          function isIndex2(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER3 : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          module2.exports = isIndex2;
        }
      });
      var require_isLength = __commonJS3({
        "../../node_modules/lodash/isLength.js"(exports2, module2) {
          var MAX_SAFE_INTEGER3 = 9007199254740991;
          function isLength2(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER3;
          }
          module2.exports = isLength2;
        }
      });
      var require_baseIsTypedArray = __commonJS3({
        "../../node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
          var baseGetTag2 = require_baseGetTag();
          var isLength2 = require_isLength();
          var isObjectLike2 = require_isObjectLike();
          var argsTag4 = "[object Arguments]";
          var arrayTag3 = "[object Array]";
          var boolTag3 = "[object Boolean]";
          var dateTag3 = "[object Date]";
          var errorTag3 = "[object Error]";
          var funcTag3 = "[object Function]";
          var mapTag4 = "[object Map]";
          var numberTag3 = "[object Number]";
          var objectTag5 = "[object Object]";
          var regexpTag3 = "[object RegExp]";
          var setTag4 = "[object Set]";
          var stringTag3 = "[object String]";
          var weakMapTag3 = "[object WeakMap]";
          var arrayBufferTag3 = "[object ArrayBuffer]";
          var dataViewTag4 = "[object DataView]";
          var float32Tag2 = "[object Float32Array]";
          var float64Tag2 = "[object Float64Array]";
          var int8Tag2 = "[object Int8Array]";
          var int16Tag2 = "[object Int16Array]";
          var int32Tag2 = "[object Int32Array]";
          var uint8Tag2 = "[object Uint8Array]";
          var uint8ClampedTag2 = "[object Uint8ClampedArray]";
          var uint16Tag2 = "[object Uint16Array]";
          var uint32Tag2 = "[object Uint32Array]";
          var typedArrayTags2 = {};
          typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
          typedArrayTags2[argsTag4] = typedArrayTags2[arrayTag3] = typedArrayTags2[arrayBufferTag3] = typedArrayTags2[boolTag3] = typedArrayTags2[dataViewTag4] = typedArrayTags2[dateTag3] = typedArrayTags2[errorTag3] = typedArrayTags2[funcTag3] = typedArrayTags2[mapTag4] = typedArrayTags2[numberTag3] = typedArrayTags2[objectTag5] = typedArrayTags2[regexpTag3] = typedArrayTags2[setTag4] = typedArrayTags2[stringTag3] = typedArrayTags2[weakMapTag3] = false;
          function baseIsTypedArray2(value) {
            return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
          }
          module2.exports = baseIsTypedArray2;
        }
      });
      var require_baseUnary = __commonJS3({
        "../../node_modules/lodash/_baseUnary.js"(exports2, module2) {
          function baseUnary2(func) {
            return function(value) {
              return func(value);
            };
          }
          module2.exports = baseUnary2;
        }
      });
      var require_nodeUtil = __commonJS3({
        "../../node_modules/lodash/_nodeUtil.js"(exports2, module2) {
          var freeGlobal2 = require_freeGlobal();
          var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
          var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
          var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
          var freeProcess2 = moduleExports4 && freeGlobal2.process;
          var nodeUtil2 = function() {
            try {
              var types2 = freeModule4 && freeModule4.require && freeModule4.require("util").types;
              if (types2) {
                return types2;
              }
              return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
            } catch (e2) {
            }
          }();
          module2.exports = nodeUtil2;
        }
      });
      var require_isTypedArray = __commonJS3({
        "../../node_modules/lodash/isTypedArray.js"(exports2, module2) {
          var baseIsTypedArray2 = require_baseIsTypedArray();
          var baseUnary2 = require_baseUnary();
          var nodeUtil2 = require_nodeUtil();
          var nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
          var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
          module2.exports = isTypedArray2;
        }
      });
      var require_arrayLikeKeys = __commonJS3({
        "../../node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
          var baseTimes2 = require_baseTimes();
          var isArguments2 = require_isArguments();
          var isArray2 = require_isArray();
          var isBuffer2 = require_isBuffer();
          var isIndex2 = require_isIndex();
          var isTypedArray2 = require_isTypedArray();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function arrayLikeKeys2(value, inherited) {
            var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes2(value.length, String) : [], length = result.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty13.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex2(key, length)))) {
                result.push(key);
              }
            }
            return result;
          }
          module2.exports = arrayLikeKeys2;
        }
      });
      var require_isPrototype = __commonJS3({
        "../../node_modules/lodash/_isPrototype.js"(exports2, module2) {
          var objectProto16 = Object.prototype;
          function isPrototype2(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto16;
            return value === proto;
          }
          module2.exports = isPrototype2;
        }
      });
      var require_overArg = __commonJS3({
        "../../node_modules/lodash/_overArg.js"(exports2, module2) {
          function overArg2(func, transform2) {
            return function(arg) {
              return func(transform2(arg));
            };
          }
          module2.exports = overArg2;
        }
      });
      var require_nativeKeys = __commonJS3({
        "../../node_modules/lodash/_nativeKeys.js"(exports2, module2) {
          var overArg2 = require_overArg();
          var nativeKeys2 = overArg2(Object.keys, Object);
          module2.exports = nativeKeys2;
        }
      });
      var require_baseKeys = __commonJS3({
        "../../node_modules/lodash/_baseKeys.js"(exports2, module2) {
          var isPrototype2 = require_isPrototype();
          var nativeKeys2 = require_nativeKeys();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function baseKeys2(object) {
            if (!isPrototype2(object)) {
              return nativeKeys2(object);
            }
            var result = [];
            for (var key in Object(object)) {
              if (hasOwnProperty13.call(object, key) && key != "constructor") {
                result.push(key);
              }
            }
            return result;
          }
          module2.exports = baseKeys2;
        }
      });
      var require_isObject = __commonJS3({
        "../../node_modules/lodash/isObject.js"(exports2, module2) {
          function isObject22(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          module2.exports = isObject22;
        }
      });
      var require_isFunction = __commonJS3({
        "../../node_modules/lodash/isFunction.js"(exports2, module2) {
          var baseGetTag2 = require_baseGetTag();
          var isObject22 = require_isObject();
          var asyncTag2 = "[object AsyncFunction]";
          var funcTag3 = "[object Function]";
          var genTag2 = "[object GeneratorFunction]";
          var proxyTag2 = "[object Proxy]";
          function isFunction22(value) {
            if (!isObject22(value)) {
              return false;
            }
            var tag = baseGetTag2(value);
            return tag == funcTag3 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
          }
          module2.exports = isFunction22;
        }
      });
      var require_isArrayLike = __commonJS3({
        "../../node_modules/lodash/isArrayLike.js"(exports2, module2) {
          var isFunction22 = require_isFunction();
          var isLength2 = require_isLength();
          function isArrayLike2(value) {
            return value != null && isLength2(value.length) && !isFunction22(value);
          }
          module2.exports = isArrayLike2;
        }
      });
      var require_keys = __commonJS3({
        "../../node_modules/lodash/keys.js"(exports2, module2) {
          var arrayLikeKeys2 = require_arrayLikeKeys();
          var baseKeys2 = require_baseKeys();
          var isArrayLike2 = require_isArrayLike();
          function keys22(object) {
            return isArrayLike2(object) ? arrayLikeKeys2(object) : baseKeys2(object);
          }
          module2.exports = keys22;
        }
      });
      var require_baseForOwn = __commonJS3({
        "../../node_modules/lodash/_baseForOwn.js"(exports2, module2) {
          var baseFor2 = require_baseFor();
          var keys22 = require_keys();
          function baseForOwn2(object, iteratee) {
            return object && baseFor2(object, iteratee, keys22);
          }
          module2.exports = baseForOwn2;
        }
      });
      var require_identity = __commonJS3({
        "../../node_modules/lodash/identity.js"(exports2, module2) {
          function identity2(value) {
            return value;
          }
          module2.exports = identity2;
        }
      });
      var require_castFunction = __commonJS3({
        "../../node_modules/lodash/_castFunction.js"(exports2, module2) {
          var identity2 = require_identity();
          function castFunction2(value) {
            return typeof value == "function" ? value : identity2;
          }
          module2.exports = castFunction2;
        }
      });
      var require_forOwn = __commonJS3({
        "../../node_modules/lodash/forOwn.js"(exports2, module2) {
          var baseForOwn2 = require_baseForOwn();
          var castFunction2 = require_castFunction();
          function forOwn(object, iteratee) {
            return object && baseForOwn2(object, castFunction2(iteratee));
          }
          module2.exports = forOwn;
        }
      });
      var require_getPrototype = __commonJS3({
        "../../node_modules/lodash/_getPrototype.js"(exports2, module2) {
          var overArg2 = require_overArg();
          var getPrototype2 = overArg2(Object.getPrototypeOf, Object);
          module2.exports = getPrototype2;
        }
      });
      var require_isPlainObject = __commonJS3({
        "../../node_modules/lodash/isPlainObject.js"(exports2, module2) {
          var baseGetTag2 = require_baseGetTag();
          var getPrototype2 = require_getPrototype();
          var isObjectLike2 = require_isObjectLike();
          var objectTag5 = "[object Object]";
          var funcProto4 = Function.prototype;
          var objectProto16 = Object.prototype;
          var funcToString4 = funcProto4.toString;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          var objectCtorString2 = funcToString4.call(Object);
          function isPlainObject2(value) {
            if (!isObjectLike2(value) || baseGetTag2(value) != objectTag5) {
              return false;
            }
            var proto = getPrototype2(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty13.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString4.call(Ctor) == objectCtorString2;
          }
          module2.exports = isPlainObject2;
        }
      });
      var require_arrayMap = __commonJS3({
        "../../node_modules/lodash/_arrayMap.js"(exports2, module2) {
          function arrayMap2(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length, result = Array(length);
            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }
          module2.exports = arrayMap2;
        }
      });
      var require_listCacheClear = __commonJS3({
        "../../node_modules/lodash/_listCacheClear.js"(exports2, module2) {
          function listCacheClear2() {
            this.__data__ = [];
            this.size = 0;
          }
          module2.exports = listCacheClear2;
        }
      });
      var require_eq = __commonJS3({
        "../../node_modules/lodash/eq.js"(exports2, module2) {
          function eq2(value, other) {
            return value === other || value !== value && other !== other;
          }
          module2.exports = eq2;
        }
      });
      var require_assocIndexOf = __commonJS3({
        "../../node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
          var eq2 = require_eq();
          function assocIndexOf2(array, key) {
            var length = array.length;
            while (length--) {
              if (eq2(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          module2.exports = assocIndexOf2;
        }
      });
      var require_listCacheDelete = __commonJS3({
        "../../node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
          var assocIndexOf2 = require_assocIndexOf();
          var arrayProto2 = Array.prototype;
          var splice2 = arrayProto2.splice;
          function listCacheDelete2(key) {
            var data = this.__data__, index = assocIndexOf2(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice2.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          module2.exports = listCacheDelete2;
        }
      });
      var require_listCacheGet = __commonJS3({
        "../../node_modules/lodash/_listCacheGet.js"(exports2, module2) {
          var assocIndexOf2 = require_assocIndexOf();
          function listCacheGet2(key) {
            var data = this.__data__, index = assocIndexOf2(data, key);
            return index < 0 ? void 0 : data[index][1];
          }
          module2.exports = listCacheGet2;
        }
      });
      var require_listCacheHas = __commonJS3({
        "../../node_modules/lodash/_listCacheHas.js"(exports2, module2) {
          var assocIndexOf2 = require_assocIndexOf();
          function listCacheHas2(key) {
            return assocIndexOf2(this.__data__, key) > -1;
          }
          module2.exports = listCacheHas2;
        }
      });
      var require_listCacheSet = __commonJS3({
        "../../node_modules/lodash/_listCacheSet.js"(exports2, module2) {
          var assocIndexOf2 = require_assocIndexOf();
          function listCacheSet2(key, value) {
            var data = this.__data__, index = assocIndexOf2(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          module2.exports = listCacheSet2;
        }
      });
      var require_ListCache = __commonJS3({
        "../../node_modules/lodash/_ListCache.js"(exports2, module2) {
          var listCacheClear2 = require_listCacheClear();
          var listCacheDelete2 = require_listCacheDelete();
          var listCacheGet2 = require_listCacheGet();
          var listCacheHas2 = require_listCacheHas();
          var listCacheSet2 = require_listCacheSet();
          function ListCache2(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          ListCache2.prototype.clear = listCacheClear2;
          ListCache2.prototype["delete"] = listCacheDelete2;
          ListCache2.prototype.get = listCacheGet2;
          ListCache2.prototype.has = listCacheHas2;
          ListCache2.prototype.set = listCacheSet2;
          module2.exports = ListCache2;
        }
      });
      var require_stackClear = __commonJS3({
        "../../node_modules/lodash/_stackClear.js"(exports2, module2) {
          var ListCache2 = require_ListCache();
          function stackClear2() {
            this.__data__ = new ListCache2();
            this.size = 0;
          }
          module2.exports = stackClear2;
        }
      });
      var require_stackDelete = __commonJS3({
        "../../node_modules/lodash/_stackDelete.js"(exports2, module2) {
          function stackDelete2(key) {
            var data = this.__data__, result = data["delete"](key);
            this.size = data.size;
            return result;
          }
          module2.exports = stackDelete2;
        }
      });
      var require_stackGet = __commonJS3({
        "../../node_modules/lodash/_stackGet.js"(exports2, module2) {
          function stackGet2(key) {
            return this.__data__.get(key);
          }
          module2.exports = stackGet2;
        }
      });
      var require_stackHas = __commonJS3({
        "../../node_modules/lodash/_stackHas.js"(exports2, module2) {
          function stackHas2(key) {
            return this.__data__.has(key);
          }
          module2.exports = stackHas2;
        }
      });
      var require_coreJsData = __commonJS3({
        "../../node_modules/lodash/_coreJsData.js"(exports2, module2) {
          var root2 = require_root();
          var coreJsData2 = root2["__core-js_shared__"];
          module2.exports = coreJsData2;
        }
      });
      var require_isMasked = __commonJS3({
        "../../node_modules/lodash/_isMasked.js"(exports2, module2) {
          var coreJsData2 = require_coreJsData();
          var maskSrcKey2 = function() {
            var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          function isMasked2(func) {
            return !!maskSrcKey2 && maskSrcKey2 in func;
          }
          module2.exports = isMasked2;
        }
      });
      var require_toSource = __commonJS3({
        "../../node_modules/lodash/_toSource.js"(exports2, module2) {
          var funcProto4 = Function.prototype;
          var funcToString4 = funcProto4.toString;
          function toSource2(func) {
            if (func != null) {
              try {
                return funcToString4.call(func);
              } catch (e2) {
              }
              try {
                return func + "";
              } catch (e2) {
              }
            }
            return "";
          }
          module2.exports = toSource2;
        }
      });
      var require_baseIsNative = __commonJS3({
        "../../node_modules/lodash/_baseIsNative.js"(exports2, module2) {
          var isFunction22 = require_isFunction();
          var isMasked2 = require_isMasked();
          var isObject22 = require_isObject();
          var toSource2 = require_toSource();
          var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
          var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
          var funcProto4 = Function.prototype;
          var objectProto16 = Object.prototype;
          var funcToString4 = funcProto4.toString;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          var reIsNative2 = RegExp("^" + funcToString4.call(hasOwnProperty13).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
          function baseIsNative2(value) {
            if (!isObject22(value) || isMasked2(value)) {
              return false;
            }
            var pattern = isFunction22(value) ? reIsNative2 : reIsHostCtor2;
            return pattern.test(toSource2(value));
          }
          module2.exports = baseIsNative2;
        }
      });
      var require_getValue = __commonJS3({
        "../../node_modules/lodash/_getValue.js"(exports2, module2) {
          function getValue2(object, key) {
            return object == null ? void 0 : object[key];
          }
          module2.exports = getValue2;
        }
      });
      var require_getNative = __commonJS3({
        "../../node_modules/lodash/_getNative.js"(exports2, module2) {
          var baseIsNative2 = require_baseIsNative();
          var getValue2 = require_getValue();
          function getNative2(object, key) {
            var value = getValue2(object, key);
            return baseIsNative2(value) ? value : void 0;
          }
          module2.exports = getNative2;
        }
      });
      var require_Map = __commonJS3({
        "../../node_modules/lodash/_Map.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var root2 = require_root();
          var Map3 = getNative2(root2, "Map");
          module2.exports = Map3;
        }
      });
      var require_nativeCreate = __commonJS3({
        "../../node_modules/lodash/_nativeCreate.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var nativeCreate2 = getNative2(Object, "create");
          module2.exports = nativeCreate2;
        }
      });
      var require_hashClear = __commonJS3({
        "../../node_modules/lodash/_hashClear.js"(exports2, module2) {
          var nativeCreate2 = require_nativeCreate();
          function hashClear2() {
            this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
            this.size = 0;
          }
          module2.exports = hashClear2;
        }
      });
      var require_hashDelete = __commonJS3({
        "../../node_modules/lodash/_hashDelete.js"(exports2, module2) {
          function hashDelete2(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
          }
          module2.exports = hashDelete2;
        }
      });
      var require_hashGet = __commonJS3({
        "../../node_modules/lodash/_hashGet.js"(exports2, module2) {
          var nativeCreate2 = require_nativeCreate();
          var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function hashGet2(key) {
            var data = this.__data__;
            if (nativeCreate2) {
              var result = data[key];
              return result === HASH_UNDEFINED4 ? void 0 : result;
            }
            return hasOwnProperty13.call(data, key) ? data[key] : void 0;
          }
          module2.exports = hashGet2;
        }
      });
      var require_hashHas = __commonJS3({
        "../../node_modules/lodash/_hashHas.js"(exports2, module2) {
          var nativeCreate2 = require_nativeCreate();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function hashHas2(key) {
            var data = this.__data__;
            return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty13.call(data, key);
          }
          module2.exports = hashHas2;
        }
      });
      var require_hashSet = __commonJS3({
        "../../node_modules/lodash/_hashSet.js"(exports2, module2) {
          var nativeCreate2 = require_nativeCreate();
          var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
          function hashSet2(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED4 : value;
            return this;
          }
          module2.exports = hashSet2;
        }
      });
      var require_Hash = __commonJS3({
        "../../node_modules/lodash/_Hash.js"(exports2, module2) {
          var hashClear2 = require_hashClear();
          var hashDelete2 = require_hashDelete();
          var hashGet2 = require_hashGet();
          var hashHas2 = require_hashHas();
          var hashSet2 = require_hashSet();
          function Hash2(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          Hash2.prototype.clear = hashClear2;
          Hash2.prototype["delete"] = hashDelete2;
          Hash2.prototype.get = hashGet2;
          Hash2.prototype.has = hashHas2;
          Hash2.prototype.set = hashSet2;
          module2.exports = Hash2;
        }
      });
      var require_mapCacheClear = __commonJS3({
        "../../node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
          var Hash2 = require_Hash();
          var ListCache2 = require_ListCache();
          var Map3 = require_Map();
          function mapCacheClear2() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash2(),
              "map": new (Map3 || ListCache2)(),
              "string": new Hash2()
            };
          }
          module2.exports = mapCacheClear2;
        }
      });
      var require_isKeyable = __commonJS3({
        "../../node_modules/lodash/_isKeyable.js"(exports2, module2) {
          function isKeyable2(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          module2.exports = isKeyable2;
        }
      });
      var require_getMapData = __commonJS3({
        "../../node_modules/lodash/_getMapData.js"(exports2, module2) {
          var isKeyable2 = require_isKeyable();
          function getMapData2(map2, key) {
            var data = map2.__data__;
            return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          module2.exports = getMapData2;
        }
      });
      var require_mapCacheDelete = __commonJS3({
        "../../node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
          var getMapData2 = require_getMapData();
          function mapCacheDelete2(key) {
            var result = getMapData2(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
          }
          module2.exports = mapCacheDelete2;
        }
      });
      var require_mapCacheGet = __commonJS3({
        "../../node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
          var getMapData2 = require_getMapData();
          function mapCacheGet2(key) {
            return getMapData2(this, key).get(key);
          }
          module2.exports = mapCacheGet2;
        }
      });
      var require_mapCacheHas = __commonJS3({
        "../../node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
          var getMapData2 = require_getMapData();
          function mapCacheHas2(key) {
            return getMapData2(this, key).has(key);
          }
          module2.exports = mapCacheHas2;
        }
      });
      var require_mapCacheSet = __commonJS3({
        "../../node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
          var getMapData2 = require_getMapData();
          function mapCacheSet2(key, value) {
            var data = getMapData2(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          module2.exports = mapCacheSet2;
        }
      });
      var require_MapCache = __commonJS3({
        "../../node_modules/lodash/_MapCache.js"(exports2, module2) {
          var mapCacheClear2 = require_mapCacheClear();
          var mapCacheDelete2 = require_mapCacheDelete();
          var mapCacheGet2 = require_mapCacheGet();
          var mapCacheHas2 = require_mapCacheHas();
          var mapCacheSet2 = require_mapCacheSet();
          function MapCache2(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          MapCache2.prototype.clear = mapCacheClear2;
          MapCache2.prototype["delete"] = mapCacheDelete2;
          MapCache2.prototype.get = mapCacheGet2;
          MapCache2.prototype.has = mapCacheHas2;
          MapCache2.prototype.set = mapCacheSet2;
          module2.exports = MapCache2;
        }
      });
      var require_stackSet = __commonJS3({
        "../../node_modules/lodash/_stackSet.js"(exports2, module2) {
          var ListCache2 = require_ListCache();
          var Map3 = require_Map();
          var MapCache2 = require_MapCache();
          var LARGE_ARRAY_SIZE2 = 200;
          function stackSet2(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache2) {
              var pairs = data.__data__;
              if (!Map3 || pairs.length < LARGE_ARRAY_SIZE2 - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache2(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          module2.exports = stackSet2;
        }
      });
      var require_Stack = __commonJS3({
        "../../node_modules/lodash/_Stack.js"(exports2, module2) {
          var ListCache2 = require_ListCache();
          var stackClear2 = require_stackClear();
          var stackDelete2 = require_stackDelete();
          var stackGet2 = require_stackGet();
          var stackHas2 = require_stackHas();
          var stackSet2 = require_stackSet();
          function Stack22(entries) {
            var data = this.__data__ = new ListCache2(entries);
            this.size = data.size;
          }
          Stack22.prototype.clear = stackClear2;
          Stack22.prototype["delete"] = stackDelete2;
          Stack22.prototype.get = stackGet2;
          Stack22.prototype.has = stackHas2;
          Stack22.prototype.set = stackSet2;
          module2.exports = Stack22;
        }
      });
      var require_setCacheAdd = __commonJS3({
        "../../node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
          var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
          function setCacheAdd2(value) {
            this.__data__.set(value, HASH_UNDEFINED4);
            return this;
          }
          module2.exports = setCacheAdd2;
        }
      });
      var require_setCacheHas = __commonJS3({
        "../../node_modules/lodash/_setCacheHas.js"(exports2, module2) {
          function setCacheHas2(value) {
            return this.__data__.has(value);
          }
          module2.exports = setCacheHas2;
        }
      });
      var require_SetCache = __commonJS3({
        "../../node_modules/lodash/_SetCache.js"(exports2, module2) {
          var MapCache2 = require_MapCache();
          var setCacheAdd2 = require_setCacheAdd();
          var setCacheHas2 = require_setCacheHas();
          function SetCache2(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache2();
            while (++index < length) {
              this.add(values[index]);
            }
          }
          SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
          SetCache2.prototype.has = setCacheHas2;
          module2.exports = SetCache2;
        }
      });
      var require_arraySome = __commonJS3({
        "../../node_modules/lodash/_arraySome.js"(exports2, module2) {
          function arraySome2(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }
          module2.exports = arraySome2;
        }
      });
      var require_cacheHas = __commonJS3({
        "../../node_modules/lodash/_cacheHas.js"(exports2, module2) {
          function cacheHas2(cache, key) {
            return cache.has(key);
          }
          module2.exports = cacheHas2;
        }
      });
      var require_equalArrays = __commonJS3({
        "../../node_modules/lodash/_equalArrays.js"(exports2, module2) {
          var SetCache2 = require_SetCache();
          var arraySome2 = require_arraySome();
          var cacheHas2 = require_cacheHas();
          var COMPARE_PARTIAL_FLAG7 = 1;
          var COMPARE_UNORDERED_FLAG5 = 2;
          function equalArrays2(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG5 ? new SetCache2() : void 0;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== void 0) {
                if (compared) {
                  continue;
                }
                result = false;
                break;
              }
              if (seen) {
                if (!arraySome2(other, function(othValue2, othIndex) {
                  if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result;
          }
          module2.exports = equalArrays2;
        }
      });
      var require_Uint8Array = __commonJS3({
        "../../node_modules/lodash/_Uint8Array.js"(exports2, module2) {
          var root2 = require_root();
          var Uint8Array3 = root2.Uint8Array;
          module2.exports = Uint8Array3;
        }
      });
      var require_mapToArray = __commonJS3({
        "../../node_modules/lodash/_mapToArray.js"(exports2, module2) {
          function mapToArray2(map2) {
            var index = -1, result = Array(map2.size);
            map2.forEach(function(value, key) {
              result[++index] = [key, value];
            });
            return result;
          }
          module2.exports = mapToArray2;
        }
      });
      var require_setToArray = __commonJS3({
        "../../node_modules/lodash/_setToArray.js"(exports2, module2) {
          function setToArray2(set) {
            var index = -1, result = Array(set.size);
            set.forEach(function(value) {
              result[++index] = value;
            });
            return result;
          }
          module2.exports = setToArray2;
        }
      });
      var require_equalByTag = __commonJS3({
        "../../node_modules/lodash/_equalByTag.js"(exports2, module2) {
          var Symbol3 = require_Symbol();
          var Uint8Array3 = require_Uint8Array();
          var eq2 = require_eq();
          var equalArrays2 = require_equalArrays();
          var mapToArray2 = require_mapToArray();
          var setToArray2 = require_setToArray();
          var COMPARE_PARTIAL_FLAG7 = 1;
          var COMPARE_UNORDERED_FLAG5 = 2;
          var boolTag3 = "[object Boolean]";
          var dateTag3 = "[object Date]";
          var errorTag3 = "[object Error]";
          var mapTag4 = "[object Map]";
          var numberTag3 = "[object Number]";
          var regexpTag3 = "[object RegExp]";
          var setTag4 = "[object Set]";
          var stringTag3 = "[object String]";
          var symbolTag3 = "[object Symbol]";
          var arrayBufferTag3 = "[object ArrayBuffer]";
          var dataViewTag4 = "[object DataView]";
          var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
          var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
          function equalByTag2(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag4:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag3:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array3(object), new Uint8Array3(other))) {
                  return false;
                }
                return true;
              case boolTag3:
              case dateTag3:
              case numberTag3:
                return eq2(+object, +other);
              case errorTag3:
                return object.name == other.name && object.message == other.message;
              case regexpTag3:
              case stringTag3:
                return object == other + "";
              case mapTag4:
                var convert = mapToArray2;
              case setTag4:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG7;
                convert || (convert = setToArray2);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG5;
                stack.set(object, other);
                var result = equalArrays2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result;
              case symbolTag3:
                if (symbolValueOf2) {
                  return symbolValueOf2.call(object) == symbolValueOf2.call(other);
                }
            }
            return false;
          }
          module2.exports = equalByTag2;
        }
      });
      var require_arrayPush = __commonJS3({
        "../../node_modules/lodash/_arrayPush.js"(exports2, module2) {
          function arrayPush2(array, values) {
            var index = -1, length = values.length, offset = array.length;
            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }
          module2.exports = arrayPush2;
        }
      });
      var require_baseGetAllKeys = __commonJS3({
        "../../node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
          var arrayPush2 = require_arrayPush();
          var isArray2 = require_isArray();
          function baseGetAllKeys2(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray2(object) ? result : arrayPush2(result, symbolsFunc(object));
          }
          module2.exports = baseGetAllKeys2;
        }
      });
      var require_arrayFilter = __commonJS3({
        "../../node_modules/lodash/_arrayFilter.js"(exports2, module2) {
          function arrayFilter2(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }
          module2.exports = arrayFilter2;
        }
      });
      var require_stubArray = __commonJS3({
        "../../node_modules/lodash/stubArray.js"(exports2, module2) {
          function stubArray2() {
            return [];
          }
          module2.exports = stubArray2;
        }
      });
      var require_getSymbols = __commonJS3({
        "../../node_modules/lodash/_getSymbols.js"(exports2, module2) {
          var arrayFilter2 = require_arrayFilter();
          var stubArray2 = require_stubArray();
          var objectProto16 = Object.prototype;
          var propertyIsEnumerable3 = objectProto16.propertyIsEnumerable;
          var nativeGetSymbols2 = Object.getOwnPropertySymbols;
          var getSymbols2 = !nativeGetSymbols2 ? stubArray2 : function(object) {
            if (object == null) {
              return [];
            }
            object = Object(object);
            return arrayFilter2(nativeGetSymbols2(object), function(symbol) {
              return propertyIsEnumerable3.call(object, symbol);
            });
          };
          module2.exports = getSymbols2;
        }
      });
      var require_getAllKeys = __commonJS3({
        "../../node_modules/lodash/_getAllKeys.js"(exports2, module2) {
          var baseGetAllKeys2 = require_baseGetAllKeys();
          var getSymbols2 = require_getSymbols();
          var keys22 = require_keys();
          function getAllKeys2(object) {
            return baseGetAllKeys2(object, keys22, getSymbols2);
          }
          module2.exports = getAllKeys2;
        }
      });
      var require_equalObjects = __commonJS3({
        "../../node_modules/lodash/_equalObjects.js"(exports2, module2) {
          var getAllKeys2 = require_getAllKeys();
          var COMPARE_PARTIAL_FLAG7 = 1;
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function equalObjects2(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, objProps = getAllKeys2(object), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty13.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result;
          }
          module2.exports = equalObjects2;
        }
      });
      var require_DataView = __commonJS3({
        "../../node_modules/lodash/_DataView.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var root2 = require_root();
          var DataView3 = getNative2(root2, "DataView");
          module2.exports = DataView3;
        }
      });
      var require_Promise = __commonJS3({
        "../../node_modules/lodash/_Promise.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var root2 = require_root();
          var Promise3 = getNative2(root2, "Promise");
          module2.exports = Promise3;
        }
      });
      var require_Set = __commonJS3({
        "../../node_modules/lodash/_Set.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var root2 = require_root();
          var Set3 = getNative2(root2, "Set");
          module2.exports = Set3;
        }
      });
      var require_WeakMap = __commonJS3({
        "../../node_modules/lodash/_WeakMap.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var root2 = require_root();
          var WeakMap3 = getNative2(root2, "WeakMap");
          module2.exports = WeakMap3;
        }
      });
      var require_getTag = __commonJS3({
        "../../node_modules/lodash/_getTag.js"(exports2, module2) {
          var DataView3 = require_DataView();
          var Map3 = require_Map();
          var Promise3 = require_Promise();
          var Set3 = require_Set();
          var WeakMap3 = require_WeakMap();
          var baseGetTag2 = require_baseGetTag();
          var toSource2 = require_toSource();
          var mapTag4 = "[object Map]";
          var objectTag5 = "[object Object]";
          var promiseTag2 = "[object Promise]";
          var setTag4 = "[object Set]";
          var weakMapTag3 = "[object WeakMap]";
          var dataViewTag4 = "[object DataView]";
          var dataViewCtorString2 = toSource2(DataView3);
          var mapCtorString2 = toSource2(Map3);
          var promiseCtorString2 = toSource2(Promise3);
          var setCtorString2 = toSource2(Set3);
          var weakMapCtorString2 = toSource2(WeakMap3);
          var getTag2 = baseGetTag2;
          if (DataView3 && getTag2(new DataView3(new ArrayBuffer(1))) != dataViewTag4 || Map3 && getTag2(new Map3()) != mapTag4 || Promise3 && getTag2(Promise3.resolve()) != promiseTag2 || Set3 && getTag2(new Set3()) != setTag4 || WeakMap3 && getTag2(new WeakMap3()) != weakMapTag3) {
            getTag2 = function(value) {
              var result = baseGetTag2(value), Ctor = result == objectTag5 ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString2:
                    return dataViewTag4;
                  case mapCtorString2:
                    return mapTag4;
                  case promiseCtorString2:
                    return promiseTag2;
                  case setCtorString2:
                    return setTag4;
                  case weakMapCtorString2:
                    return weakMapTag3;
                }
              }
              return result;
            };
          }
          module2.exports = getTag2;
        }
      });
      var require_baseIsEqualDeep = __commonJS3({
        "../../node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
          var Stack22 = require_Stack();
          var equalArrays2 = require_equalArrays();
          var equalByTag2 = require_equalByTag();
          var equalObjects2 = require_equalObjects();
          var getTag2 = require_getTag();
          var isArray2 = require_isArray();
          var isBuffer2 = require_isBuffer();
          var isTypedArray2 = require_isTypedArray();
          var COMPARE_PARTIAL_FLAG7 = 1;
          var argsTag4 = "[object Arguments]";
          var arrayTag3 = "[object Array]";
          var objectTag5 = "[object Object]";
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function baseIsEqualDeep2(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag3 : getTag2(object), othTag = othIsArr ? arrayTag3 : getTag2(other);
            objTag = objTag == argsTag4 ? objectTag5 : objTag;
            othTag = othTag == argsTag4 ? objectTag5 : othTag;
            var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer2(object)) {
              if (!isBuffer2(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack22());
              return objIsArr || isTypedArray2(object) ? equalArrays2(object, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG7)) {
              var objIsWrapped = objIsObj && hasOwnProperty13.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty13.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack22());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack22());
            return equalObjects2(object, other, bitmask, customizer, equalFunc, stack);
          }
          module2.exports = baseIsEqualDeep2;
        }
      });
      var require_baseIsEqual = __commonJS3({
        "../../node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
          var baseIsEqualDeep2 = require_baseIsEqualDeep();
          var isObjectLike2 = require_isObjectLike();
          function baseIsEqual2(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
          }
          module2.exports = baseIsEqual2;
        }
      });
      var require_baseIsMatch = __commonJS3({
        "../../node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
          var Stack22 = require_Stack();
          var baseIsEqual2 = require_baseIsEqual();
          var COMPARE_PARTIAL_FLAG7 = 1;
          var COMPARE_UNORDERED_FLAG5 = 2;
          function baseIsMatch2(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === void 0 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack22();
                if (customizer) {
                  var result = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result === void 0 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5, customizer, stack) : result)) {
                  return false;
                }
              }
            }
            return true;
          }
          module2.exports = baseIsMatch2;
        }
      });
      var require_isStrictComparable = __commonJS3({
        "../../node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
          var isObject22 = require_isObject();
          function isStrictComparable2(value) {
            return value === value && !isObject22(value);
          }
          module2.exports = isStrictComparable2;
        }
      });
      var require_getMatchData = __commonJS3({
        "../../node_modules/lodash/_getMatchData.js"(exports2, module2) {
          var isStrictComparable2 = require_isStrictComparable();
          var keys22 = require_keys();
          function getMatchData2(object) {
            var result = keys22(object), length = result.length;
            while (length--) {
              var key = result[length], value = object[key];
              result[length] = [key, value, isStrictComparable2(value)];
            }
            return result;
          }
          module2.exports = getMatchData2;
        }
      });
      var require_matchesStrictComparable = __commonJS3({
        "../../node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
          function matchesStrictComparable2(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
            };
          }
          module2.exports = matchesStrictComparable2;
        }
      });
      var require_baseMatches = __commonJS3({
        "../../node_modules/lodash/_baseMatches.js"(exports2, module2) {
          var baseIsMatch2 = require_baseIsMatch();
          var getMatchData2 = require_getMatchData();
          var matchesStrictComparable2 = require_matchesStrictComparable();
          function baseMatches2(source) {
            var matchData = getMatchData2(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch2(object, source, matchData);
            };
          }
          module2.exports = baseMatches2;
        }
      });
      var require_isSymbol = __commonJS3({
        "../../node_modules/lodash/isSymbol.js"(exports2, module2) {
          var baseGetTag2 = require_baseGetTag();
          var isObjectLike2 = require_isObjectLike();
          var symbolTag3 = "[object Symbol]";
          function isSymbol2(value) {
            return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag3;
          }
          module2.exports = isSymbol2;
        }
      });
      var require_isKey = __commonJS3({
        "../../node_modules/lodash/_isKey.js"(exports2, module2) {
          var isArray2 = require_isArray();
          var isSymbol2 = require_isSymbol();
          var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
          var reIsPlainProp2 = /^\w*$/;
          function isKey2(value, object) {
            if (isArray2(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
              return true;
            }
            return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object != null && value in Object(object);
          }
          module2.exports = isKey2;
        }
      });
      var require_memoize = __commonJS3({
        "../../node_modules/lodash/memoize.js"(exports2, module2) {
          var MapCache2 = require_MapCache();
          var FUNC_ERROR_TEXT4 = "Expected a function";
          function memoize22(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError(FUNC_ERROR_TEXT4);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result = func.apply(this, args);
              memoized.cache = cache.set(key, result) || cache;
              return result;
            };
            memoized.cache = new (memoize22.Cache || MapCache2)();
            return memoized;
          }
          memoize22.Cache = MapCache2;
          module2.exports = memoize22;
        }
      });
      var require_memoizeCapped = __commonJS3({
        "../../node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
          var memoize22 = require_memoize();
          var MAX_MEMOIZE_SIZE2 = 500;
          function memoizeCapped2(func) {
            var result = memoize22(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE2) {
                cache.clear();
              }
              return key;
            });
            var cache = result.cache;
            return result;
          }
          module2.exports = memoizeCapped2;
        }
      });
      var require_stringToPath = __commonJS3({
        "../../node_modules/lodash/_stringToPath.js"(exports2, module2) {
          var memoizeCapped2 = require_memoizeCapped();
          var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
          var reEscapeChar2 = /\\(\\)?/g;
          var stringToPath2 = memoizeCapped2(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46) {
              result.push("");
            }
            string.replace(rePropName2, function(match, number2, quote, subString) {
              result.push(quote ? subString.replace(reEscapeChar2, "$1") : number2 || match);
            });
            return result;
          });
          module2.exports = stringToPath2;
        }
      });
      var require_baseToString = __commonJS3({
        "../../node_modules/lodash/_baseToString.js"(exports2, module2) {
          var Symbol3 = require_Symbol();
          var arrayMap2 = require_arrayMap();
          var isArray2 = require_isArray();
          var isSymbol2 = require_isSymbol();
          var INFINITY3 = 1 / 0;
          var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
          var symbolToString2 = symbolProto3 ? symbolProto3.toString : void 0;
          function baseToString2(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray2(value)) {
              return arrayMap2(value, baseToString2) + "";
            }
            if (isSymbol2(value)) {
              return symbolToString2 ? symbolToString2.call(value) : "";
            }
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
          }
          module2.exports = baseToString2;
        }
      });
      var require_toString = __commonJS3({
        "../../node_modules/lodash/toString.js"(exports2, module2) {
          var baseToString2 = require_baseToString();
          function toString2(value) {
            return value == null ? "" : baseToString2(value);
          }
          module2.exports = toString2;
        }
      });
      var require_castPath = __commonJS3({
        "../../node_modules/lodash/_castPath.js"(exports2, module2) {
          var isArray2 = require_isArray();
          var isKey2 = require_isKey();
          var stringToPath2 = require_stringToPath();
          var toString2 = require_toString();
          function castPath2(value, object) {
            if (isArray2(value)) {
              return value;
            }
            return isKey2(value, object) ? [value] : stringToPath2(toString2(value));
          }
          module2.exports = castPath2;
        }
      });
      var require_toKey = __commonJS3({
        "../../node_modules/lodash/_toKey.js"(exports2, module2) {
          var isSymbol2 = require_isSymbol();
          var INFINITY3 = 1 / 0;
          function toKey2(value) {
            if (typeof value == "string" || isSymbol2(value)) {
              return value;
            }
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
          }
          module2.exports = toKey2;
        }
      });
      var require_baseGet = __commonJS3({
        "../../node_modules/lodash/_baseGet.js"(exports2, module2) {
          var castPath2 = require_castPath();
          var toKey2 = require_toKey();
          function baseGet2(object, path) {
            path = castPath2(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey2(path[index++])];
            }
            return index && index == length ? object : void 0;
          }
          module2.exports = baseGet2;
        }
      });
      var require_get = __commonJS3({
        "../../node_modules/lodash/get.js"(exports2, module2) {
          var baseGet2 = require_baseGet();
          function get4(object, path, defaultValue) {
            var result = object == null ? void 0 : baseGet2(object, path);
            return result === void 0 ? defaultValue : result;
          }
          module2.exports = get4;
        }
      });
      var require_baseHasIn = __commonJS3({
        "../../node_modules/lodash/_baseHasIn.js"(exports2, module2) {
          function baseHasIn2(object, key) {
            return object != null && key in Object(object);
          }
          module2.exports = baseHasIn2;
        }
      });
      var require_hasPath = __commonJS3({
        "../../node_modules/lodash/_hasPath.js"(exports2, module2) {
          var castPath2 = require_castPath();
          var isArguments2 = require_isArguments();
          var isArray2 = require_isArray();
          var isIndex2 = require_isIndex();
          var isLength2 = require_isLength();
          var toKey2 = require_toKey();
          function hasPath2(object, path, hasFunc) {
            path = castPath2(path, object);
            var index = -1, length = path.length, result = false;
            while (++index < length) {
              var key = toKey2(path[index]);
              if (!(result = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result || ++index != length) {
              return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength2(length) && isIndex2(key, length) && (isArray2(object) || isArguments2(object));
          }
          module2.exports = hasPath2;
        }
      });
      var require_hasIn = __commonJS3({
        "../../node_modules/lodash/hasIn.js"(exports2, module2) {
          var baseHasIn2 = require_baseHasIn();
          var hasPath2 = require_hasPath();
          function hasIn2(object, path) {
            return object != null && hasPath2(object, path, baseHasIn2);
          }
          module2.exports = hasIn2;
        }
      });
      var require_baseMatchesProperty = __commonJS3({
        "../../node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
          var baseIsEqual2 = require_baseIsEqual();
          var get4 = require_get();
          var hasIn2 = require_hasIn();
          var isKey2 = require_isKey();
          var isStrictComparable2 = require_isStrictComparable();
          var matchesStrictComparable2 = require_matchesStrictComparable();
          var toKey2 = require_toKey();
          var COMPARE_PARTIAL_FLAG7 = 1;
          var COMPARE_UNORDERED_FLAG5 = 2;
          function baseMatchesProperty2(path, srcValue) {
            if (isKey2(path) && isStrictComparable2(srcValue)) {
              return matchesStrictComparable2(toKey2(path), srcValue);
            }
            return function(object) {
              var objValue = get4(object, path);
              return objValue === void 0 && objValue === srcValue ? hasIn2(object, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5);
            };
          }
          module2.exports = baseMatchesProperty2;
        }
      });
      var require_baseProperty = __commonJS3({
        "../../node_modules/lodash/_baseProperty.js"(exports2, module2) {
          function baseProperty2(key) {
            return function(object) {
              return object == null ? void 0 : object[key];
            };
          }
          module2.exports = baseProperty2;
        }
      });
      var require_basePropertyDeep = __commonJS3({
        "../../node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
          var baseGet2 = require_baseGet();
          function basePropertyDeep2(path) {
            return function(object) {
              return baseGet2(object, path);
            };
          }
          module2.exports = basePropertyDeep2;
        }
      });
      var require_property = __commonJS3({
        "../../node_modules/lodash/property.js"(exports2, module2) {
          var baseProperty2 = require_baseProperty();
          var basePropertyDeep2 = require_basePropertyDeep();
          var isKey2 = require_isKey();
          var toKey2 = require_toKey();
          function property2(path) {
            return isKey2(path) ? baseProperty2(toKey2(path)) : basePropertyDeep2(path);
          }
          module2.exports = property2;
        }
      });
      var require_baseIteratee = __commonJS3({
        "../../node_modules/lodash/_baseIteratee.js"(exports2, module2) {
          var baseMatches2 = require_baseMatches();
          var baseMatchesProperty2 = require_baseMatchesProperty();
          var identity2 = require_identity();
          var isArray2 = require_isArray();
          var property2 = require_property();
          function baseIteratee2(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity2;
            }
            if (typeof value == "object") {
              return isArray2(value) ? baseMatchesProperty2(value[0], value[1]) : baseMatches2(value);
            }
            return property2(value);
          }
          module2.exports = baseIteratee2;
        }
      });
      var require_createBaseEach = __commonJS3({
        "../../node_modules/lodash/_createBaseEach.js"(exports2, module2) {
          var isArrayLike2 = require_isArrayLike();
          function createBaseEach2(eachFunc, fromRight) {
            return function(collection, iteratee) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike2(collection)) {
                return eachFunc(collection, iteratee);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          module2.exports = createBaseEach2;
        }
      });
      var require_baseEach = __commonJS3({
        "../../node_modules/lodash/_baseEach.js"(exports2, module2) {
          var baseForOwn2 = require_baseForOwn();
          var createBaseEach2 = require_createBaseEach();
          var baseEach2 = createBaseEach2(baseForOwn2);
          module2.exports = baseEach2;
        }
      });
      var require_baseMap = __commonJS3({
        "../../node_modules/lodash/_baseMap.js"(exports2, module2) {
          var baseEach2 = require_baseEach();
          var isArrayLike2 = require_isArrayLike();
          function baseMap2(collection, iteratee) {
            var index = -1, result = isArrayLike2(collection) ? Array(collection.length) : [];
            baseEach2(collection, function(value, key, collection2) {
              result[++index] = iteratee(value, key, collection2);
            });
            return result;
          }
          module2.exports = baseMap2;
        }
      });
      var require_map = __commonJS3({
        "../../node_modules/lodash/map.js"(exports2, module2) {
          var arrayMap2 = require_arrayMap();
          var baseIteratee2 = require_baseIteratee();
          var baseMap2 = require_baseMap();
          var isArray2 = require_isArray();
          function map2(collection, iteratee) {
            var func = isArray2(collection) ? arrayMap2 : baseMap2;
            return func(collection, baseIteratee2(iteratee, 3));
          }
          module2.exports = map2;
        }
      });
      var require_flattenNames = __commonJS3({
        "../../node_modules/reactcss/lib/flattenNames.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2.flattenNames = void 0;
          var _isString2 = require_isString();
          var _isString3 = _interopRequireDefault2(_isString2);
          var _forOwn2 = require_forOwn();
          var _forOwn3 = _interopRequireDefault2(_forOwn2);
          var _isPlainObject2 = require_isPlainObject();
          var _isPlainObject3 = _interopRequireDefault2(_isPlainObject2);
          var _map2 = require_map();
          var _map3 = _interopRequireDefault2(_map2);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var flattenNames = exports2.flattenNames = function flattenNames2() {
            var things = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var names3 = [];
            (0, _map3.default)(things, function(thing) {
              if (Array.isArray(thing)) {
                flattenNames2(thing).map(function(name) {
                  return names3.push(name);
                });
              } else if ((0, _isPlainObject3.default)(thing)) {
                (0, _forOwn3.default)(thing, function(value, key) {
                  value === true && names3.push(key);
                  names3.push(key + "-" + value);
                });
              } else if ((0, _isString3.default)(thing)) {
                names3.push(thing);
              }
            });
            return names3;
          };
          exports2.default = flattenNames;
        }
      });
      var require_arrayEach = __commonJS3({
        "../../node_modules/lodash/_arrayEach.js"(exports2, module2) {
          function arrayEach2(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }
          module2.exports = arrayEach2;
        }
      });
      var require_defineProperty = __commonJS3({
        "../../node_modules/lodash/_defineProperty.js"(exports2, module2) {
          var getNative2 = require_getNative();
          var defineProperty2 = function() {
            try {
              var func = getNative2(Object, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e2) {
            }
          }();
          module2.exports = defineProperty2;
        }
      });
      var require_baseAssignValue = __commonJS3({
        "../../node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
          var defineProperty2 = require_defineProperty();
          function baseAssignValue2(object, key, value) {
            if (key == "__proto__" && defineProperty2) {
              defineProperty2(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          module2.exports = baseAssignValue2;
        }
      });
      var require_assignValue = __commonJS3({
        "../../node_modules/lodash/_assignValue.js"(exports2, module2) {
          var baseAssignValue2 = require_baseAssignValue();
          var eq2 = require_eq();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function assignValue2(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty13.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
              baseAssignValue2(object, key, value);
            }
          }
          module2.exports = assignValue2;
        }
      });
      var require_copyObject = __commonJS3({
        "../../node_modules/lodash/_copyObject.js"(exports2, module2) {
          var assignValue2 = require_assignValue();
          var baseAssignValue2 = require_baseAssignValue();
          function copyObject2(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
              if (newValue === void 0) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue2(object, key, newValue);
              } else {
                assignValue2(object, key, newValue);
              }
            }
            return object;
          }
          module2.exports = copyObject2;
        }
      });
      var require_baseAssign = __commonJS3({
        "../../node_modules/lodash/_baseAssign.js"(exports2, module2) {
          var copyObject2 = require_copyObject();
          var keys22 = require_keys();
          function baseAssign(object, source) {
            return object && copyObject2(source, keys22(source), object);
          }
          module2.exports = baseAssign;
        }
      });
      var require_nativeKeysIn = __commonJS3({
        "../../node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
          function nativeKeysIn2(object) {
            var result = [];
            if (object != null) {
              for (var key in Object(object)) {
                result.push(key);
              }
            }
            return result;
          }
          module2.exports = nativeKeysIn2;
        }
      });
      var require_baseKeysIn = __commonJS3({
        "../../node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
          var isObject22 = require_isObject();
          var isPrototype2 = require_isPrototype();
          var nativeKeysIn2 = require_nativeKeysIn();
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function baseKeysIn2(object) {
            if (!isObject22(object)) {
              return nativeKeysIn2(object);
            }
            var isProto = isPrototype2(object), result = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty13.call(object, key)))) {
                result.push(key);
              }
            }
            return result;
          }
          module2.exports = baseKeysIn2;
        }
      });
      var require_keysIn = __commonJS3({
        "../../node_modules/lodash/keysIn.js"(exports2, module2) {
          var arrayLikeKeys2 = require_arrayLikeKeys();
          var baseKeysIn2 = require_baseKeysIn();
          var isArrayLike2 = require_isArrayLike();
          function keysIn2(object) {
            return isArrayLike2(object) ? arrayLikeKeys2(object, true) : baseKeysIn2(object);
          }
          module2.exports = keysIn2;
        }
      });
      var require_baseAssignIn = __commonJS3({
        "../../node_modules/lodash/_baseAssignIn.js"(exports2, module2) {
          var copyObject2 = require_copyObject();
          var keysIn2 = require_keysIn();
          function baseAssignIn(object, source) {
            return object && copyObject2(source, keysIn2(source), object);
          }
          module2.exports = baseAssignIn;
        }
      });
      var require_cloneBuffer = __commonJS3({
        "../../node_modules/lodash/_cloneBuffer.js"(exports2, module2) {
          var root2 = require_root();
          var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
          var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
          var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
          var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
          var allocUnsafe2 = Buffer4 ? Buffer4.allocUnsafe : void 0;
          function cloneBuffer2(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
          }
          module2.exports = cloneBuffer2;
        }
      });
      var require_copyArray = __commonJS3({
        "../../node_modules/lodash/_copyArray.js"(exports2, module2) {
          function copyArray2(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          module2.exports = copyArray2;
        }
      });
      var require_copySymbols = __commonJS3({
        "../../node_modules/lodash/_copySymbols.js"(exports2, module2) {
          var copyObject2 = require_copyObject();
          var getSymbols2 = require_getSymbols();
          function copySymbols(source, object) {
            return copyObject2(source, getSymbols2(source), object);
          }
          module2.exports = copySymbols;
        }
      });
      var require_getSymbolsIn = __commonJS3({
        "../../node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
          var arrayPush2 = require_arrayPush();
          var getPrototype2 = require_getPrototype();
          var getSymbols2 = require_getSymbols();
          var stubArray2 = require_stubArray();
          var nativeGetSymbols2 = Object.getOwnPropertySymbols;
          var getSymbolsIn = !nativeGetSymbols2 ? stubArray2 : function(object) {
            var result = [];
            while (object) {
              arrayPush2(result, getSymbols2(object));
              object = getPrototype2(object);
            }
            return result;
          };
          module2.exports = getSymbolsIn;
        }
      });
      var require_copySymbolsIn = __commonJS3({
        "../../node_modules/lodash/_copySymbolsIn.js"(exports2, module2) {
          var copyObject2 = require_copyObject();
          var getSymbolsIn = require_getSymbolsIn();
          function copySymbolsIn(source, object) {
            return copyObject2(source, getSymbolsIn(source), object);
          }
          module2.exports = copySymbolsIn;
        }
      });
      var require_getAllKeysIn = __commonJS3({
        "../../node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
          var baseGetAllKeys2 = require_baseGetAllKeys();
          var getSymbolsIn = require_getSymbolsIn();
          var keysIn2 = require_keysIn();
          function getAllKeysIn(object) {
            return baseGetAllKeys2(object, keysIn2, getSymbolsIn);
          }
          module2.exports = getAllKeysIn;
        }
      });
      var require_initCloneArray = __commonJS3({
        "../../node_modules/lodash/_initCloneArray.js"(exports2, module2) {
          var objectProto16 = Object.prototype;
          var hasOwnProperty13 = objectProto16.hasOwnProperty;
          function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty13.call(array, "index")) {
              result.index = array.index;
              result.input = array.input;
            }
            return result;
          }
          module2.exports = initCloneArray;
        }
      });
      var require_cloneArrayBuffer = __commonJS3({
        "../../node_modules/lodash/_cloneArrayBuffer.js"(exports2, module2) {
          var Uint8Array3 = require_Uint8Array();
          function cloneArrayBuffer2(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array3(result).set(new Uint8Array3(arrayBuffer));
            return result;
          }
          module2.exports = cloneArrayBuffer2;
        }
      });
      var require_cloneDataView = __commonJS3({
        "../../node_modules/lodash/_cloneDataView.js"(exports2, module2) {
          var cloneArrayBuffer2 = require_cloneArrayBuffer();
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          module2.exports = cloneDataView;
        }
      });
      var require_cloneRegExp = __commonJS3({
        "../../node_modules/lodash/_cloneRegExp.js"(exports2, module2) {
          var reFlags = /\w*$/;
          function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
          }
          module2.exports = cloneRegExp;
        }
      });
      var require_cloneSymbol = __commonJS3({
        "../../node_modules/lodash/_cloneSymbol.js"(exports2, module2) {
          var Symbol3 = require_Symbol();
          var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
          var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
          function cloneSymbol(symbol) {
            return symbolValueOf2 ? Object(symbolValueOf2.call(symbol)) : {};
          }
          module2.exports = cloneSymbol;
        }
      });
      var require_cloneTypedArray = __commonJS3({
        "../../node_modules/lodash/_cloneTypedArray.js"(exports2, module2) {
          var cloneArrayBuffer2 = require_cloneArrayBuffer();
          function cloneTypedArray2(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          module2.exports = cloneTypedArray2;
        }
      });
      var require_initCloneByTag = __commonJS3({
        "../../node_modules/lodash/_initCloneByTag.js"(exports2, module2) {
          var cloneArrayBuffer2 = require_cloneArrayBuffer();
          var cloneDataView = require_cloneDataView();
          var cloneRegExp = require_cloneRegExp();
          var cloneSymbol = require_cloneSymbol();
          var cloneTypedArray2 = require_cloneTypedArray();
          var boolTag3 = "[object Boolean]";
          var dateTag3 = "[object Date]";
          var mapTag4 = "[object Map]";
          var numberTag3 = "[object Number]";
          var regexpTag3 = "[object RegExp]";
          var setTag4 = "[object Set]";
          var stringTag3 = "[object String]";
          var symbolTag3 = "[object Symbol]";
          var arrayBufferTag3 = "[object ArrayBuffer]";
          var dataViewTag4 = "[object DataView]";
          var float32Tag2 = "[object Float32Array]";
          var float64Tag2 = "[object Float64Array]";
          var int8Tag2 = "[object Int8Array]";
          var int16Tag2 = "[object Int16Array]";
          var int32Tag2 = "[object Int32Array]";
          var uint8Tag2 = "[object Uint8Array]";
          var uint8ClampedTag2 = "[object Uint8ClampedArray]";
          var uint16Tag2 = "[object Uint16Array]";
          var uint32Tag2 = "[object Uint32Array]";
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag3:
                return cloneArrayBuffer2(object);
              case boolTag3:
              case dateTag3:
                return new Ctor(+object);
              case dataViewTag4:
                return cloneDataView(object, isDeep);
              case float32Tag2:
              case float64Tag2:
              case int8Tag2:
              case int16Tag2:
              case int32Tag2:
              case uint8Tag2:
              case uint8ClampedTag2:
              case uint16Tag2:
              case uint32Tag2:
                return cloneTypedArray2(object, isDeep);
              case mapTag4:
                return new Ctor();
              case numberTag3:
              case stringTag3:
                return new Ctor(object);
              case regexpTag3:
                return cloneRegExp(object);
              case setTag4:
                return new Ctor();
              case symbolTag3:
                return cloneSymbol(object);
            }
          }
          module2.exports = initCloneByTag;
        }
      });
      var require_baseCreate = __commonJS3({
        "../../node_modules/lodash/_baseCreate.js"(exports2, module2) {
          var isObject22 = require_isObject();
          var objectCreate2 = Object.create;
          var baseCreate2 = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject22(proto)) {
                return {};
              }
              if (objectCreate2) {
                return objectCreate2(proto);
              }
              object.prototype = proto;
              var result = new object();
              object.prototype = void 0;
              return result;
            };
          }();
          module2.exports = baseCreate2;
        }
      });
      var require_initCloneObject = __commonJS3({
        "../../node_modules/lodash/_initCloneObject.js"(exports2, module2) {
          var baseCreate2 = require_baseCreate();
          var getPrototype2 = require_getPrototype();
          var isPrototype2 = require_isPrototype();
          function initCloneObject2(object) {
            return typeof object.constructor == "function" && !isPrototype2(object) ? baseCreate2(getPrototype2(object)) : {};
          }
          module2.exports = initCloneObject2;
        }
      });
      var require_baseIsMap = __commonJS3({
        "../../node_modules/lodash/_baseIsMap.js"(exports2, module2) {
          var getTag2 = require_getTag();
          var isObjectLike2 = require_isObjectLike();
          var mapTag4 = "[object Map]";
          function baseIsMap(value) {
            return isObjectLike2(value) && getTag2(value) == mapTag4;
          }
          module2.exports = baseIsMap;
        }
      });
      var require_isMap = __commonJS3({
        "../../node_modules/lodash/isMap.js"(exports2, module2) {
          var baseIsMap = require_baseIsMap();
          var baseUnary2 = require_baseUnary();
          var nodeUtil2 = require_nodeUtil();
          var nodeIsMap = nodeUtil2 && nodeUtil2.isMap;
          var isMap = nodeIsMap ? baseUnary2(nodeIsMap) : baseIsMap;
          module2.exports = isMap;
        }
      });
      var require_baseIsSet = __commonJS3({
        "../../node_modules/lodash/_baseIsSet.js"(exports2, module2) {
          var getTag2 = require_getTag();
          var isObjectLike2 = require_isObjectLike();
          var setTag4 = "[object Set]";
          function baseIsSet(value) {
            return isObjectLike2(value) && getTag2(value) == setTag4;
          }
          module2.exports = baseIsSet;
        }
      });
      var require_isSet = __commonJS3({
        "../../node_modules/lodash/isSet.js"(exports2, module2) {
          var baseIsSet = require_baseIsSet();
          var baseUnary2 = require_baseUnary();
          var nodeUtil2 = require_nodeUtil();
          var nodeIsSet = nodeUtil2 && nodeUtil2.isSet;
          var isSet = nodeIsSet ? baseUnary2(nodeIsSet) : baseIsSet;
          module2.exports = isSet;
        }
      });
      var require_baseClone = __commonJS3({
        "../../node_modules/lodash/_baseClone.js"(exports2, module2) {
          var Stack22 = require_Stack();
          var arrayEach2 = require_arrayEach();
          var assignValue2 = require_assignValue();
          var baseAssign = require_baseAssign();
          var baseAssignIn = require_baseAssignIn();
          var cloneBuffer2 = require_cloneBuffer();
          var copyArray2 = require_copyArray();
          var copySymbols = require_copySymbols();
          var copySymbolsIn = require_copySymbolsIn();
          var getAllKeys2 = require_getAllKeys();
          var getAllKeysIn = require_getAllKeysIn();
          var getTag2 = require_getTag();
          var initCloneArray = require_initCloneArray();
          var initCloneByTag = require_initCloneByTag();
          var initCloneObject2 = require_initCloneObject();
          var isArray2 = require_isArray();
          var isBuffer2 = require_isBuffer();
          var isMap = require_isMap();
          var isObject22 = require_isObject();
          var isSet = require_isSet();
          var keys22 = require_keys();
          var keysIn2 = require_keysIn();
          var CLONE_DEEP_FLAG = 1;
          var CLONE_FLAT_FLAG = 2;
          var CLONE_SYMBOLS_FLAG = 4;
          var argsTag4 = "[object Arguments]";
          var arrayTag3 = "[object Array]";
          var boolTag3 = "[object Boolean]";
          var dateTag3 = "[object Date]";
          var errorTag3 = "[object Error]";
          var funcTag3 = "[object Function]";
          var genTag2 = "[object GeneratorFunction]";
          var mapTag4 = "[object Map]";
          var numberTag3 = "[object Number]";
          var objectTag5 = "[object Object]";
          var regexpTag3 = "[object RegExp]";
          var setTag4 = "[object Set]";
          var stringTag3 = "[object String]";
          var symbolTag3 = "[object Symbol]";
          var weakMapTag3 = "[object WeakMap]";
          var arrayBufferTag3 = "[object ArrayBuffer]";
          var dataViewTag4 = "[object DataView]";
          var float32Tag2 = "[object Float32Array]";
          var float64Tag2 = "[object Float64Array]";
          var int8Tag2 = "[object Int8Array]";
          var int16Tag2 = "[object Int16Array]";
          var int32Tag2 = "[object Int32Array]";
          var uint8Tag2 = "[object Uint8Array]";
          var uint8ClampedTag2 = "[object Uint8ClampedArray]";
          var uint16Tag2 = "[object Uint16Array]";
          var uint32Tag2 = "[object Uint32Array]";
          var cloneableTags = {};
          cloneableTags[argsTag4] = cloneableTags[arrayTag3] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag2] = cloneableTags[float64Tag2] = cloneableTags[int8Tag2] = cloneableTags[int16Tag2] = cloneableTags[int32Tag2] = cloneableTags[mapTag4] = cloneableTags[numberTag3] = cloneableTags[objectTag5] = cloneableTags[regexpTag3] = cloneableTags[setTag4] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag2] = cloneableTags[uint8ClampedTag2] = cloneableTags[uint16Tag2] = cloneableTags[uint32Tag2] = true;
          cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== void 0) {
              return result;
            }
            if (!isObject22(value)) {
              return value;
            }
            var isArr = isArray2(value);
            if (isArr) {
              result = initCloneArray(value);
              if (!isDeep) {
                return copyArray2(value, result);
              }
            } else {
              var tag = getTag2(value), isFunc = tag == funcTag3 || tag == genTag2;
              if (isBuffer2(value)) {
                return cloneBuffer2(value, isDeep);
              }
              if (tag == objectTag5 || tag == argsTag4 || isFunc && !object) {
                result = isFlat || isFunc ? {} : initCloneObject2(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack22());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys2 : isFlat ? keysIn2 : keys22;
            var props = isArr ? void 0 : keysFunc(value);
            arrayEach2(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue2(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result;
          }
          module2.exports = baseClone;
        }
      });
      var require_cloneDeep = __commonJS3({
        "../../node_modules/lodash/cloneDeep.js"(exports2, module2) {
          var baseClone = require_baseClone();
          var CLONE_DEEP_FLAG = 1;
          var CLONE_SYMBOLS_FLAG = 4;
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          module2.exports = cloneDeep;
        }
      });
      var require_mergeClasses = __commonJS3({
        "../../node_modules/reactcss/lib/mergeClasses.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2.mergeClasses = void 0;
          var _forOwn2 = require_forOwn();
          var _forOwn3 = _interopRequireDefault2(_forOwn2);
          var _cloneDeep2 = require_cloneDeep();
          var _cloneDeep3 = _interopRequireDefault2(_cloneDeep2);
          var _extends10 = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var mergeClasses = exports2.mergeClasses = function mergeClasses2(classes) {
            var activeNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
            var styles2 = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
            activeNames.map(function(name) {
              var toMerge = classes[name];
              if (toMerge) {
                (0, _forOwn3.default)(toMerge, function(value, key) {
                  if (!styles2[key]) {
                    styles2[key] = {};
                  }
                  styles2[key] = _extends10({}, styles2[key], toMerge[key]);
                });
              }
              return name;
            });
            return styles2;
          };
          exports2.default = mergeClasses;
        }
      });
      var require_autoprefix = __commonJS3({
        "../../node_modules/reactcss/lib/autoprefix.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2.autoprefix = void 0;
          var _forOwn2 = require_forOwn();
          var _forOwn3 = _interopRequireDefault2(_forOwn2);
          var _extends10 = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var transforms = {
            borderRadius: function borderRadius(value) {
              return {
                msBorderRadius: value,
                MozBorderRadius: value,
                OBorderRadius: value,
                WebkitBorderRadius: value,
                borderRadius: value
              };
            },
            boxShadow: function boxShadow(value) {
              return {
                msBoxShadow: value,
                MozBoxShadow: value,
                OBoxShadow: value,
                WebkitBoxShadow: value,
                boxShadow: value
              };
            },
            userSelect: function userSelect(value) {
              return {
                WebkitTouchCallout: value,
                KhtmlUserSelect: value,
                MozUserSelect: value,
                msUserSelect: value,
                WebkitUserSelect: value,
                userSelect: value
              };
            },
            flex: function flex(value) {
              return {
                WebkitBoxFlex: value,
                MozBoxFlex: value,
                WebkitFlex: value,
                msFlex: value,
                flex: value
              };
            },
            flexBasis: function flexBasis(value) {
              return {
                WebkitFlexBasis: value,
                flexBasis: value
              };
            },
            justifyContent: function justifyContent(value) {
              return {
                WebkitJustifyContent: value,
                justifyContent: value
              };
            },
            transition: function transition3(value) {
              return {
                msTransition: value,
                MozTransition: value,
                OTransition: value,
                WebkitTransition: value,
                transition: value
              };
            },
            transform: function transform2(value) {
              return {
                msTransform: value,
                MozTransform: value,
                OTransform: value,
                WebkitTransform: value,
                transform: value
              };
            },
            absolute: function absolute(value) {
              var direction2 = value && value.split(" ");
              return {
                position: "absolute",
                top: direction2 && direction2[0],
                right: direction2 && direction2[1],
                bottom: direction2 && direction2[2],
                left: direction2 && direction2[3]
              };
            },
            extend: function extend(name, otherElementStyles) {
              var otherStyle = otherElementStyles[name];
              if (otherStyle) {
                return otherStyle;
              }
              return {
                "extend": name
              };
            }
          };
          var autoprefix = exports2.autoprefix = function autoprefix2(elements) {
            var prefixed = {};
            (0, _forOwn3.default)(elements, function(styles2, element) {
              var expanded = {};
              (0, _forOwn3.default)(styles2, function(value, key) {
                var transform2 = transforms[key];
                if (transform2) {
                  expanded = _extends10({}, expanded, transform2(value));
                } else {
                  expanded[key] = value;
                }
              });
              prefixed[element] = expanded;
            });
            return prefixed;
          };
          exports2.default = autoprefix;
        }
      });
      var require_hover = __commonJS3({
        "../../node_modules/reactcss/lib/components/hover.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2.hover = void 0;
          var _extends10 = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          var _react = require_react();
          var _react2 = _interopRequireDefault2(_react);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          function _classCallCheck9(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _possibleConstructorReturn9(self2, call) {
            if (!self2) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self2;
          }
          function _inherits9(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var hover = exports2.hover = function hover2(Component6) {
            var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
            return function(_React$Component) {
              _inherits9(Hover, _React$Component);
              function Hover() {
                var _ref;
                var _temp, _this, _ret;
                _classCallCheck9(this, Hover);
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                return _ret = (_temp = (_this = _possibleConstructorReturn9(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function() {
                  return _this.setState({ hover: true });
                }, _this.handleMouseOut = function() {
                  return _this.setState({ hover: false });
                }, _this.render = function() {
                  return _react2.default.createElement(Span, { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut }, _react2.default.createElement(Component6, _extends10({}, _this.props, _this.state)));
                }, _temp), _possibleConstructorReturn9(_this, _ret);
              }
              return Hover;
            }(_react2.default.Component);
          };
          exports2.default = hover;
        }
      });
      var require_active = __commonJS3({
        "../../node_modules/reactcss/lib/components/active.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2.active = void 0;
          var _extends10 = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          var _react = require_react();
          var _react2 = _interopRequireDefault2(_react);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          function _classCallCheck9(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _possibleConstructorReturn9(self2, call) {
            if (!self2) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self2;
          }
          function _inherits9(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var active = exports2.active = function active2(Component6) {
            var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
            return function(_React$Component) {
              _inherits9(Active, _React$Component);
              function Active() {
                var _ref;
                var _temp, _this, _ret;
                _classCallCheck9(this, Active);
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                return _ret = (_temp = (_this = _possibleConstructorReturn9(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function() {
                  return _this.setState({ active: true });
                }, _this.handleMouseUp = function() {
                  return _this.setState({ active: false });
                }, _this.render = function() {
                  return _react2.default.createElement(Span, { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp }, _react2.default.createElement(Component6, _extends10({}, _this.props, _this.state)));
                }, _temp), _possibleConstructorReturn9(_this, _ret);
              }
              return Active;
            }(_react2.default.Component);
          };
          exports2.default = active;
        }
      });
      var require_loop = __commonJS3({
        "../../node_modules/reactcss/lib/loop.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var loopable = function loopable2(i2, length) {
            var props = {};
            var setProp = function setProp2(name) {
              var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              props[name] = value;
            };
            i2 === 0 && setProp("first-child");
            i2 === length - 1 && setProp("last-child");
            (i2 === 0 || i2 % 2 === 0) && setProp("even");
            Math.abs(i2 % 2) === 1 && setProp("odd");
            setProp("nth-child", i2);
            return props;
          };
          exports2.default = loopable;
        }
      });
      var require_lib = __commonJS3({
        "../../node_modules/reactcss/lib/index.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2.ReactCSS = exports2.loop = exports2.handleActive = exports2.handleHover = exports2.hover = void 0;
          var _flattenNames = require_flattenNames();
          var _flattenNames2 = _interopRequireDefault2(_flattenNames);
          var _mergeClasses = require_mergeClasses();
          var _mergeClasses2 = _interopRequireDefault2(_mergeClasses);
          var _autoprefix = require_autoprefix();
          var _autoprefix2 = _interopRequireDefault2(_autoprefix);
          var _hover2 = require_hover();
          var _hover3 = _interopRequireDefault2(_hover2);
          var _active = require_active();
          var _active2 = _interopRequireDefault2(_active);
          var _loop2 = require_loop();
          var _loop3 = _interopRequireDefault2(_loop2);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          exports2.hover = _hover3.default;
          exports2.handleHover = _hover3.default;
          exports2.handleActive = _active2.default;
          exports2.loop = _loop3.default;
          var ReactCSS = exports2.ReactCSS = function ReactCSS2(classes) {
            for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              activations[_key - 1] = arguments[_key];
            }
            var activeNames = (0, _flattenNames2.default)(activations);
            var merged = (0, _mergeClasses2.default)(classes, activeNames);
            return (0, _autoprefix2.default)(merged);
          };
          exports2.default = ReactCSS;
        }
      });
      var require_react_is_development2 = __commonJS3({
        "../../node_modules/react-is/cjs/react-is.development.js"(exports2) {
          "use strict";
          if (true) {
            (function() {
              "use strict";
              var hasSymbol = typeof Symbol === "function" && Symbol.for;
              var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
              var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
              var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
              var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
              var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
              var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
              var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
              var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
              var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
              var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
              var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
              var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
              var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
              var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
              var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
              var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
              var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
              var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
              function isValidElementType(type) {
                return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
              }
              function typeOf(object) {
                if (typeof object === "object" && object !== null) {
                  var $$typeof = object.$$typeof;
                  switch ($$typeof) {
                    case REACT_ELEMENT_TYPE:
                      var type = object.type;
                      switch (type) {
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                          return type;
                        default:
                          var $$typeofType = type && type.$$typeof;
                          switch ($$typeofType) {
                            case REACT_CONTEXT_TYPE:
                            case REACT_FORWARD_REF_TYPE:
                            case REACT_LAZY_TYPE:
                            case REACT_MEMO_TYPE:
                            case REACT_PROVIDER_TYPE:
                              return $$typeofType;
                            default:
                              return $$typeof;
                          }
                      }
                    case REACT_PORTAL_TYPE:
                      return $$typeof;
                  }
                }
                return void 0;
              }
              var AsyncMode = REACT_ASYNC_MODE_TYPE;
              var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
              var ContextConsumer = REACT_CONTEXT_TYPE;
              var ContextProvider = REACT_PROVIDER_TYPE;
              var Element2 = REACT_ELEMENT_TYPE;
              var ForwardRef = REACT_FORWARD_REF_TYPE;
              var Fragment4 = REACT_FRAGMENT_TYPE;
              var Lazy = REACT_LAZY_TYPE;
              var Memo = REACT_MEMO_TYPE;
              var Portal2 = REACT_PORTAL_TYPE;
              var Profiler = REACT_PROFILER_TYPE;
              var StrictMode = REACT_STRICT_MODE_TYPE;
              var Suspense = REACT_SUSPENSE_TYPE;
              var hasWarnedAboutDeprecatedIsAsyncMode = false;
              function isAsyncMode(object) {
                {
                  if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                    hasWarnedAboutDeprecatedIsAsyncMode = true;
                    console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
                  }
                }
                return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
              }
              function isConcurrentMode(object) {
                return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
              }
              function isContextConsumer(object) {
                return typeOf(object) === REACT_CONTEXT_TYPE;
              }
              function isContextProvider(object) {
                return typeOf(object) === REACT_PROVIDER_TYPE;
              }
              function isElement(object) {
                return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
              }
              function isForwardRef(object) {
                return typeOf(object) === REACT_FORWARD_REF_TYPE;
              }
              function isFragment(object) {
                return typeOf(object) === REACT_FRAGMENT_TYPE;
              }
              function isLazy(object) {
                return typeOf(object) === REACT_LAZY_TYPE;
              }
              function isMemo(object) {
                return typeOf(object) === REACT_MEMO_TYPE;
              }
              function isPortal(object) {
                return typeOf(object) === REACT_PORTAL_TYPE;
              }
              function isProfiler(object) {
                return typeOf(object) === REACT_PROFILER_TYPE;
              }
              function isStrictMode(object) {
                return typeOf(object) === REACT_STRICT_MODE_TYPE;
              }
              function isSuspense(object) {
                return typeOf(object) === REACT_SUSPENSE_TYPE;
              }
              exports2.AsyncMode = AsyncMode;
              exports2.ConcurrentMode = ConcurrentMode;
              exports2.ContextConsumer = ContextConsumer;
              exports2.ContextProvider = ContextProvider;
              exports2.Element = Element2;
              exports2.ForwardRef = ForwardRef;
              exports2.Fragment = Fragment4;
              exports2.Lazy = Lazy;
              exports2.Memo = Memo;
              exports2.Portal = Portal2;
              exports2.Profiler = Profiler;
              exports2.StrictMode = StrictMode;
              exports2.Suspense = Suspense;
              exports2.isAsyncMode = isAsyncMode;
              exports2.isConcurrentMode = isConcurrentMode;
              exports2.isContextConsumer = isContextConsumer;
              exports2.isContextProvider = isContextProvider;
              exports2.isElement = isElement;
              exports2.isForwardRef = isForwardRef;
              exports2.isFragment = isFragment;
              exports2.isLazy = isLazy;
              exports2.isMemo = isMemo;
              exports2.isPortal = isPortal;
              exports2.isProfiler = isProfiler;
              exports2.isStrictMode = isStrictMode;
              exports2.isSuspense = isSuspense;
              exports2.isValidElementType = isValidElementType;
              exports2.typeOf = typeOf;
            })();
          }
        }
      });
      var require_react_is2 = __commonJS3({
        "../../node_modules/react-is/index.js"(exports2, module2) {
          "use strict";
          if (false) {
            module2.exports = null;
          } else {
            module2.exports = require_react_is_development2();
          }
        }
      });
      var require_object_assign2 = __commonJS3({
        "../../node_modules/object-assign/index.js"(exports2, module2) {
          "use strict";
          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var hasOwnProperty13 = Object.prototype.hasOwnProperty;
          var propIsEnumerable = Object.prototype.propertyIsEnumerable;
          function toObject(val) {
            if (val === null || val === void 0) {
              throw new TypeError("Object.assign cannot be called with null or undefined");
            }
            return Object(val);
          }
          function shouldUseNative() {
            try {
              if (!Object.assign) {
                return false;
              }
              var test1 = new String("abc");
              test1[5] = "de";
              if (Object.getOwnPropertyNames(test1)[0] === "5") {
                return false;
              }
              var test2 = {};
              for (var i2 = 0; i2 < 10; i2++) {
                test2["_" + String.fromCharCode(i2)] = i2;
              }
              var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
                return test2[n2];
              });
              if (order2.join("") !== "0123456789") {
                return false;
              }
              var test3 = {};
              "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                test3[letter] = letter;
              });
              if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
                return false;
              }
              return true;
            } catch (err) {
              return false;
            }
          }
          module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
            var from;
            var to = toObject(target);
            var symbols;
            for (var s2 = 1; s2 < arguments.length; s2++) {
              from = Object(arguments[s2]);
              for (var key in from) {
                if (hasOwnProperty13.call(from, key)) {
                  to[key] = from[key];
                }
              }
              if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i2 = 0; i2 < symbols.length; i2++) {
                  if (propIsEnumerable.call(from, symbols[i2])) {
                    to[symbols[i2]] = from[symbols[i2]];
                  }
                }
              }
            }
            return to;
          };
        }
      });
      var require_ReactPropTypesSecret = __commonJS3({
        "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
          "use strict";
          var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
          module2.exports = ReactPropTypesSecret;
        }
      });
      var require_has3 = __commonJS3({
        "../../node_modules/prop-types/lib/has.js"(exports2, module2) {
          module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
        }
      });
      var require_checkPropTypes = __commonJS3({
        "../../node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
          "use strict";
          var printWarning = function() {
          };
          if (true) {
            ReactPropTypesSecret = require_ReactPropTypesSecret();
            loggedTypeFailures = {};
            has = require_has3();
            printWarning = function(text) {
              var message = "Warning: " + text;
              if (typeof console !== "undefined") {
                console.error(message);
              }
              try {
                throw new Error(message);
              } catch (x2) {
              }
            };
          }
          var ReactPropTypesSecret;
          var loggedTypeFailures;
          var has;
          function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
            if (true) {
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                  } catch (ex) {
                    error = ex;
                  }
                  if (error && !(error instanceof Error)) {
                    printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
                  }
                  if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                    loggedTypeFailures[error.message] = true;
                    var stack = getStack ? getStack() : "";
                    printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
                  }
                }
              }
            }
          }
          checkPropTypes.resetWarningCache = function() {
            if (true) {
              loggedTypeFailures = {};
            }
          };
          module2.exports = checkPropTypes;
        }
      });
      var require_factoryWithTypeCheckers = __commonJS3({
        "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
          "use strict";
          var ReactIs = require_react_is2();
          var assign = require_object_assign2();
          var ReactPropTypesSecret = require_ReactPropTypesSecret();
          var has = require_has3();
          var checkPropTypes = require_checkPropTypes();
          var printWarning = function() {
          };
          if (true) {
            printWarning = function(text) {
              var message = "Warning: " + text;
              if (typeof console !== "undefined") {
                console.error(message);
              }
              try {
                throw new Error(message);
              } catch (x2) {
              }
            };
          }
          function emptyFunctionThatReturnsNull() {
            return null;
          }
          module2.exports = function(isValidElement22, throwOnDirectAccess) {
            var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = "@@iterator";
            function getIteratorFn(maybeIterable) {
              var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
              if (typeof iteratorFn === "function") {
                return iteratorFn;
              }
            }
            var ANONYMOUS = "<<anonymous>>";
            var ReactPropTypes = {
              array: createPrimitiveTypeChecker("array"),
              bigint: createPrimitiveTypeChecker("bigint"),
              bool: createPrimitiveTypeChecker("boolean"),
              func: createPrimitiveTypeChecker("function"),
              number: createPrimitiveTypeChecker("number"),
              object: createPrimitiveTypeChecker("object"),
              string: createPrimitiveTypeChecker("string"),
              symbol: createPrimitiveTypeChecker("symbol"),
              any: createAnyTypeChecker(),
              arrayOf: createArrayOfTypeChecker,
              element: createElementTypeChecker(),
              elementType: createElementTypeTypeChecker(),
              instanceOf: createInstanceTypeChecker,
              node: createNodeChecker(),
              objectOf: createObjectOfTypeChecker,
              oneOf: createEnumTypeChecker,
              oneOfType: createUnionTypeChecker,
              shape: createShapeTypeChecker,
              exact: createStrictShapeTypeChecker
            };
            function is(x2, y2) {
              if (x2 === y2) {
                return x2 !== 0 || 1 / x2 === 1 / y2;
              } else {
                return x2 !== x2 && y2 !== y2;
              }
            }
            function PropTypeError(message, data) {
              this.message = message;
              this.data = data && typeof data === "object" ? data : {};
              this.stack = "";
            }
            PropTypeError.prototype = Error.prototype;
            function createChainableTypeChecker(validate) {
              if (true) {
                var manualPropTypeCallCache = {};
                var manualPropTypeWarningCount = 0;
              }
              function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;
                if (secret !== ReactPropTypesSecret) {
                  if (throwOnDirectAccess) {
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = "Invariant Violation";
                    throw err;
                  } else if (typeof console !== "undefined") {
                    var cacheKey = componentName + ":" + propName;
                    if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                      printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                      manualPropTypeCallCache[cacheKey] = true;
                      manualPropTypeWarningCount++;
                    }
                  }
                }
                if (props[propName] == null) {
                  if (isRequired) {
                    if (props[propName] === null) {
                      return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                    }
                    return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                  }
                  return null;
                } else {
                  return validate(props, propName, componentName, location, propFullName);
                }
              }
              var chainedCheckType = checkType.bind(null, false);
              chainedCheckType.isRequired = checkType.bind(null, true);
              return chainedCheckType;
            }
            function createPrimitiveTypeChecker(expectedType) {
              function validate(props, propName, componentName, location, propFullName, secret) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                  var preciseType = getPreciseType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createAnyTypeChecker() {
              return createChainableTypeChecker(emptyFunctionThatReturnsNull);
            }
            function createArrayOfTypeChecker(typeChecker) {
              function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== "function") {
                  return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                  var propType = getPropType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
                }
                for (var i2 = 0; i2 < propValue.length; i2++) {
                  var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
                  if (error instanceof Error) {
                    return error;
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createElementTypeChecker() {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                if (!isValidElement22(propValue)) {
                  var propType = getPropType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createElementTypeTypeChecker() {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                if (!ReactIs.isValidElementType(propValue)) {
                  var propType = getPropType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createInstanceTypeChecker(expectedClass) {
              function validate(props, propName, componentName, location, propFullName) {
                if (!(props[propName] instanceof expectedClass)) {
                  var expectedClassName = expectedClass.name || ANONYMOUS;
                  var actualClassName = getClassName(props[propName]);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createEnumTypeChecker(expectedValues) {
              if (!Array.isArray(expectedValues)) {
                if (true) {
                  if (arguments.length > 1) {
                    printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
                  } else {
                    printWarning("Invalid argument supplied to oneOf, expected an array.");
                  }
                }
                return emptyFunctionThatReturnsNull;
              }
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                for (var i2 = 0; i2 < expectedValues.length; i2++) {
                  if (is(propValue, expectedValues[i2])) {
                    return null;
                  }
                }
                var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                  var type = getPreciseType(value);
                  if (type === "symbol") {
                    return String(value);
                  }
                  return value;
                });
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
              }
              return createChainableTypeChecker(validate);
            }
            function createObjectOfTypeChecker(typeChecker) {
              function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== "function") {
                  return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
                }
                for (var key in propValue) {
                  if (has(propValue, key)) {
                    var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                    if (error instanceof Error) {
                      return error;
                    }
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createUnionTypeChecker(arrayOfTypeCheckers) {
              if (!Array.isArray(arrayOfTypeCheckers)) {
                true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
                return emptyFunctionThatReturnsNull;
              }
              for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
                var checker = arrayOfTypeCheckers[i2];
                if (typeof checker !== "function") {
                  printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
                  return emptyFunctionThatReturnsNull;
                }
              }
              function validate(props, propName, componentName, location, propFullName) {
                var expectedTypes = [];
                for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
                  var checker2 = arrayOfTypeCheckers[i3];
                  var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                  if (checkerResult == null) {
                    return null;
                  }
                  if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                    expectedTypes.push(checkerResult.data.expectedType);
                  }
                }
                var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
              }
              return createChainableTypeChecker(validate);
            }
            function createNodeChecker() {
              function validate(props, propName, componentName, location, propFullName) {
                if (!isNode(props[propName])) {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function invalidValidatorError(componentName, location, propFullName, key, type) {
              return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
            }
            function createShapeTypeChecker(shapeTypes) {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                }
                for (var key in shapeTypes) {
                  var checker = shapeTypes[key];
                  if (typeof checker !== "function") {
                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                  }
                  var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                  if (error) {
                    return error;
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createStrictShapeTypeChecker(shapeTypes) {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                }
                var allKeys = assign({}, props[propName], shapeTypes);
                for (var key in allKeys) {
                  var checker = shapeTypes[key];
                  if (has(shapeTypes, key) && typeof checker !== "function") {
                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                  }
                  if (!checker) {
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
                  }
                  var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                  if (error) {
                    return error;
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function isNode(propValue) {
              switch (typeof propValue) {
                case "number":
                case "string":
                case "undefined":
                  return true;
                case "boolean":
                  return !propValue;
                case "object":
                  if (Array.isArray(propValue)) {
                    return propValue.every(isNode);
                  }
                  if (propValue === null || isValidElement22(propValue)) {
                    return true;
                  }
                  var iteratorFn = getIteratorFn(propValue);
                  if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) {
                      while (!(step = iterator.next()).done) {
                        if (!isNode(step.value)) {
                          return false;
                        }
                      }
                    } else {
                      while (!(step = iterator.next()).done) {
                        var entry = step.value;
                        if (entry) {
                          if (!isNode(entry[1])) {
                            return false;
                          }
                        }
                      }
                    }
                  } else {
                    return false;
                  }
                  return true;
                default:
                  return false;
              }
            }
            function isSymbol2(propType, propValue) {
              if (propType === "symbol") {
                return true;
              }
              if (!propValue) {
                return false;
              }
              if (propValue["@@toStringTag"] === "Symbol") {
                return true;
              }
              if (typeof Symbol === "function" && propValue instanceof Symbol) {
                return true;
              }
              return false;
            }
            function getPropType(propValue) {
              var propType = typeof propValue;
              if (Array.isArray(propValue)) {
                return "array";
              }
              if (propValue instanceof RegExp) {
                return "object";
              }
              if (isSymbol2(propType, propValue)) {
                return "symbol";
              }
              return propType;
            }
            function getPreciseType(propValue) {
              if (typeof propValue === "undefined" || propValue === null) {
                return "" + propValue;
              }
              var propType = getPropType(propValue);
              if (propType === "object") {
                if (propValue instanceof Date) {
                  return "date";
                } else if (propValue instanceof RegExp) {
                  return "regexp";
                }
              }
              return propType;
            }
            function getPostfixForTypeWarning(value) {
              var type = getPreciseType(value);
              switch (type) {
                case "array":
                case "object":
                  return "an " + type;
                case "boolean":
                case "date":
                case "regexp":
                  return "a " + type;
                default:
                  return type;
              }
            }
            function getClassName(propValue) {
              if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
              }
              return propValue.constructor.name;
            }
            ReactPropTypes.checkPropTypes = checkPropTypes;
            ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
            ReactPropTypes.PropTypes = ReactPropTypes;
            return ReactPropTypes;
          };
        }
      });
      var require_prop_types = __commonJS3({
        "../../node_modules/prop-types/index.js"(exports2, module2) {
          if (true) {
            ReactIs = require_react_is2();
            throwOnDirectAccess = true;
            module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
          } else {
            module2.exports = null();
          }
          var ReactIs;
          var throwOnDirectAccess;
        }
      });
      var require_tinycolor = __commonJS3({
        "../../node_modules/tinycolor2/tinycolor.js"(exports2, module2) {
          (function(Math2) {
            var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
            function tinycolor2(color3, opts) {
              color3 = color3 ? color3 : "";
              opts = opts || {};
              if (color3 instanceof tinycolor2) {
                return color3;
              }
              if (!(this instanceof tinycolor2)) {
                return new tinycolor2(color3, opts);
              }
              var rgb = inputToRGB2(color3);
              this._originalInput = color3, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
              this._gradientType = opts.gradientType;
              if (this._r < 1) {
                this._r = mathRound(this._r);
              }
              if (this._g < 1) {
                this._g = mathRound(this._g);
              }
              if (this._b < 1) {
                this._b = mathRound(this._b);
              }
              this._ok = rgb.ok;
              this._tc_id = tinyCounter++;
            }
            tinycolor2.prototype = {
              isDark: function() {
                return this.getBrightness() < 128;
              },
              isLight: function() {
                return !this.isDark();
              },
              isValid: function() {
                return this._ok;
              },
              getOriginalInput: function() {
                return this._originalInput;
              },
              getFormat: function() {
                return this._format;
              },
              getAlpha: function() {
                return this._a;
              },
              getBrightness: function() {
                var rgb = this.toRgb();
                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
              },
              getLuminance: function() {
                var rgb = this.toRgb();
                var RsRGB, GsRGB, BsRGB, R2, G2, B2;
                RsRGB = rgb.r / 255;
                GsRGB = rgb.g / 255;
                BsRGB = rgb.b / 255;
                if (RsRGB <= 0.03928) {
                  R2 = RsRGB / 12.92;
                } else {
                  R2 = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
                }
                if (GsRGB <= 0.03928) {
                  G2 = GsRGB / 12.92;
                } else {
                  G2 = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
                }
                if (BsRGB <= 0.03928) {
                  B2 = BsRGB / 12.92;
                } else {
                  B2 = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
                }
                return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
              },
              setAlpha: function(value) {
                this._a = boundAlpha2(value);
                this._roundA = mathRound(100 * this._a) / 100;
                return this;
              },
              toHsv: function() {
                var hsv = rgbToHsv2(this._r, this._g, this._b);
                return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
              },
              toHsvString: function() {
                var hsv = rgbToHsv2(this._r, this._g, this._b);
                var h2 = mathRound(hsv.h * 360), s2 = mathRound(hsv.s * 100), v2 = mathRound(hsv.v * 100);
                return this._a == 1 ? "hsv(" + h2 + ", " + s2 + "%, " + v2 + "%)" : "hsva(" + h2 + ", " + s2 + "%, " + v2 + "%, " + this._roundA + ")";
              },
              toHsl: function() {
                var hsl = rgbToHsl2(this._r, this._g, this._b);
                return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
              },
              toHslString: function() {
                var hsl = rgbToHsl2(this._r, this._g, this._b);
                var h2 = mathRound(hsl.h * 360), s2 = mathRound(hsl.s * 100), l2 = mathRound(hsl.l * 100);
                return this._a == 1 ? "hsl(" + h2 + ", " + s2 + "%, " + l2 + "%)" : "hsla(" + h2 + ", " + s2 + "%, " + l2 + "%, " + this._roundA + ")";
              },
              toHex: function(allow3Char) {
                return rgbToHex2(this._r, this._g, this._b, allow3Char);
              },
              toHexString: function(allow3Char) {
                return "#" + this.toHex(allow3Char);
              },
              toHex8: function(allow4Char) {
                return rgbaToHex2(this._r, this._g, this._b, this._a, allow4Char);
              },
              toHex8String: function(allow4Char) {
                return "#" + this.toHex8(allow4Char);
              },
              toRgb: function() {
                return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
              },
              toRgbString: function() {
                return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
              },
              toPercentageRgb: function() {
                return { r: mathRound(bound012(this._r, 255) * 100) + "%", g: mathRound(bound012(this._g, 255) * 100) + "%", b: mathRound(bound012(this._b, 255) * 100) + "%", a: this._a };
              },
              toPercentageRgbString: function() {
                return this._a == 1 ? "rgb(" + mathRound(bound012(this._r, 255) * 100) + "%, " + mathRound(bound012(this._g, 255) * 100) + "%, " + mathRound(bound012(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound012(this._r, 255) * 100) + "%, " + mathRound(bound012(this._g, 255) * 100) + "%, " + mathRound(bound012(this._b, 255) * 100) + "%, " + this._roundA + ")";
              },
              toName: function() {
                if (this._a === 0) {
                  return "transparent";
                }
                if (this._a < 1) {
                  return false;
                }
                return hexNames[rgbToHex2(this._r, this._g, this._b, true)] || false;
              },
              toFilter: function(secondColor) {
                var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
                var secondHex8String = hex8String;
                var gradientType = this._gradientType ? "GradientType = 1, " : "";
                if (secondColor) {
                  var s2 = tinycolor2(secondColor);
                  secondHex8String = "#" + rgbaToArgbHex(s2._r, s2._g, s2._b, s2._a);
                }
                return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
              },
              toString: function(format) {
                var formatSet = !!format;
                format = format || this._format;
                var formattedString = false;
                var hasAlpha = this._a < 1 && this._a >= 0;
                var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
                if (needsAlphaFormat) {
                  if (format === "name" && this._a === 0) {
                    return this.toName();
                  }
                  return this.toRgbString();
                }
                if (format === "rgb") {
                  formattedString = this.toRgbString();
                }
                if (format === "prgb") {
                  formattedString = this.toPercentageRgbString();
                }
                if (format === "hex" || format === "hex6") {
                  formattedString = this.toHexString();
                }
                if (format === "hex3") {
                  formattedString = this.toHexString(true);
                }
                if (format === "hex4") {
                  formattedString = this.toHex8String(true);
                }
                if (format === "hex8") {
                  formattedString = this.toHex8String();
                }
                if (format === "name") {
                  formattedString = this.toName();
                }
                if (format === "hsl") {
                  formattedString = this.toHslString();
                }
                if (format === "hsv") {
                  formattedString = this.toHsvString();
                }
                return formattedString || this.toHexString();
              },
              clone: function() {
                return tinycolor2(this.toString());
              },
              _applyModification: function(fn, args) {
                var color3 = fn.apply(null, [this].concat([].slice.call(args)));
                this._r = color3._r;
                this._g = color3._g;
                this._b = color3._b;
                this.setAlpha(color3._a);
                return this;
              },
              lighten: function() {
                return this._applyModification(lighten, arguments);
              },
              brighten: function() {
                return this._applyModification(brighten, arguments);
              },
              darken: function() {
                return this._applyModification(darken, arguments);
              },
              desaturate: function() {
                return this._applyModification(desaturate, arguments);
              },
              saturate: function() {
                return this._applyModification(saturate, arguments);
              },
              greyscale: function() {
                return this._applyModification(greyscale, arguments);
              },
              spin: function() {
                return this._applyModification(spin2, arguments);
              },
              _applyCombination: function(fn, args) {
                return fn.apply(null, [this].concat([].slice.call(args)));
              },
              analogous: function() {
                return this._applyCombination(analogous, arguments);
              },
              complement: function() {
                return this._applyCombination(complement, arguments);
              },
              monochromatic: function() {
                return this._applyCombination(monochromatic, arguments);
              },
              splitcomplement: function() {
                return this._applyCombination(splitcomplement, arguments);
              },
              triad: function() {
                return this._applyCombination(triad, arguments);
              },
              tetrad: function() {
                return this._applyCombination(tetrad, arguments);
              }
            };
            tinycolor2.fromRatio = function(color3, opts) {
              if (typeof color3 == "object") {
                var newColor = {};
                for (var i2 in color3) {
                  if (color3.hasOwnProperty(i2)) {
                    if (i2 === "a") {
                      newColor[i2] = color3[i2];
                    } else {
                      newColor[i2] = convertToPercentage2(color3[i2]);
                    }
                  }
                }
                color3 = newColor;
              }
              return tinycolor2(color3, opts);
            };
            function inputToRGB2(color3) {
              var rgb = { r: 0, g: 0, b: 0 };
              var a2 = 1;
              var s2 = null;
              var v2 = null;
              var l2 = null;
              var ok = false;
              var format = false;
              if (typeof color3 == "string") {
                color3 = stringInputToObject2(color3);
              }
              if (typeof color3 == "object") {
                if (isValidCSSUnit2(color3.r) && isValidCSSUnit2(color3.g) && isValidCSSUnit2(color3.b)) {
                  rgb = rgbToRgb2(color3.r, color3.g, color3.b);
                  ok = true;
                  format = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
                } else if (isValidCSSUnit2(color3.h) && isValidCSSUnit2(color3.s) && isValidCSSUnit2(color3.v)) {
                  s2 = convertToPercentage2(color3.s);
                  v2 = convertToPercentage2(color3.v);
                  rgb = hsvToRgb2(color3.h, s2, v2);
                  ok = true;
                  format = "hsv";
                } else if (isValidCSSUnit2(color3.h) && isValidCSSUnit2(color3.s) && isValidCSSUnit2(color3.l)) {
                  s2 = convertToPercentage2(color3.s);
                  l2 = convertToPercentage2(color3.l);
                  rgb = hslToRgb2(color3.h, s2, l2);
                  ok = true;
                  format = "hsl";
                }
                if (color3.hasOwnProperty("a")) {
                  a2 = color3.a;
                }
              }
              a2 = boundAlpha2(a2);
              return {
                ok,
                format: color3.format || format,
                r: mathMin(255, mathMax(rgb.r, 0)),
                g: mathMin(255, mathMax(rgb.g, 0)),
                b: mathMin(255, mathMax(rgb.b, 0)),
                a: a2
              };
            }
            function rgbToRgb2(r2, g2, b22) {
              return {
                r: bound012(r2, 255) * 255,
                g: bound012(g2, 255) * 255,
                b: bound012(b22, 255) * 255
              };
            }
            function rgbToHsl2(r2, g2, b22) {
              r2 = bound012(r2, 255);
              g2 = bound012(g2, 255);
              b22 = bound012(b22, 255);
              var max = mathMax(r2, g2, b22), min = mathMin(r2, g2, b22);
              var h2, s2, l2 = (max + min) / 2;
              if (max == min) {
                h2 = s2 = 0;
              } else {
                var d2 = max - min;
                s2 = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
                switch (max) {
                  case r2:
                    h2 = (g2 - b22) / d2 + (g2 < b22 ? 6 : 0);
                    break;
                  case g2:
                    h2 = (b22 - r2) / d2 + 2;
                    break;
                  case b22:
                    h2 = (r2 - g2) / d2 + 4;
                    break;
                }
                h2 /= 6;
              }
              return { h: h2, s: s2, l: l2 };
            }
            function hslToRgb2(h2, s2, l2) {
              var r2, g2, b22;
              h2 = bound012(h2, 360);
              s2 = bound012(s2, 100);
              l2 = bound012(l2, 100);
              function hue2rgb2(p2, q3, t2) {
                if (t2 < 0)
                  t2 += 1;
                if (t2 > 1)
                  t2 -= 1;
                if (t2 < 1 / 6)
                  return p2 + (q3 - p2) * 6 * t2;
                if (t2 < 1 / 2)
                  return q3;
                if (t2 < 2 / 3)
                  return p2 + (q3 - p2) * (2 / 3 - t2) * 6;
                return p2;
              }
              if (s2 === 0) {
                r2 = g2 = b22 = l2;
              } else {
                var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
                var p = 2 * l2 - q2;
                r2 = hue2rgb2(p, q2, h2 + 1 / 3);
                g2 = hue2rgb2(p, q2, h2);
                b22 = hue2rgb2(p, q2, h2 - 1 / 3);
              }
              return { r: r2 * 255, g: g2 * 255, b: b22 * 255 };
            }
            function rgbToHsv2(r2, g2, b22) {
              r2 = bound012(r2, 255);
              g2 = bound012(g2, 255);
              b22 = bound012(b22, 255);
              var max = mathMax(r2, g2, b22), min = mathMin(r2, g2, b22);
              var h2, s2, v2 = max;
              var d2 = max - min;
              s2 = max === 0 ? 0 : d2 / max;
              if (max == min) {
                h2 = 0;
              } else {
                switch (max) {
                  case r2:
                    h2 = (g2 - b22) / d2 + (g2 < b22 ? 6 : 0);
                    break;
                  case g2:
                    h2 = (b22 - r2) / d2 + 2;
                    break;
                  case b22:
                    h2 = (r2 - g2) / d2 + 4;
                    break;
                }
                h2 /= 6;
              }
              return { h: h2, s: s2, v: v2 };
            }
            function hsvToRgb2(h2, s2, v2) {
              h2 = bound012(h2, 360) * 6;
              s2 = bound012(s2, 100);
              v2 = bound012(v2, 100);
              var i2 = Math2.floor(h2), f = h2 - i2, p = v2 * (1 - s2), q2 = v2 * (1 - f * s2), t2 = v2 * (1 - (1 - f) * s2), mod = i2 % 6, r2 = [v2, q2, p, p, t2, v2][mod], g2 = [t2, v2, v2, q2, p, p][mod], b22 = [p, p, t2, v2, v2, q2][mod];
              return { r: r2 * 255, g: g2 * 255, b: b22 * 255 };
            }
            function rgbToHex2(r2, g2, b22, allow3Char) {
              var hex2 = [
                pad22(mathRound(r2).toString(16)),
                pad22(mathRound(g2).toString(16)),
                pad22(mathRound(b22).toString(16))
              ];
              if (allow3Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1)) {
                return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
              }
              return hex2.join("");
            }
            function rgbaToHex2(r2, g2, b22, a2, allow4Char) {
              var hex2 = [
                pad22(mathRound(r2).toString(16)),
                pad22(mathRound(g2).toString(16)),
                pad22(mathRound(b22).toString(16)),
                pad22(convertDecimalToHex2(a2))
              ];
              if (allow4Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1) && hex2[3].charAt(0) == hex2[3].charAt(1)) {
                return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
              }
              return hex2.join("");
            }
            function rgbaToArgbHex(r2, g2, b22, a2) {
              var hex2 = [
                pad22(convertDecimalToHex2(a2)),
                pad22(mathRound(r2).toString(16)),
                pad22(mathRound(g2).toString(16)),
                pad22(mathRound(b22).toString(16))
              ];
              return hex2.join("");
            }
            tinycolor2.equals = function(color1, color22) {
              if (!color1 || !color22) {
                return false;
              }
              return tinycolor2(color1).toRgbString() == tinycolor2(color22).toRgbString();
            };
            tinycolor2.random = function() {
              return tinycolor2.fromRatio({
                r: mathRandom(),
                g: mathRandom(),
                b: mathRandom()
              });
            };
            function desaturate(color3, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color3).toHsl();
              hsl.s -= amount / 100;
              hsl.s = clamp012(hsl.s);
              return tinycolor2(hsl);
            }
            function saturate(color3, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color3).toHsl();
              hsl.s += amount / 100;
              hsl.s = clamp012(hsl.s);
              return tinycolor2(hsl);
            }
            function greyscale(color3) {
              return tinycolor2(color3).desaturate(100);
            }
            function lighten(color3, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color3).toHsl();
              hsl.l += amount / 100;
              hsl.l = clamp012(hsl.l);
              return tinycolor2(hsl);
            }
            function brighten(color3, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var rgb = tinycolor2(color3).toRgb();
              rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
              rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
              rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
              return tinycolor2(rgb);
            }
            function darken(color3, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color3).toHsl();
              hsl.l -= amount / 100;
              hsl.l = clamp012(hsl.l);
              return tinycolor2(hsl);
            }
            function spin2(color3, amount) {
              var hsl = tinycolor2(color3).toHsl();
              var hue = (hsl.h + amount) % 360;
              hsl.h = hue < 0 ? 360 + hue : hue;
              return tinycolor2(hsl);
            }
            function complement(color3) {
              var hsl = tinycolor2(color3).toHsl();
              hsl.h = (hsl.h + 180) % 360;
              return tinycolor2(hsl);
            }
            function triad(color3) {
              var hsl = tinycolor2(color3).toHsl();
              var h2 = hsl.h;
              return [
                tinycolor2(color3),
                tinycolor2({ h: (h2 + 120) % 360, s: hsl.s, l: hsl.l }),
                tinycolor2({ h: (h2 + 240) % 360, s: hsl.s, l: hsl.l })
              ];
            }
            function tetrad(color3) {
              var hsl = tinycolor2(color3).toHsl();
              var h2 = hsl.h;
              return [
                tinycolor2(color3),
                tinycolor2({ h: (h2 + 90) % 360, s: hsl.s, l: hsl.l }),
                tinycolor2({ h: (h2 + 180) % 360, s: hsl.s, l: hsl.l }),
                tinycolor2({ h: (h2 + 270) % 360, s: hsl.s, l: hsl.l })
              ];
            }
            function splitcomplement(color3) {
              var hsl = tinycolor2(color3).toHsl();
              var h2 = hsl.h;
              return [
                tinycolor2(color3),
                tinycolor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
                tinycolor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
              ];
            }
            function analogous(color3, results, slices) {
              results = results || 6;
              slices = slices || 30;
              var hsl = tinycolor2(color3).toHsl();
              var part = 360 / slices;
              var ret = [tinycolor2(color3)];
              for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
                hsl.h = (hsl.h + part) % 360;
                ret.push(tinycolor2(hsl));
              }
              return ret;
            }
            function monochromatic(color3, results) {
              results = results || 6;
              var hsv = tinycolor2(color3).toHsv();
              var h2 = hsv.h, s2 = hsv.s, v2 = hsv.v;
              var ret = [];
              var modification = 1 / results;
              while (results--) {
                ret.push(tinycolor2({ h: h2, s: s2, v: v2 }));
                v2 = (v2 + modification) % 1;
              }
              return ret;
            }
            tinycolor2.mix = function(color1, color22, amount) {
              amount = amount === 0 ? 0 : amount || 50;
              var rgb1 = tinycolor2(color1).toRgb();
              var rgb2 = tinycolor2(color22).toRgb();
              var p = amount / 100;
              var rgba2 = {
                r: (rgb2.r - rgb1.r) * p + rgb1.r,
                g: (rgb2.g - rgb1.g) * p + rgb1.g,
                b: (rgb2.b - rgb1.b) * p + rgb1.b,
                a: (rgb2.a - rgb1.a) * p + rgb1.a
              };
              return tinycolor2(rgba2);
            };
            tinycolor2.readability = function(color1, color22) {
              var c1 = tinycolor2(color1);
              var c2 = tinycolor2(color22);
              return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
            };
            tinycolor2.isReadable = function(color1, color22, wcag2) {
              var readability2 = tinycolor2.readability(color1, color22);
              var wcag2Parms, out;
              out = false;
              wcag2Parms = validateWCAG2Parms(wcag2);
              switch (wcag2Parms.level + wcag2Parms.size) {
                case "AAsmall":
                case "AAAlarge":
                  out = readability2 >= 4.5;
                  break;
                case "AAlarge":
                  out = readability2 >= 3;
                  break;
                case "AAAsmall":
                  out = readability2 >= 7;
                  break;
              }
              return out;
            };
            tinycolor2.mostReadable = function(baseColor, colorList, args) {
              var bestColor = null;
              var bestScore = 0;
              var readability2;
              var includeFallbackColors, level, size2;
              args = args || {};
              includeFallbackColors = args.includeFallbackColors;
              level = args.level;
              size2 = args.size;
              for (var i2 = 0; i2 < colorList.length; i2++) {
                readability2 = tinycolor2.readability(baseColor, colorList[i2]);
                if (readability2 > bestScore) {
                  bestScore = readability2;
                  bestColor = tinycolor2(colorList[i2]);
                }
              }
              if (tinycolor2.isReadable(baseColor, bestColor, { "level": level, "size": size2 }) || !includeFallbackColors) {
                return bestColor;
              } else {
                args.includeFallbackColors = false;
                return tinycolor2.mostReadable(baseColor, ["#fff", "#000"], args);
              }
            };
            var names3 = tinycolor2.names = {
              aliceblue: "f0f8ff",
              antiquewhite: "faebd7",
              aqua: "0ff",
              aquamarine: "7fffd4",
              azure: "f0ffff",
              beige: "f5f5dc",
              bisque: "ffe4c4",
              black: "000",
              blanchedalmond: "ffebcd",
              blue: "00f",
              blueviolet: "8a2be2",
              brown: "a52a2a",
              burlywood: "deb887",
              burntsienna: "ea7e5d",
              cadetblue: "5f9ea0",
              chartreuse: "7fff00",
              chocolate: "d2691e",
              coral: "ff7f50",
              cornflowerblue: "6495ed",
              cornsilk: "fff8dc",
              crimson: "dc143c",
              cyan: "0ff",
              darkblue: "00008b",
              darkcyan: "008b8b",
              darkgoldenrod: "b8860b",
              darkgray: "a9a9a9",
              darkgreen: "006400",
              darkgrey: "a9a9a9",
              darkkhaki: "bdb76b",
              darkmagenta: "8b008b",
              darkolivegreen: "556b2f",
              darkorange: "ff8c00",
              darkorchid: "9932cc",
              darkred: "8b0000",
              darksalmon: "e9967a",
              darkseagreen: "8fbc8f",
              darkslateblue: "483d8b",
              darkslategray: "2f4f4f",
              darkslategrey: "2f4f4f",
              darkturquoise: "00ced1",
              darkviolet: "9400d3",
              deeppink: "ff1493",
              deepskyblue: "00bfff",
              dimgray: "696969",
              dimgrey: "696969",
              dodgerblue: "1e90ff",
              firebrick: "b22222",
              floralwhite: "fffaf0",
              forestgreen: "228b22",
              fuchsia: "f0f",
              gainsboro: "dcdcdc",
              ghostwhite: "f8f8ff",
              gold: "ffd700",
              goldenrod: "daa520",
              gray: "808080",
              green: "008000",
              greenyellow: "adff2f",
              grey: "808080",
              honeydew: "f0fff0",
              hotpink: "ff69b4",
              indianred: "cd5c5c",
              indigo: "4b0082",
              ivory: "fffff0",
              khaki: "f0e68c",
              lavender: "e6e6fa",
              lavenderblush: "fff0f5",
              lawngreen: "7cfc00",
              lemonchiffon: "fffacd",
              lightblue: "add8e6",
              lightcoral: "f08080",
              lightcyan: "e0ffff",
              lightgoldenrodyellow: "fafad2",
              lightgray: "d3d3d3",
              lightgreen: "90ee90",
              lightgrey: "d3d3d3",
              lightpink: "ffb6c1",
              lightsalmon: "ffa07a",
              lightseagreen: "20b2aa",
              lightskyblue: "87cefa",
              lightslategray: "789",
              lightslategrey: "789",
              lightsteelblue: "b0c4de",
              lightyellow: "ffffe0",
              lime: "0f0",
              limegreen: "32cd32",
              linen: "faf0e6",
              magenta: "f0f",
              maroon: "800000",
              mediumaquamarine: "66cdaa",
              mediumblue: "0000cd",
              mediumorchid: "ba55d3",
              mediumpurple: "9370db",
              mediumseagreen: "3cb371",
              mediumslateblue: "7b68ee",
              mediumspringgreen: "00fa9a",
              mediumturquoise: "48d1cc",
              mediumvioletred: "c71585",
              midnightblue: "191970",
              mintcream: "f5fffa",
              mistyrose: "ffe4e1",
              moccasin: "ffe4b5",
              navajowhite: "ffdead",
              navy: "000080",
              oldlace: "fdf5e6",
              olive: "808000",
              olivedrab: "6b8e23",
              orange: "ffa500",
              orangered: "ff4500",
              orchid: "da70d6",
              palegoldenrod: "eee8aa",
              palegreen: "98fb98",
              paleturquoise: "afeeee",
              palevioletred: "db7093",
              papayawhip: "ffefd5",
              peachpuff: "ffdab9",
              peru: "cd853f",
              pink: "ffc0cb",
              plum: "dda0dd",
              powderblue: "b0e0e6",
              purple: "800080",
              rebeccapurple: "663399",
              red: "f00",
              rosybrown: "bc8f8f",
              royalblue: "4169e1",
              saddlebrown: "8b4513",
              salmon: "fa8072",
              sandybrown: "f4a460",
              seagreen: "2e8b57",
              seashell: "fff5ee",
              sienna: "a0522d",
              silver: "c0c0c0",
              skyblue: "87ceeb",
              slateblue: "6a5acd",
              slategray: "708090",
              slategrey: "708090",
              snow: "fffafa",
              springgreen: "00ff7f",
              steelblue: "4682b4",
              tan: "d2b48c",
              teal: "008080",
              thistle: "d8bfd8",
              tomato: "ff6347",
              turquoise: "40e0d0",
              violet: "ee82ee",
              wheat: "f5deb3",
              white: "fff",
              whitesmoke: "f5f5f5",
              yellow: "ff0",
              yellowgreen: "9acd32"
            };
            var hexNames = tinycolor2.hexNames = flip(names3);
            function flip(o2) {
              var flipped = {};
              for (var i2 in o2) {
                if (o2.hasOwnProperty(i2)) {
                  flipped[o2[i2]] = i2;
                }
              }
              return flipped;
            }
            function boundAlpha2(a2) {
              a2 = parseFloat(a2);
              if (isNaN(a2) || a2 < 0 || a2 > 1) {
                a2 = 1;
              }
              return a2;
            }
            function bound012(n2, max) {
              if (isOnePointZero2(n2)) {
                n2 = "100%";
              }
              var processPercent = isPercentage2(n2);
              n2 = mathMin(max, mathMax(0, parseFloat(n2)));
              if (processPercent) {
                n2 = parseInt(n2 * max, 10) / 100;
              }
              if (Math2.abs(n2 - max) < 1e-6) {
                return 1;
              }
              return n2 % max / parseFloat(max);
            }
            function clamp012(val) {
              return mathMin(1, mathMax(0, val));
            }
            function parseIntFromHex2(val) {
              return parseInt(val, 16);
            }
            function isOnePointZero2(n2) {
              return typeof n2 == "string" && n2.indexOf(".") != -1 && parseFloat(n2) === 1;
            }
            function isPercentage2(n2) {
              return typeof n2 === "string" && n2.indexOf("%") != -1;
            }
            function pad22(c2) {
              return c2.length == 1 ? "0" + c2 : "" + c2;
            }
            function convertToPercentage2(n2) {
              if (n2 <= 1) {
                n2 = n2 * 100 + "%";
              }
              return n2;
            }
            function convertDecimalToHex2(d2) {
              return Math2.round(parseFloat(d2) * 255).toString(16);
            }
            function convertHexToDecimal2(h2) {
              return parseIntFromHex2(h2) / 255;
            }
            var matchers2 = function() {
              var CSS_INTEGER2 = "[-\\+]?\\d+%?";
              var CSS_NUMBER2 = "[-\\+]?\\d*\\.\\d+%?";
              var CSS_UNIT2 = "(?:" + CSS_NUMBER2 + ")|(?:" + CSS_INTEGER2 + ")";
              var PERMISSIVE_MATCH32 = "[\\s|\\(]+(" + CSS_UNIT2 + ")[,|\\s]+(" + CSS_UNIT2 + ")[,|\\s]+(" + CSS_UNIT2 + ")\\s*\\)?";
              var PERMISSIVE_MATCH42 = "[\\s|\\(]+(" + CSS_UNIT2 + ")[,|\\s]+(" + CSS_UNIT2 + ")[,|\\s]+(" + CSS_UNIT2 + ")[,|\\s]+(" + CSS_UNIT2 + ")\\s*\\)?";
              return {
                CSS_UNIT: new RegExp(CSS_UNIT2),
                rgb: new RegExp("rgb" + PERMISSIVE_MATCH32),
                rgba: new RegExp("rgba" + PERMISSIVE_MATCH42),
                hsl: new RegExp("hsl" + PERMISSIVE_MATCH32),
                hsla: new RegExp("hsla" + PERMISSIVE_MATCH42),
                hsv: new RegExp("hsv" + PERMISSIVE_MATCH32),
                hsva: new RegExp("hsva" + PERMISSIVE_MATCH42),
                hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
              };
            }();
            function isValidCSSUnit2(color3) {
              return !!matchers2.CSS_UNIT.exec(color3);
            }
            function stringInputToObject2(color3) {
              color3 = color3.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
              var named = false;
              if (names3[color3]) {
                color3 = names3[color3];
                named = true;
              } else if (color3 == "transparent") {
                return { r: 0, g: 0, b: 0, a: 0, format: "name" };
              }
              var match;
              if (match = matchers2.rgb.exec(color3)) {
                return { r: match[1], g: match[2], b: match[3] };
              }
              if (match = matchers2.rgba.exec(color3)) {
                return { r: match[1], g: match[2], b: match[3], a: match[4] };
              }
              if (match = matchers2.hsl.exec(color3)) {
                return { h: match[1], s: match[2], l: match[3] };
              }
              if (match = matchers2.hsla.exec(color3)) {
                return { h: match[1], s: match[2], l: match[3], a: match[4] };
              }
              if (match = matchers2.hsv.exec(color3)) {
                return { h: match[1], s: match[2], v: match[3] };
              }
              if (match = matchers2.hsva.exec(color3)) {
                return { h: match[1], s: match[2], v: match[3], a: match[4] };
              }
              if (match = matchers2.hex8.exec(color3)) {
                return {
                  r: parseIntFromHex2(match[1]),
                  g: parseIntFromHex2(match[2]),
                  b: parseIntFromHex2(match[3]),
                  a: convertHexToDecimal2(match[4]),
                  format: named ? "name" : "hex8"
                };
              }
              if (match = matchers2.hex6.exec(color3)) {
                return {
                  r: parseIntFromHex2(match[1]),
                  g: parseIntFromHex2(match[2]),
                  b: parseIntFromHex2(match[3]),
                  format: named ? "name" : "hex"
                };
              }
              if (match = matchers2.hex4.exec(color3)) {
                return {
                  r: parseIntFromHex2(match[1] + "" + match[1]),
                  g: parseIntFromHex2(match[2] + "" + match[2]),
                  b: parseIntFromHex2(match[3] + "" + match[3]),
                  a: convertHexToDecimal2(match[4] + "" + match[4]),
                  format: named ? "name" : "hex8"
                };
              }
              if (match = matchers2.hex3.exec(color3)) {
                return {
                  r: parseIntFromHex2(match[1] + "" + match[1]),
                  g: parseIntFromHex2(match[2] + "" + match[2]),
                  b: parseIntFromHex2(match[3] + "" + match[3]),
                  format: named ? "name" : "hex"
                };
              }
              return false;
            }
            function validateWCAG2Parms(parms) {
              var level, size2;
              parms = parms || { "level": "AA", "size": "small" };
              level = (parms.level || "AA").toUpperCase();
              size2 = (parms.size || "small").toLowerCase();
              if (level !== "AA" && level !== "AAA") {
                level = "AA";
              }
              if (size2 !== "small" && size2 !== "large") {
                size2 = "small";
              }
              return { "level": level, "size": size2 };
            }
            if (typeof module2 !== "undefined" && module2.exports) {
              module2.exports = tinycolor2;
            } else if (typeof define === "function" && define.amd) {
              define(function() {
                return tinycolor2;
              });
            } else {
              window.tinycolor = tinycolor2;
            }
          })(Math);
        }
      });
      var require_UnfoldMoreHorizontalIcon = __commonJS3({
        "../../node_modules/@icons/material/UnfoldMoreHorizontalIcon.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _extends10 = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          var _react = require_react();
          var _react2 = _interopRequireDefault2(_react);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          function _objectWithoutProperties(obj, keys22) {
            var target = {};
            for (var i2 in obj) {
              if (keys22.indexOf(i2) >= 0)
                continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i2))
                continue;
              target[i2] = obj[i2];
            }
            return target;
          }
          var DEFAULT_SIZE = 24;
          exports2.default = function(_ref) {
            var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties(_ref, ["fill", "width", "height", "style"]);
            return _react2.default.createElement("svg", _extends10({
              viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
              style: _extends10({ fill, width, height }, style)
            }, props), _react2.default.createElement("path", { d: "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z" }));
          };
        }
      });
      var require_CheckIcon = __commonJS3({
        "../../node_modules/@icons/material/CheckIcon.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _extends10 = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          var _react = require_react();
          var _react2 = _interopRequireDefault2(_react);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          function _objectWithoutProperties(obj, keys22) {
            var target = {};
            for (var i2 in obj) {
              if (keys22.indexOf(i2) >= 0)
                continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i2))
                continue;
              target[i2] = obj[i2];
            }
            return target;
          }
          var DEFAULT_SIZE = 24;
          exports2.default = function(_ref) {
            var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties(_ref, ["fill", "width", "height", "style"]);
            return _react2.default.createElement("svg", _extends10({
              viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
              style: _extends10({ fill, width, height }, style)
            }, props), _react2.default.createElement("path", { d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" }));
          };
        }
      });
      var require_isArguments2 = __commonJS3({
        "../../node_modules/object-keys/isArguments.js"(exports2, module2) {
          "use strict";
          var toStr = Object.prototype.toString;
          module2.exports = function isArguments2(value) {
            var str = toStr.call(value);
            var isArgs = str === "[object Arguments]";
            if (!isArgs) {
              isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
            }
            return isArgs;
          };
        }
      });
      var require_implementation = __commonJS3({
        "../../node_modules/object-keys/implementation.js"(exports2, module2) {
          "use strict";
          var keysShim;
          if (!Object.keys) {
            has = Object.prototype.hasOwnProperty;
            toStr = Object.prototype.toString;
            isArgs = require_isArguments2();
            isEnumerable = Object.prototype.propertyIsEnumerable;
            hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
            hasProtoEnumBug = isEnumerable.call(function() {
            }, "prototype");
            dontEnums = [
              "toString",
              "toLocaleString",
              "valueOf",
              "hasOwnProperty",
              "isPrototypeOf",
              "propertyIsEnumerable",
              "constructor"
            ];
            equalsConstructorPrototype = function(o2) {
              var ctor = o2.constructor;
              return ctor && ctor.prototype === o2;
            };
            excludedKeys = {
              $applicationCache: true,
              $console: true,
              $external: true,
              $frame: true,
              $frameElement: true,
              $frames: true,
              $innerHeight: true,
              $innerWidth: true,
              $onmozfullscreenchange: true,
              $onmozfullscreenerror: true,
              $outerHeight: true,
              $outerWidth: true,
              $pageXOffset: true,
              $pageYOffset: true,
              $parent: true,
              $scrollLeft: true,
              $scrollTop: true,
              $scrollX: true,
              $scrollY: true,
              $self: true,
              $webkitIndexedDB: true,
              $webkitStorageInfo: true,
              $window: true
            };
            hasAutomationEqualityBug = function() {
              if (typeof window === "undefined") {
                return false;
              }
              for (var k2 in window) {
                try {
                  if (!excludedKeys["$" + k2] && has.call(window, k2) && window[k2] !== null && typeof window[k2] === "object") {
                    try {
                      equalsConstructorPrototype(window[k2]);
                    } catch (e2) {
                      return true;
                    }
                  }
                } catch (e2) {
                  return true;
                }
              }
              return false;
            }();
            equalsConstructorPrototypeIfNotBuggy = function(o2) {
              if (typeof window === "undefined" || !hasAutomationEqualityBug) {
                return equalsConstructorPrototype(o2);
              }
              try {
                return equalsConstructorPrototype(o2);
              } catch (e2) {
                return false;
              }
            };
            keysShim = function keys22(object) {
              var isObject22 = object !== null && typeof object === "object";
              var isFunction22 = toStr.call(object) === "[object Function]";
              var isArguments2 = isArgs(object);
              var isString2 = isObject22 && toStr.call(object) === "[object String]";
              var theKeys = [];
              if (!isObject22 && !isFunction22 && !isArguments2) {
                throw new TypeError("Object.keys called on a non-object");
              }
              var skipProto = hasProtoEnumBug && isFunction22;
              if (isString2 && object.length > 0 && !has.call(object, 0)) {
                for (var i2 = 0; i2 < object.length; ++i2) {
                  theKeys.push(String(i2));
                }
              }
              if (isArguments2 && object.length > 0) {
                for (var j2 = 0; j2 < object.length; ++j2) {
                  theKeys.push(String(j2));
                }
              } else {
                for (var name in object) {
                  if (!(skipProto && name === "prototype") && has.call(object, name)) {
                    theKeys.push(String(name));
                  }
                }
              }
              if (hasDontEnumBug) {
                var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                for (var k2 = 0; k2 < dontEnums.length; ++k2) {
                  if (!(skipConstructor && dontEnums[k2] === "constructor") && has.call(object, dontEnums[k2])) {
                    theKeys.push(dontEnums[k2]);
                  }
                }
              }
              return theKeys;
            };
          }
          var has;
          var toStr;
          var isArgs;
          var isEnumerable;
          var hasDontEnumBug;
          var hasProtoEnumBug;
          var dontEnums;
          var equalsConstructorPrototype;
          var excludedKeys;
          var hasAutomationEqualityBug;
          var equalsConstructorPrototypeIfNotBuggy;
          module2.exports = keysShim;
        }
      });
      var require_object_keys2 = __commonJS3({
        "../../node_modules/object-keys/index.js"(exports2, module2) {
          "use strict";
          var slice = Array.prototype.slice;
          var isArgs = require_isArguments2();
          var origKeys = Object.keys;
          var keysShim = origKeys ? function keys22(o2) {
            return origKeys(o2);
          } : require_implementation();
          var originalKeys = Object.keys;
          keysShim.shim = function shimObjectKeys() {
            if (Object.keys) {
              var keysWorksWithArguments = function() {
                var args = Object.keys(arguments);
                return args && args.length === arguments.length;
              }(1, 2);
              if (!keysWorksWithArguments) {
                Object.keys = function keys22(object) {
                  if (isArgs(object)) {
                    return originalKeys(slice.call(object));
                  }
                  return originalKeys(object);
                };
              }
            } else {
              Object.keys = keysShim;
            }
            return Object.keys || keysShim;
          };
          module2.exports = keysShim;
        }
      });
      var require_shams = __commonJS3({
        "../../node_modules/has-symbols/shams.js"(exports2, module2) {
          "use strict";
          module2.exports = function hasSymbols() {
            if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
              return false;
            }
            if (typeof Symbol.iterator === "symbol") {
              return true;
            }
            var obj = {};
            var sym = Symbol("test");
            var symObj = Object(sym);
            if (typeof sym === "string") {
              return false;
            }
            if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
              return false;
            }
            if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
              return false;
            }
            var symVal = 42;
            obj[sym] = symVal;
            for (sym in obj) {
              return false;
            }
            if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
              return false;
            }
            if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
              return false;
            }
            var syms = Object.getOwnPropertySymbols(obj);
            if (syms.length !== 1 || syms[0] !== sym) {
              return false;
            }
            if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
              return false;
            }
            if (typeof Object.getOwnPropertyDescriptor === "function") {
              var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
              if (descriptor.value !== symVal || descriptor.enumerable !== true) {
                return false;
              }
            }
            return true;
          };
        }
      });
      var require_has_symbols = __commonJS3({
        "../../node_modules/has-symbols/index.js"(exports2, module2) {
          "use strict";
          var origSymbol = typeof Symbol !== "undefined" && Symbol;
          var hasSymbolSham = require_shams();
          module2.exports = function hasNativeSymbols() {
            if (typeof origSymbol !== "function") {
              return false;
            }
            if (typeof Symbol !== "function") {
              return false;
            }
            if (typeof origSymbol("foo") !== "symbol") {
              return false;
            }
            if (typeof Symbol("bar") !== "symbol") {
              return false;
            }
            return hasSymbolSham();
          };
        }
      });
      var require_implementation2 = __commonJS3({
        "../../node_modules/function-bind/implementation.js"(exports2, module2) {
          "use strict";
          var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
          var slice = Array.prototype.slice;
          var toStr = Object.prototype.toString;
          var funcType = "[object Function]";
          module2.exports = function bind(that) {
            var target = this;
            if (typeof target !== "function" || toStr.call(target) !== funcType) {
              throw new TypeError(ERROR_MESSAGE + target);
            }
            var args = slice.call(arguments, 1);
            var bound;
            var binder = function() {
              if (this instanceof bound) {
                var result = target.apply(this, args.concat(slice.call(arguments)));
                if (Object(result) === result) {
                  return result;
                }
                return this;
              } else {
                return target.apply(that, args.concat(slice.call(arguments)));
              }
            };
            var boundLength = Math.max(0, target.length - args.length);
            var boundArgs = [];
            for (var i2 = 0; i2 < boundLength; i2++) {
              boundArgs.push("$" + i2);
            }
            bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
            if (target.prototype) {
              var Empty = function Empty2() {
              };
              Empty.prototype = target.prototype;
              bound.prototype = new Empty();
              Empty.prototype = null;
            }
            return bound;
          };
        }
      });
      var require_function_bind = __commonJS3({
        "../../node_modules/function-bind/index.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation2();
          module2.exports = Function.prototype.bind || implementation;
        }
      });
      var require_src = __commonJS3({
        "../../node_modules/has/src/index.js"(exports2, module2) {
          "use strict";
          var bind = require_function_bind();
          module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
        }
      });
      var require_get_intrinsic = __commonJS3({
        "../../node_modules/get-intrinsic/index.js"(exports2, module2) {
          "use strict";
          var undefined2;
          var $SyntaxError = SyntaxError;
          var $Function = Function;
          var $TypeError = TypeError;
          var getEvalledConstructor = function(expressionSyntax) {
            try {
              return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
            } catch (e2) {
            }
          };
          var $gOPD = Object.getOwnPropertyDescriptor;
          if ($gOPD) {
            try {
              $gOPD({}, "");
            } catch (e2) {
              $gOPD = null;
            }
          }
          var throwTypeError = function() {
            throw new $TypeError();
          };
          var ThrowTypeError = $gOPD ? function() {
            try {
              arguments.callee;
              return throwTypeError;
            } catch (calleeThrows) {
              try {
                return $gOPD(arguments, "callee").get;
              } catch (gOPDthrows) {
                return throwTypeError;
              }
            }
          }() : throwTypeError;
          var hasSymbols = require_has_symbols()();
          var getProto = Object.getPrototypeOf || function(x2) {
            return x2.__proto__;
          };
          var needsEval = {};
          var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
          var INTRINSICS = {
            "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
            "%Array%": Array,
            "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
            "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
            "%AsyncFromSyncIteratorPrototype%": undefined2,
            "%AsyncFunction%": needsEval,
            "%AsyncGenerator%": needsEval,
            "%AsyncGeneratorFunction%": needsEval,
            "%AsyncIteratorPrototype%": needsEval,
            "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
            "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
            "%Boolean%": Boolean,
            "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
            "%Date%": Date,
            "%decodeURI%": decodeURI,
            "%decodeURIComponent%": decodeURIComponent,
            "%encodeURI%": encodeURI,
            "%encodeURIComponent%": encodeURIComponent,
            "%Error%": Error,
            "%eval%": eval,
            "%EvalError%": EvalError,
            "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
            "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
            "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
            "%Function%": $Function,
            "%GeneratorFunction%": needsEval,
            "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
            "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
            "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
            "%isFinite%": isFinite,
            "%isNaN%": isNaN,
            "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
            "%JSON%": typeof JSON === "object" ? JSON : undefined2,
            "%Map%": typeof Map === "undefined" ? undefined2 : Map,
            "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
            "%Math%": Math,
            "%Number%": Number,
            "%Object%": Object,
            "%parseFloat%": parseFloat,
            "%parseInt%": parseInt,
            "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
            "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
            "%RangeError%": RangeError,
            "%ReferenceError%": ReferenceError,
            "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
            "%RegExp%": RegExp,
            "%Set%": typeof Set === "undefined" ? undefined2 : Set,
            "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
            "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
            "%String%": String,
            "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
            "%Symbol%": hasSymbols ? Symbol : undefined2,
            "%SyntaxError%": $SyntaxError,
            "%ThrowTypeError%": ThrowTypeError,
            "%TypedArray%": TypedArray,
            "%TypeError%": $TypeError,
            "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
            "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
            "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
            "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
            "%URIError%": URIError,
            "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
            "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
            "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
          };
          var doEval = function doEval2(name) {
            var value;
            if (name === "%AsyncFunction%") {
              value = getEvalledConstructor("async function () {}");
            } else if (name === "%GeneratorFunction%") {
              value = getEvalledConstructor("function* () {}");
            } else if (name === "%AsyncGeneratorFunction%") {
              value = getEvalledConstructor("async function* () {}");
            } else if (name === "%AsyncGenerator%") {
              var fn = doEval2("%AsyncGeneratorFunction%");
              if (fn) {
                value = fn.prototype;
              }
            } else if (name === "%AsyncIteratorPrototype%") {
              var gen = doEval2("%AsyncGenerator%");
              if (gen) {
                value = getProto(gen.prototype);
              }
            }
            INTRINSICS[name] = value;
            return value;
          };
          var LEGACY_ALIASES = {
            "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
            "%ArrayPrototype%": ["Array", "prototype"],
            "%ArrayProto_entries%": ["Array", "prototype", "entries"],
            "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
            "%ArrayProto_keys%": ["Array", "prototype", "keys"],
            "%ArrayProto_values%": ["Array", "prototype", "values"],
            "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
            "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
            "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
            "%BooleanPrototype%": ["Boolean", "prototype"],
            "%DataViewPrototype%": ["DataView", "prototype"],
            "%DatePrototype%": ["Date", "prototype"],
            "%ErrorPrototype%": ["Error", "prototype"],
            "%EvalErrorPrototype%": ["EvalError", "prototype"],
            "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
            "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
            "%FunctionPrototype%": ["Function", "prototype"],
            "%Generator%": ["GeneratorFunction", "prototype"],
            "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
            "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
            "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
            "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
            "%JSONParse%": ["JSON", "parse"],
            "%JSONStringify%": ["JSON", "stringify"],
            "%MapPrototype%": ["Map", "prototype"],
            "%NumberPrototype%": ["Number", "prototype"],
            "%ObjectPrototype%": ["Object", "prototype"],
            "%ObjProto_toString%": ["Object", "prototype", "toString"],
            "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
            "%PromisePrototype%": ["Promise", "prototype"],
            "%PromiseProto_then%": ["Promise", "prototype", "then"],
            "%Promise_all%": ["Promise", "all"],
            "%Promise_reject%": ["Promise", "reject"],
            "%Promise_resolve%": ["Promise", "resolve"],
            "%RangeErrorPrototype%": ["RangeError", "prototype"],
            "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
            "%RegExpPrototype%": ["RegExp", "prototype"],
            "%SetPrototype%": ["Set", "prototype"],
            "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
            "%StringPrototype%": ["String", "prototype"],
            "%SymbolPrototype%": ["Symbol", "prototype"],
            "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
            "%TypedArrayPrototype%": ["TypedArray", "prototype"],
            "%TypeErrorPrototype%": ["TypeError", "prototype"],
            "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
            "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
            "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
            "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
            "%URIErrorPrototype%": ["URIError", "prototype"],
            "%WeakMapPrototype%": ["WeakMap", "prototype"],
            "%WeakSetPrototype%": ["WeakSet", "prototype"]
          };
          var bind = require_function_bind();
          var hasOwn = require_src();
          var $concat = bind.call(Function.call, Array.prototype.concat);
          var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
          var $replace = bind.call(Function.call, String.prototype.replace);
          var $strSlice = bind.call(Function.call, String.prototype.slice);
          var $exec = bind.call(Function.call, RegExp.prototype.exec);
          var rePropName2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
          var reEscapeChar2 = /\\(\\)?/g;
          var stringToPath2 = function stringToPath3(string) {
            var first = $strSlice(string, 0, 1);
            var last = $strSlice(string, -1);
            if (first === "%" && last !== "%") {
              throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
            } else if (last === "%" && first !== "%") {
              throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
            }
            var result = [];
            $replace(string, rePropName2, function(match, number2, quote, subString) {
              result[result.length] = quote ? $replace(subString, reEscapeChar2, "$1") : number2 || match;
            });
            return result;
          };
          var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
            var intrinsicName = name;
            var alias;
            if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
              alias = LEGACY_ALIASES[intrinsicName];
              intrinsicName = "%" + alias[0] + "%";
            }
            if (hasOwn(INTRINSICS, intrinsicName)) {
              var value = INTRINSICS[intrinsicName];
              if (value === needsEval) {
                value = doEval(intrinsicName);
              }
              if (typeof value === "undefined" && !allowMissing) {
                throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
              }
              return {
                alias,
                name: intrinsicName,
                value
              };
            }
            throw new $SyntaxError("intrinsic " + name + " does not exist!");
          };
          module2.exports = function GetIntrinsic(name, allowMissing) {
            if (typeof name !== "string" || name.length === 0) {
              throw new $TypeError("intrinsic name must be a non-empty string");
            }
            if (arguments.length > 1 && typeof allowMissing !== "boolean") {
              throw new $TypeError('"allowMissing" argument must be a boolean');
            }
            if ($exec(/^%?[^%]*%?$/, name) === null) {
              throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
            }
            var parts = stringToPath2(name);
            var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
            var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
            var intrinsicRealName = intrinsic.name;
            var value = intrinsic.value;
            var skipFurtherCaching = false;
            var alias = intrinsic.alias;
            if (alias) {
              intrinsicBaseName = alias[0];
              $spliceApply(parts, $concat([0, 1], alias));
            }
            for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
              var part = parts[i2];
              var first = $strSlice(part, 0, 1);
              var last = $strSlice(part, -1);
              if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
                throw new $SyntaxError("property names with quotes must have matching quotes");
              }
              if (part === "constructor" || !isOwn) {
                skipFurtherCaching = true;
              }
              intrinsicBaseName += "." + part;
              intrinsicRealName = "%" + intrinsicBaseName + "%";
              if (hasOwn(INTRINSICS, intrinsicRealName)) {
                value = INTRINSICS[intrinsicRealName];
              } else if (value != null) {
                if (!(part in value)) {
                  if (!allowMissing) {
                    throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                  }
                  return void 0;
                }
                if ($gOPD && i2 + 1 >= parts.length) {
                  var desc = $gOPD(value, part);
                  isOwn = !!desc;
                  if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                    value = desc.get;
                  } else {
                    value = value[part];
                  }
                } else {
                  isOwn = hasOwn(value, part);
                  value = value[part];
                }
                if (isOwn && !skipFurtherCaching) {
                  INTRINSICS[intrinsicRealName] = value;
                }
              }
            }
            return value;
          };
        }
      });
      var require_has_property_descriptors = __commonJS3({
        "../../node_modules/has-property-descriptors/index.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
          var hasPropertyDescriptors = function hasPropertyDescriptors2() {
            if ($defineProperty) {
              try {
                $defineProperty({}, "a", { value: 1 });
                return true;
              } catch (e2) {
                return false;
              }
            }
            return false;
          };
          hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
            if (!hasPropertyDescriptors()) {
              return null;
            }
            try {
              return $defineProperty([], "length", { value: 1 }).length !== 1;
            } catch (e2) {
              return true;
            }
          };
          module2.exports = hasPropertyDescriptors;
        }
      });
      var require_define_properties = __commonJS3({
        "../../node_modules/define-properties/index.js"(exports2, module2) {
          "use strict";
          var keys22 = require_object_keys2();
          var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
          var toStr = Object.prototype.toString;
          var concat = Array.prototype.concat;
          var origDefineProperty = Object.defineProperty;
          var isFunction22 = function(fn) {
            return typeof fn === "function" && toStr.call(fn) === "[object Function]";
          };
          var hasPropertyDescriptors = require_has_property_descriptors()();
          var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
          var defineProperty2 = function(object, name, value, predicate) {
            if (name in object && (!isFunction22(predicate) || !predicate())) {
              return;
            }
            if (supportsDescriptors) {
              origDefineProperty(object, name, {
                configurable: true,
                enumerable: false,
                value,
                writable: true
              });
            } else {
              object[name] = value;
            }
          };
          var defineProperties = function(object, map2) {
            var predicates = arguments.length > 2 ? arguments[2] : {};
            var props = keys22(map2);
            if (hasSymbols) {
              props = concat.call(props, Object.getOwnPropertySymbols(map2));
            }
            for (var i2 = 0; i2 < props.length; i2 += 1) {
              defineProperty2(object, props[i2], map2[props[i2]], predicates[props[i2]]);
            }
          };
          defineProperties.supportsDescriptors = !!supportsDescriptors;
          module2.exports = defineProperties;
        }
      });
      var require_call_bind = __commonJS3({
        "../../node_modules/call-bind/index.js"(exports2, module2) {
          "use strict";
          var bind = require_function_bind();
          var GetIntrinsic = require_get_intrinsic();
          var $apply = GetIntrinsic("%Function.prototype.apply%");
          var $call = GetIntrinsic("%Function.prototype.call%");
          var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
          var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
          var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
          var $max = GetIntrinsic("%Math.max%");
          if ($defineProperty) {
            try {
              $defineProperty({}, "a", { value: 1 });
            } catch (e2) {
              $defineProperty = null;
            }
          }
          module2.exports = function callBind(originalFunction) {
            var func = $reflectApply(bind, $call, arguments);
            if ($gOPD && $defineProperty) {
              var desc = $gOPD(func, "length");
              if (desc.configurable) {
                $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
              }
            }
            return func;
          };
          var applyBind = function applyBind2() {
            return $reflectApply(bind, $apply, arguments);
          };
          if ($defineProperty) {
            $defineProperty(module2.exports, "apply", { value: applyBind });
          } else {
            module2.exports.apply = applyBind;
          }
        }
      });
      var require_callBound = __commonJS3({
        "../../node_modules/call-bind/callBound.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var callBind = require_call_bind();
          var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
          module2.exports = function callBoundIntrinsic(name, allowMissing) {
            var intrinsic = GetIntrinsic(name, !!allowMissing);
            if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
              return callBind(intrinsic);
            }
            return intrinsic;
          };
        }
      });
      var require_implementation3 = __commonJS3({
        "../../node_modules/object.assign/implementation.js"(exports2, module2) {
          "use strict";
          var objectKeys = require_object_keys2();
          var hasSymbols = require_shams()();
          var callBound = require_callBound();
          var toObject = Object;
          var $push = callBound("Array.prototype.push");
          var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
          var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
          module2.exports = function assign(target, source1) {
            if (target == null) {
              throw new TypeError("target must be an object");
            }
            var to = toObject(target);
            if (arguments.length === 1) {
              return to;
            }
            for (var s2 = 1; s2 < arguments.length; ++s2) {
              var from = toObject(arguments[s2]);
              var keys22 = objectKeys(from);
              var getSymbols2 = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
              if (getSymbols2) {
                var syms = getSymbols2(from);
                for (var j2 = 0; j2 < syms.length; ++j2) {
                  var key = syms[j2];
                  if ($propIsEnumerable(from, key)) {
                    $push(keys22, key);
                  }
                }
              }
              for (var i2 = 0; i2 < keys22.length; ++i2) {
                var nextKey = keys22[i2];
                if ($propIsEnumerable(from, nextKey)) {
                  var propValue = from[nextKey];
                  to[nextKey] = propValue;
                }
              }
            }
            return to;
          };
        }
      });
      var require_polyfill = __commonJS3({
        "../../node_modules/object.assign/polyfill.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation3();
          var lacksProperEnumerationOrder = function() {
            if (!Object.assign) {
              return false;
            }
            var str = "abcdefghijklmnopqrst";
            var letters = str.split("");
            var map2 = {};
            for (var i2 = 0; i2 < letters.length; ++i2) {
              map2[letters[i2]] = letters[i2];
            }
            var obj = Object.assign({}, map2);
            var actual = "";
            for (var k2 in obj) {
              actual += k2;
            }
            return str !== actual;
          };
          var assignHasPendingExceptions = function() {
            if (!Object.assign || !Object.preventExtensions) {
              return false;
            }
            var thrower = Object.preventExtensions({ 1: 2 });
            try {
              Object.assign(thrower, "xy");
            } catch (e2) {
              return thrower[1] === "y";
            }
            return false;
          };
          module2.exports = function getPolyfill() {
            if (!Object.assign) {
              return implementation;
            }
            if (lacksProperEnumerationOrder()) {
              return implementation;
            }
            if (assignHasPendingExceptions()) {
              return implementation;
            }
            return Object.assign;
          };
        }
      });
      var require_shim = __commonJS3({
        "../../node_modules/object.assign/shim.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var getPolyfill = require_polyfill();
          module2.exports = function shimAssign() {
            var polyfill = getPolyfill();
            define2(Object, { assign: polyfill }, { assign: function() {
              return Object.assign !== polyfill;
            } });
            return polyfill;
          };
        }
      });
      var require_object = __commonJS3({
        "../../node_modules/object.assign/index.js"(exports2, module2) {
          "use strict";
          var defineProperties = require_define_properties();
          var callBind = require_call_bind();
          var implementation = require_implementation3();
          var getPolyfill = require_polyfill();
          var shim = require_shim();
          var polyfill = callBind.apply(getPolyfill());
          var bound = function assign(target, source1) {
            return polyfill(Object, arguments);
          };
          defineProperties(bound, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = bound;
        }
      });
      var require_isPlainObject2 = __commonJS3({
        "../../node_modules/prop-types-exact/build/helpers/isPlainObject.js"(exports2, module2) {
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          exports2["default"] = isPlainObject2;
          function isPlainObject2(x2) {
            return x2 && (typeof x2 === "undefined" ? "undefined" : _typeof(x2)) === "object" && !Array.isArray(x2);
          }
          module2.exports = exports2["default"];
        }
      });
      var require_build = __commonJS3({
        "../../node_modules/prop-types-exact/build/index.js"(exports2, module2) {
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = forbidExtraProps;
          var _object = require_object();
          var _object2 = _interopRequireDefault2(_object);
          var _has = require_src();
          var _has2 = _interopRequireDefault2(_has);
          var _isPlainObject = require_isPlainObject2();
          var _isPlainObject2 = _interopRequireDefault2(_isPlainObject);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var zeroWidthSpace = "\u200B";
          var specialProperty = "prop-types-exact: " + zeroWidthSpace;
          var semaphore = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"](specialProperty) : specialProperty;
          function brand(fn) {
            return (0, _object2["default"])(fn, _defineProperty2({}, specialProperty, semaphore));
          }
          function isBranded(value) {
            return value && value[specialProperty] === semaphore;
          }
          function forbidExtraProps(propTypes) {
            if (!(0, _isPlainObject2["default"])(propTypes)) {
              throw new TypeError("given propTypes must be an object");
            }
            if ((0, _has2["default"])(propTypes, specialProperty) && !isBranded(propTypes[specialProperty])) {
              throw new TypeError("Against all odds, you created a propType for a prop that uses both the zero-width space and our custom string - which, sadly, conflicts with `prop-types-exact`");
            }
            return (0, _object2["default"])({}, propTypes, _defineProperty2({}, specialProperty, brand(function() {
              function forbidUnknownProps(props, _2, componentName) {
                var unknownProps = Object.keys(props).filter(function(prop) {
                  return !(0, _has2["default"])(propTypes, prop);
                });
                if (unknownProps.length > 0) {
                  return new TypeError(String(componentName) + ": unknown props found: " + String(unknownProps.join(", ")));
                }
                return null;
              }
              return forbidUnknownProps;
            }())));
          }
          module2.exports = exports2["default"];
        }
      });
      var require_wrapValidator = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/wrapValidator.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = wrapValidator;
          var _object = _interopRequireDefault2(require_object());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function wrapValidator(validator, typeName) {
            var typeChecker = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            return (0, _object["default"])(validator.bind(), {
              typeName,
              typeChecker,
              isRequired: (0, _object["default"])(validator.isRequired.bind(), {
                typeName,
                typeChecker,
                typeRequired: true
              })
            });
          }
        }
      });
      var require_and = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/and.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = andValidator;
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function andValidator(validators) {
            var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "and";
            if (!Array.isArray(validators)) {
              throw new TypeError("and: 2 or more validators are required");
            }
            if (validators.length <= 1) {
              throw new RangeError("and: 2 or more validators are required");
            }
            var validator = function and() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              var firstError = null;
              validators.some(function(validatorFn) {
                firstError = validatorFn.apply(void 0, args);
                return firstError != null;
              });
              return firstError == null ? null : firstError;
            };
            validator.isRequired = function andIsRequired() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              var firstError = null;
              validators.some(function(validatorFn) {
                firstError = validatorFn.isRequired.apply(validatorFn, args);
                return firstError != null;
              });
              return firstError == null ? null : firstError;
            };
            return (0, _wrapValidator["default"])(validator, name, validators);
          }
        }
      });
      var require_CheckObjectCoercible = __commonJS3({
        "../../node_modules/es-abstract/5/CheckObjectCoercible.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var $TypeError = GetIntrinsic("%TypeError%");
          module2.exports = function CheckObjectCoercible(value, optMessage) {
            if (value == null) {
              throw new $TypeError(optMessage || "Cannot call method on " + value);
            }
            return value;
          };
        }
      });
      var require_RequireObjectCoercible = __commonJS3({
        "../../node_modules/es-abstract/2021/RequireObjectCoercible.js"(exports2, module2) {
          "use strict";
          module2.exports = require_CheckObjectCoercible();
        }
      });
      var require_implementation4 = __commonJS3({
        "../../node_modules/object.entries/implementation.js"(exports2, module2) {
          "use strict";
          var RequireObjectCoercible = require_RequireObjectCoercible();
          var callBound = require_callBound();
          var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");
          var $push = callBound("Array.prototype.push");
          module2.exports = function entries(O) {
            var obj = RequireObjectCoercible(O);
            var entrys = [];
            for (var key in obj) {
              if ($isEnumerable(obj, key)) {
                $push(entrys, [key, obj[key]]);
              }
            }
            return entrys;
          };
        }
      });
      var require_polyfill2 = __commonJS3({
        "../../node_modules/object.entries/polyfill.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation4();
          module2.exports = function getPolyfill() {
            return typeof Object.entries === "function" ? Object.entries : implementation;
          };
        }
      });
      var require_shim2 = __commonJS3({
        "../../node_modules/object.entries/shim.js"(exports2, module2) {
          "use strict";
          var getPolyfill = require_polyfill2();
          var define2 = require_define_properties();
          module2.exports = function shimEntries() {
            var polyfill = getPolyfill();
            define2(Object, { entries: polyfill }, {
              entries: function testEntries() {
                return Object.entries !== polyfill;
              }
            });
            return polyfill;
          };
        }
      });
      var require_object2 = __commonJS3({
        "../../node_modules/object.entries/index.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var callBind = require_call_bind();
          var implementation = require_implementation4();
          var getPolyfill = require_polyfill2();
          var shim = require_shim2();
          var polyfill = callBind(getPolyfill(), Object);
          define2(polyfill, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = polyfill;
        }
      });
      var require_isPlainObject3 = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/isPlainObject.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _isPlainObject = _interopRequireDefault2(require_isPlainObject2());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var _default = _isPlainObject["default"];
          exports2["default"] = _default;
        }
      });
      var require_shape = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/shape.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = shapeValidator;
          var _isPlainObject = _interopRequireDefault2(require_isPlainObject3());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function shapeValidator(shapeTypes) {
            if (!(0, _isPlainObject["default"])(shapeTypes)) {
              throw new TypeError("shape must be a normal object");
            }
            function shape(props, propName, componentName, location) {
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
                rest[_key - 4] = arguments[_key];
              }
              for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (checker) {
                  var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));
                  if (error) {
                    return error;
                  }
                }
              }
              return null;
            }
            shape.isRequired = function shapeRequired(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return new TypeError("".concat(componentName, ": ").concat(propName, " is required."));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return shape.apply(void 0, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(shape, "shape", shapeTypes);
          }
        }
      });
      var require_isPrimitive = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/isPrimitive.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = isPrimitive;
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function isPrimitive(x2) {
            return !x2 || _typeof(x2) !== "object" && typeof x2 !== "function";
          }
        }
      });
      var require_valuesOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/valuesOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = valuesOfValidator;
          var _isPrimitive = _interopRequireDefault2(require_isPrimitive());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function valuesOfValidator(propType) {
            if (typeof propType !== "function") {
              throw new TypeError("objectOf: propType must be a function");
            }
            var validator = function valuesOf(props, propName, componentName, location, propFullName) {
              for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
                rest[_key - 5] = arguments[_key];
              }
              var propValue = props[propName];
              if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
                return null;
              }
              var firstError;
              Object.keys(propValue).some(function(key) {
                firstError = propType.apply(void 0, [propValue, key, componentName, location, "".concat(propFullName, ".").concat(key)].concat(rest));
                return firstError;
              });
              return firstError || null;
            };
            validator.isRequired = function valuesOfRequired(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return new TypeError("".concat(componentName, ": ").concat(propName, " is required."));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return validator.apply(void 0, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, "valuesOf", propType);
          }
        }
      });
      var require_between = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/between.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = betweenValidator;
          var _object = _interopRequireDefault2(require_object2());
          var _shape = _interopRequireDefault2(require_shape());
          var _valuesOf = _interopRequireDefault2(require_valuesOf());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function ownKeys(object, enumerableOnly) {
            var keys22 = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys22.push.apply(keys22, symbols);
            }
            return keys22;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty2(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function _slicedToArray(arr, i2) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
          }
          function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return _arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return _arrayLikeToArray(o2, minLen);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          function _iterableToArrayLimit(arr, i2) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
              return;
            var _arr = [];
            var _n = true;
            var _d3 = false;
            var _e22 = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d3 = true;
              _e22 = err;
            } finally {
              try {
                if (!_n && _i["return"] != null)
                  _i["return"]();
              } finally {
                if (_d3)
                  throw _e22;
              }
            }
            return _arr;
          }
          function _arrayWithHoles(arr) {
            if (Array.isArray(arr))
              return arr;
          }
          function number2(props, propName, componentName) {
            var value = props[propName];
            if (typeof value === "number" && !isNaN(value)) {
              return null;
            }
            return new TypeError("".concat(componentName, ": ").concat(propName, " must be a non-NaN number."));
          }
          function numberOrPropsFunc(props, propName) {
            var value = props[propName];
            if (typeof value === "function") {
              return null;
            }
            if (typeof value === "number" && !isNaN(value)) {
              return null;
            }
            return new TypeError("".concat(propName, ": a function, or a non-NaN number is required"));
          }
          function lowerCompare(value, _ref) {
            var gt = _ref.gt, gte = _ref.gte;
            if (typeof gt === "number") {
              return value > gt;
            }
            if (typeof gte === "number") {
              return value >= gte;
            }
            return true;
          }
          function upperCompare(value, _ref2) {
            var lt = _ref2.lt, lte = _ref2.lte;
            if (typeof lt === "number") {
              return value < lt;
            }
            if (typeof lte === "number") {
              return value <= lte;
            }
            return true;
          }
          function greaterThanError(_ref3) {
            var gt = _ref3.gt, gte = _ref3.gte;
            if (typeof gt === "number") {
              return "greater than ".concat(gt);
            }
            if (typeof gte === "number") {
              return "greater than or equal to ".concat(gte);
            }
            return "";
          }
          function lessThanError(_ref4) {
            var lt = _ref4.lt, lte = _ref4.lte;
            if (typeof lt === "number") {
              return "less than ".concat(lt);
            }
            if (typeof lte === "number") {
              return "less than or equal to ".concat(lte);
            }
            return "";
          }
          function errorMessage(componentName, propName, opts) {
            var errors = [greaterThanError(opts), lessThanError(opts)].filter(Boolean).join(" and ");
            return "".concat(componentName, ": ").concat(propName, " must be ").concat(errors);
          }
          function propsThunkify(opts) {
            return (0, _object["default"])(opts).reduce(function(acc, _ref5) {
              var _ref6 = _slicedToArray(_ref5, 2), key = _ref6[0], value = _ref6[1];
              var numberThunk = typeof value === "number" ? function() {
                return value;
              } : value;
              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty2({}, key, numberThunk));
            }, {});
          }
          function invokeWithProps(optsThunks, props) {
            return (0, _object["default"])(optsThunks).reduce(function(acc, _ref7) {
              var _ref8 = _slicedToArray(_ref7, 2), key = _ref8[0], thunk = _ref8[1];
              var value = thunk(props);
              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty2({}, key, value));
            }, {});
          }
          var argValidators = [(0, _shape["default"])({
            lt: numberOrPropsFunc,
            gt: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            lte: numberOrPropsFunc,
            gt: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            lt: numberOrPropsFunc,
            gte: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            lte: numberOrPropsFunc,
            gte: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            lt: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            lte: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            gt: numberOrPropsFunc
          }).isRequired, (0, _shape["default"])({
            gte: numberOrPropsFunc
          }).isRequired];
          function argValidator(props, propName) {
            return argValidators.every(function(validator) {
              return !!validator(props, propName);
            });
          }
          var thunkValueValidator = (0, _valuesOf["default"])(number2).isRequired;
          function betweenValidator(options) {
            var argError = argValidator({
              options
            }, "options");
            if (argError) {
              throw new TypeError("between: only one of the pairs of `lt`/`lte`, and `gt`/`gte`, may be supplied, and at least one pair must be provided.");
            }
            var optsThunks = propsThunkify(options);
            var validator = function between(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              if (typeof propValue !== "number") {
                return new RangeError("".concat(componentName, ": ").concat(propName, ' must be a number, got "').concat(_typeof(propValue), '"'));
              }
              var opts = invokeWithProps(optsThunks, props);
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              var thunkValuesError = thunkValueValidator.apply(void 0, [_defineProperty2({}, propName, opts), propName, componentName].concat(rest));
              if (thunkValuesError) {
                return thunkValuesError;
              }
              if (!lowerCompare(propValue, opts) || !upperCompare(propValue, opts)) {
                return new RangeError(errorMessage(componentName, propName, opts));
              }
              return null;
            };
            validator.isRequired = function betweenRequired(props, propName, componentName) {
              var propValue = props[propName];
              if (typeof propValue !== "number") {
                return new RangeError("".concat(componentName, ": ").concat(propName, ' must be a number, got "').concat(_typeof(propValue), '"'));
              }
              var opts = invokeWithProps(optsThunks, props);
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              var thunkValuesError = thunkValueValidator.apply(void 0, [_defineProperty2({}, propName, opts), propName, componentName].concat(rest));
              if (thunkValuesError) {
                return thunkValuesError;
              }
              if (!lowerCompare(propValue, opts) || !upperCompare(propValue, opts)) {
                return new RangeError(errorMessage(componentName, propName, opts));
              }
              return null;
            };
            return (0, _wrapValidator["default"])(validator, "between", options);
          }
        }
      });
      var require_booleanSome = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/booleanSome.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = booleanSomeValidator;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function booleanSomeValidator() {
            for (var _len = arguments.length, notAllPropsFalse = new Array(_len), _key = 0; _key < _len; _key++) {
              notAllPropsFalse[_key] = arguments[_key];
            }
            if (notAllPropsFalse.length < 1) {
              throw new TypeError("at least one prop (one of which must be `true`) is required");
            }
            if (!notAllPropsFalse.every(function(x2) {
              return typeof x2 === "string";
            })) {
              throw new TypeError("all booleanSome props must be strings");
            }
            var propsList = notAllPropsFalse.join(", or ");
            var validator = function booleanSome(props, propName, componentName) {
              var countFalse = function countFalse2(count, prop) {
                return count + (props[prop] === false ? 1 : 0);
              };
              var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);
              if (falsePropCount === notAllPropsFalse.length) {
                return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
            };
            validator.isRequired = function booleanSomeRequired(props, propName, componentName) {
              var countFalse = function countFalse2(count, prop) {
                return count + (props[prop] === false ? 1 : 0);
              };
              var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);
              if (falsePropCount === notAllPropsFalse.length) {
                return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                rest[_key3 - 3] = arguments[_key3];
              }
              return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, "booleanSome: ".concat(propsList), notAllPropsFalse);
          }
        }
      });
      var require_childrenHavePropXorChildren = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/childrenHavePropXorChildren.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = childrenHavePropXorChildren;
          var _react = _interopRequireDefault2(require_react());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function childrenHavePropXorChildren(prop) {
            if (typeof prop !== "string" && _typeof(prop) !== "symbol") {
              throw new TypeError("invalid prop: must be string or symbol");
            }
            var validator = function childrenHavePropXorChildrenWithProp(_ref, _2, componentName) {
              var children = _ref.children;
              var truthyChildrenCount = 0;
              var propCount = 0;
              var grandchildrenCount = 0;
              _react["default"].Children.forEach(children, function(child) {
                if (!child) {
                  return;
                }
                truthyChildrenCount += 1;
                if (child.props[prop]) {
                  propCount += 1;
                }
                if (_react["default"].Children.count(child.props.children)) {
                  grandchildrenCount += 1;
                }
              });
              if (propCount === truthyChildrenCount && grandchildrenCount === 0 || propCount === 0 && grandchildrenCount === truthyChildrenCount || propCount === 0 && grandchildrenCount === 0) {
                return null;
              }
              return new TypeError("`".concat(componentName, "` requires children to all have prop \u201C").concat(prop, "\u201D, all have children, or all have neither."));
            };
            validator.isRequired = validator;
            return (0, _wrapValidator["default"])(validator, "childrenHavePropXorChildrenWithProp:".concat(prop), prop);
          }
        }
      });
      var require_renderableChildren = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/renderableChildren.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = renderableChildren;
          var _react = _interopRequireDefault2(require_react());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function renderableChildren(childrenProp) {
            return _react["default"].Children.toArray(childrenProp).filter(function(child) {
              return child === 0 || child;
            });
          }
        }
      });
      var require_childrenOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/childrenOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = childrenOf;
          var _renderableChildren = _interopRequireDefault2(require_renderableChildren());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function ownKeys(object, enumerableOnly) {
            var keys22 = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys22.push.apply(keys22, symbols);
            }
            return keys22;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty2(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function validateChildren(propType, children, props) {
            for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
              rest[_key - 3] = arguments[_key];
            }
            var error;
            children.some(function(child) {
              error = propType.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, {
                children: child
              }), "children"].concat(rest));
              return error;
            });
            return error || null;
          }
          function childrenOf(propType) {
            function childrenOfPropType(props, propName, componentName) {
              if (propName !== "children") {
                return new TypeError("".concat(componentName, ' is using the childrenOf validator on non-children prop "').concat(propName, '"'));
              }
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              var children = (0, _renderableChildren["default"])(propValue);
              if (children.length === 0) {
                return null;
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
            }
            childrenOfPropType.isRequired = function(props, propName, componentName) {
              if (propName !== "children") {
                return new TypeError("".concat(componentName, ' is using the childrenOf validator on non-children prop "').concat(propName, '"'));
              }
              var children = (0, _renderableChildren["default"])(props[propName]);
              if (children.length === 0) {
                return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(propType.typeName || propType.name));
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                rest[_key3 - 3] = arguments[_key3];
              }
              return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(childrenOfPropType, "childrenOf", propType);
          }
        }
      });
      var require_ToObject = __commonJS3({
        "../../node_modules/es-abstract/2021/ToObject.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var $Object = GetIntrinsic("%Object%");
          var RequireObjectCoercible = require_RequireObjectCoercible();
          module2.exports = function ToObject(value) {
            RequireObjectCoercible(value);
            return $Object(value);
          };
        }
      });
      var require_maxSafeInteger = __commonJS3({
        "../../node_modules/es-abstract/helpers/maxSafeInteger.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var $Math = GetIntrinsic("%Math%");
          var $Number = GetIntrinsic("%Number%");
          module2.exports = $Number.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;
        }
      });
      var require_abs = __commonJS3({
        "../../node_modules/es-abstract/2021/abs.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var $abs = GetIntrinsic("%Math.abs%");
          module2.exports = function abs(x2) {
            return $abs(x2);
          };
        }
      });
      var require_floor = __commonJS3({
        "../../node_modules/es-abstract/2021/floor.js"(exports2, module2) {
          "use strict";
          var $floor = Math.floor;
          module2.exports = function floor(x2) {
            return $floor(x2);
          };
        }
      });
      var require_shams2 = __commonJS3({
        "../../node_modules/has-tostringtag/shams.js"(exports2, module2) {
          "use strict";
          var hasSymbols = require_shams();
          module2.exports = function hasToStringTagShams() {
            return hasSymbols() && !!Symbol.toStringTag;
          };
        }
      });
      var require_is_regex = __commonJS3({
        "../../node_modules/is-regex/index.js"(exports2, module2) {
          "use strict";
          var callBound = require_callBound();
          var hasToStringTag = require_shams2()();
          var has;
          var $exec;
          var isRegexMarker;
          var badStringifier;
          if (hasToStringTag) {
            has = callBound("Object.prototype.hasOwnProperty");
            $exec = callBound("RegExp.prototype.exec");
            isRegexMarker = {};
            throwRegexMarker = function() {
              throw isRegexMarker;
            };
            badStringifier = {
              toString: throwRegexMarker,
              valueOf: throwRegexMarker
            };
            if (typeof Symbol.toPrimitive === "symbol") {
              badStringifier[Symbol.toPrimitive] = throwRegexMarker;
            }
          }
          var throwRegexMarker;
          var $toString = callBound("Object.prototype.toString");
          var gOPD = Object.getOwnPropertyDescriptor;
          var regexClass = "[object RegExp]";
          module2.exports = hasToStringTag ? function isRegex(value) {
            if (!value || typeof value !== "object") {
              return false;
            }
            var descriptor = gOPD(value, "lastIndex");
            var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
            if (!hasLastIndexDataProperty) {
              return false;
            }
            try {
              $exec(value, badStringifier);
            } catch (e2) {
              return e2 === isRegexMarker;
            }
          } : function isRegex(value) {
            if (!value || typeof value !== "object" && typeof value !== "function") {
              return false;
            }
            return $toString(value) === regexClass;
          };
        }
      });
      var require_safe_regex_test = __commonJS3({
        "../../node_modules/safe-regex-test/index.js"(exports2, module2) {
          "use strict";
          var callBound = require_callBound();
          var GetIntrinsic = require_get_intrinsic();
          var isRegex = require_is_regex();
          var $exec = callBound("RegExp.prototype.exec");
          var $TypeError = GetIntrinsic("%TypeError%");
          module2.exports = function regexTester(regex) {
            if (!isRegex(regex)) {
              throw new $TypeError("`regex` must be a RegExp");
            }
            return function test2(s2) {
              return $exec(regex, s2) !== null;
            };
          };
        }
      });
      var require_isPrimitive2 = __commonJS3({
        "../../node_modules/es-abstract/helpers/isPrimitive.js"(exports2, module2) {
          "use strict";
          module2.exports = function isPrimitive(value) {
            return value === null || typeof value !== "function" && typeof value !== "object";
          };
        }
      });
      var require_isPrimitive3 = __commonJS3({
        "../../node_modules/es-to-primitive/helpers/isPrimitive.js"(exports2, module2) {
          "use strict";
          module2.exports = function isPrimitive(value) {
            return value === null || typeof value !== "function" && typeof value !== "object";
          };
        }
      });
      var require_is_callable = __commonJS3({
        "../../node_modules/is-callable/index.js"(exports2, module2) {
          "use strict";
          var fnToStr = Function.prototype.toString;
          var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
          var badArrayLike;
          var isCallableMarker;
          if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
            try {
              badArrayLike = Object.defineProperty({}, "length", {
                get: function() {
                  throw isCallableMarker;
                }
              });
              isCallableMarker = {};
              reflectApply(function() {
                throw 42;
              }, null, badArrayLike);
            } catch (_2) {
              if (_2 !== isCallableMarker) {
                reflectApply = null;
              }
            }
          } else {
            reflectApply = null;
          }
          var constructorRegex = /^\s*class\b/;
          var isES6ClassFn = function isES6ClassFunction(value) {
            try {
              var fnStr = fnToStr.call(value);
              return constructorRegex.test(fnStr);
            } catch (e2) {
              return false;
            }
          };
          var tryFunctionObject = function tryFunctionToStr(value) {
            try {
              if (isES6ClassFn(value)) {
                return false;
              }
              fnToStr.call(value);
              return true;
            } catch (e2) {
              return false;
            }
          };
          var toStr = Object.prototype.toString;
          var objectClass = "[object Object]";
          var fnClass = "[object Function]";
          var genClass = "[object GeneratorFunction]";
          var ddaClass = "[object HTMLAllCollection]";
          var ddaClass2 = "[object HTML document.all class]";
          var ddaClass3 = "[object HTMLCollection]";
          var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
          var isIE68 = !(0 in [,]);
          var isDDA = function isDocumentDotAll() {
            return false;
          };
          if (typeof document === "object") {
            all = document.all;
            if (toStr.call(all) === toStr.call(document.all)) {
              isDDA = function isDocumentDotAll(value) {
                if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
                  try {
                    var str = toStr.call(value);
                    return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
                  } catch (e2) {
                  }
                }
                return false;
              };
            }
          }
          var all;
          module2.exports = reflectApply ? function isCallable(value) {
            if (isDDA(value)) {
              return true;
            }
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            try {
              reflectApply(value, null, badArrayLike);
            } catch (e2) {
              if (e2 !== isCallableMarker) {
                return false;
              }
            }
            return !isES6ClassFn(value) && tryFunctionObject(value);
          } : function isCallable(value) {
            if (isDDA(value)) {
              return true;
            }
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (hasToStringTag) {
              return tryFunctionObject(value);
            }
            if (isES6ClassFn(value)) {
              return false;
            }
            var strClass = toStr.call(value);
            if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
              return false;
            }
            return tryFunctionObject(value);
          };
        }
      });
      var require_is_date_object = __commonJS3({
        "../../node_modules/is-date-object/index.js"(exports2, module2) {
          "use strict";
          var getDay = Date.prototype.getDay;
          var tryDateObject = function tryDateGetDayCall(value) {
            try {
              getDay.call(value);
              return true;
            } catch (e2) {
              return false;
            }
          };
          var toStr = Object.prototype.toString;
          var dateClass = "[object Date]";
          var hasToStringTag = require_shams2()();
          module2.exports = function isDateObject(value) {
            if (typeof value !== "object" || value === null) {
              return false;
            }
            return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
          };
        }
      });
      var require_is_symbol = __commonJS3({
        "../../node_modules/is-symbol/index.js"(exports2, module2) {
          "use strict";
          var toStr = Object.prototype.toString;
          var hasSymbols = require_has_symbols()();
          if (hasSymbols) {
            symToStr = Symbol.prototype.toString;
            symStringRegex = /^Symbol\(.*\)$/;
            isSymbolObject = function isRealSymbolObject(value) {
              if (typeof value.valueOf() !== "symbol") {
                return false;
              }
              return symStringRegex.test(symToStr.call(value));
            };
            module2.exports = function isSymbol2(value) {
              if (typeof value === "symbol") {
                return true;
              }
              if (toStr.call(value) !== "[object Symbol]") {
                return false;
              }
              try {
                return isSymbolObject(value);
              } catch (e2) {
                return false;
              }
            };
          } else {
            module2.exports = function isSymbol2(value) {
              return false;
            };
          }
          var symToStr;
          var symStringRegex;
          var isSymbolObject;
        }
      });
      var require_es2015 = __commonJS3({
        "../../node_modules/es-to-primitive/es2015.js"(exports2, module2) {
          "use strict";
          var hasSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "symbol";
          var isPrimitive = require_isPrimitive3();
          var isCallable = require_is_callable();
          var isDate = require_is_date_object();
          var isSymbol2 = require_is_symbol();
          var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
            if (typeof O === "undefined" || O === null) {
              throw new TypeError("Cannot call method on " + O);
            }
            if (typeof hint !== "string" || hint !== "number" && hint !== "string") {
              throw new TypeError('hint must be "string" or "number"');
            }
            var methodNames = hint === "string" ? ["toString", "valueOf"] : ["valueOf", "toString"];
            var method, result, i2;
            for (i2 = 0; i2 < methodNames.length; ++i2) {
              method = O[methodNames[i2]];
              if (isCallable(method)) {
                result = method.call(O);
                if (isPrimitive(result)) {
                  return result;
                }
              }
            }
            throw new TypeError("No default value");
          };
          var GetMethod = function GetMethod2(O, P2) {
            var func = O[P2];
            if (func !== null && typeof func !== "undefined") {
              if (!isCallable(func)) {
                throw new TypeError(func + " returned for property " + P2 + " of object " + O + " is not a function");
              }
              return func;
            }
            return void 0;
          };
          module2.exports = function ToPrimitive(input) {
            if (isPrimitive(input)) {
              return input;
            }
            var hint = "default";
            if (arguments.length > 1) {
              if (arguments[1] === String) {
                hint = "string";
              } else if (arguments[1] === Number) {
                hint = "number";
              }
            }
            var exoticToPrim;
            if (hasSymbols) {
              if (Symbol.toPrimitive) {
                exoticToPrim = GetMethod(input, Symbol.toPrimitive);
              } else if (isSymbol2(input)) {
                exoticToPrim = Symbol.prototype.valueOf;
              }
            }
            if (typeof exoticToPrim !== "undefined") {
              var result = exoticToPrim.call(input, hint);
              if (isPrimitive(result)) {
                return result;
              }
              throw new TypeError("unable to convert exotic object to primitive");
            }
            if (hint === "default" && (isDate(input) || isSymbol2(input))) {
              hint = "string";
            }
            return ordinaryToPrimitive(input, hint === "default" ? "number" : hint);
          };
        }
      });
      var require_ToPrimitive = __commonJS3({
        "../../node_modules/es-abstract/2021/ToPrimitive.js"(exports2, module2) {
          "use strict";
          var toPrimitive = require_es2015();
          module2.exports = function ToPrimitive(input) {
            if (arguments.length > 1) {
              return toPrimitive(input, arguments[1]);
            }
            return toPrimitive(input);
          };
        }
      });
      var require_ToNumber = __commonJS3({
        "../../node_modules/es-abstract/2021/ToNumber.js"(exports2, module2) {
          "use strict";
          var GetIntrinsic = require_get_intrinsic();
          var $TypeError = GetIntrinsic("%TypeError%");
          var $Number = GetIntrinsic("%Number%");
          var $RegExp = GetIntrinsic("%RegExp%");
          var $parseInteger = GetIntrinsic("%parseInt%");
          var callBound = require_callBound();
          var regexTester = require_safe_regex_test();
          var isPrimitive = require_isPrimitive2();
          var $strSlice = callBound("String.prototype.slice");
          var isBinary = regexTester(/^0b[01]+$/i);
          var isOctal = regexTester(/^0o[0-7]+$/i);
          var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
          var nonWS = ["\x85", "\u200B", "\uFFFE"].join("");
          var nonWSregex = new $RegExp("[" + nonWS + "]", "g");
          var hasNonWS = regexTester(nonWSregex);
          var ws = [
            "	\n\v\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003",
            "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028",
            "\u2029\uFEFF"
          ].join("");
          var trimRegex = new RegExp("(^[" + ws + "]+)|([" + ws + "]+$)", "g");
          var $replace = callBound("String.prototype.replace");
          var $trim = function(value) {
            return $replace(value, trimRegex, "");
          };
          var ToPrimitive = require_ToPrimitive();
          module2.exports = function ToNumber(argument) {
            var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);
            if (typeof value === "symbol") {
              throw new $TypeError("Cannot convert a Symbol value to a number");
            }
            if (typeof value === "bigint") {
              throw new $TypeError("Conversion from 'BigInt' to 'number' is not allowed.");
            }
            if (typeof value === "string") {
              if (isBinary(value)) {
                return ToNumber($parseInteger($strSlice(value, 2), 2));
              } else if (isOctal(value)) {
                return ToNumber($parseInteger($strSlice(value, 2), 8));
              } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
                return NaN;
              }
              var trimmed = $trim(value);
              if (trimmed !== value) {
                return ToNumber(trimmed);
              }
            }
            return $Number(value);
          };
        }
      });
      var require_isNaN = __commonJS3({
        "../../node_modules/es-abstract/helpers/isNaN.js"(exports2, module2) {
          "use strict";
          module2.exports = Number.isNaN || function isNaN2(a2) {
            return a2 !== a2;
          };
        }
      });
      var require_isFinite = __commonJS3({
        "../../node_modules/es-abstract/helpers/isFinite.js"(exports2, module2) {
          "use strict";
          var $isNaN = Number.isNaN || function(a2) {
            return a2 !== a2;
          };
          module2.exports = Number.isFinite || function(x2) {
            return typeof x2 === "number" && !$isNaN(x2) && x2 !== Infinity && x2 !== -Infinity;
          };
        }
      });
      var require_sign = __commonJS3({
        "../../node_modules/es-abstract/helpers/sign.js"(exports2, module2) {
          "use strict";
          module2.exports = function sign(number2) {
            return number2 >= 0 ? 1 : -1;
          };
        }
      });
      var require_ToIntegerOrInfinity = __commonJS3({
        "../../node_modules/es-abstract/2021/ToIntegerOrInfinity.js"(exports2, module2) {
          "use strict";
          var abs = require_abs();
          var floor = require_floor();
          var ToNumber = require_ToNumber();
          var $isNaN = require_isNaN();
          var $isFinite = require_isFinite();
          var $sign = require_sign();
          module2.exports = function ToIntegerOrInfinity(value) {
            var number2 = ToNumber(value);
            if ($isNaN(number2) || number2 === 0) {
              return 0;
            }
            if (!$isFinite(number2)) {
              return number2;
            }
            var integer = floor(abs(number2));
            if (integer === 0) {
              return 0;
            }
            return $sign(number2) * integer;
          };
        }
      });
      var require_ToLength = __commonJS3({
        "../../node_modules/es-abstract/2021/ToLength.js"(exports2, module2) {
          "use strict";
          var MAX_SAFE_INTEGER3 = require_maxSafeInteger();
          var ToIntegerOrInfinity = require_ToIntegerOrInfinity();
          module2.exports = function ToLength(argument) {
            var len = ToIntegerOrInfinity(argument);
            if (len <= 0) {
              return 0;
            }
            if (len > MAX_SAFE_INTEGER3) {
              return MAX_SAFE_INTEGER3;
            }
            return len;
          };
        }
      });
      var require_IsCallable = __commonJS3({
        "../../node_modules/es-abstract/2021/IsCallable.js"(exports2, module2) {
          "use strict";
          module2.exports = require_is_callable();
        }
      });
      var require_implementation5 = __commonJS3({
        "../../node_modules/array.prototype.find/implementation.js"(exports2, module2) {
          "use strict";
          var ToObject = require_ToObject();
          var ToLength = require_ToLength();
          var IsCallable = require_IsCallable();
          module2.exports = function find(predicate) {
            var list2 = ToObject(this);
            var length = ToLength(list2.length);
            if (!IsCallable(predicate)) {
              throw new TypeError("Array#find: predicate must be a function");
            }
            if (length === 0) {
              return void 0;
            }
            var thisArg;
            if (arguments.length > 0) {
              thisArg = arguments[1];
            }
            for (var i2 = 0, value; i2 < length; i2++) {
              value = list2[i2];
              if (predicate.apply(thisArg, [value, i2, list2])) {
                return value;
              }
            }
            return void 0;
          };
        }
      });
      var require_polyfill3 = __commonJS3({
        "../../node_modules/array.prototype.find/polyfill.js"(exports2, module2) {
          "use strict";
          module2.exports = function getPolyfill() {
            var implemented = Array.prototype.find && [, 1].find(function() {
              return true;
            }) !== 1;
            return implemented ? Array.prototype.find : require_implementation5();
          };
        }
      });
      var require_es_shim_unscopables = __commonJS3({
        "../../node_modules/es-shim-unscopables/index.js"(exports2, module2) {
          "use strict";
          var has = require_src();
          var hasUnscopables = typeof Symbol === "function" && typeof Symbol.unscopables === "symbol";
          var map2 = hasUnscopables && Array.prototype[Symbol.unscopables];
          var $TypeError = TypeError;
          module2.exports = function shimUnscopables(method) {
            if (typeof method !== "string" || !method) {
              throw new $TypeError("method must be a non-empty string");
            }
            if (!has(Array.prototype, method)) {
              throw new $TypeError("method must be on Array.prototype");
            }
            if (hasUnscopables) {
              map2[method] = true;
            }
          };
        }
      });
      var require_shim3 = __commonJS3({
        "../../node_modules/array.prototype.find/shim.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var shimUnscopables = require_es_shim_unscopables();
          var getPolyfill = require_polyfill3();
          module2.exports = function shimArrayPrototypeFind() {
            var polyfill = getPolyfill();
            define2(Array.prototype, { find: polyfill }, {
              find: function() {
                return Array.prototype.find !== polyfill;
              }
            });
            shimUnscopables("find");
            return polyfill;
          };
        }
      });
      var require_array_prototype = __commonJS3({
        "../../node_modules/array.prototype.find/index.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var callBound = require_callBound();
          var RequireObjectCoercible = require_RequireObjectCoercible();
          var implementation = require_implementation5();
          var getPolyfill = require_polyfill3();
          var shim = require_shim3();
          var $slice = callBound("Array.prototype.slice");
          var polyfill = getPolyfill();
          var boundFindShim = function find(array, predicate) {
            RequireObjectCoercible(array);
            var args = $slice(arguments, 1);
            return polyfill.apply(array, args);
          };
          define2(boundFindShim, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = boundFindShim;
        }
      });
      var require_functions_have_names = __commonJS3({
        "../../node_modules/functions-have-names/index.js"(exports2, module2) {
          "use strict";
          var functionsHaveNames = function functionsHaveNames2() {
            return typeof function f() {
            }.name === "string";
          };
          var gOPD = Object.getOwnPropertyDescriptor;
          if (gOPD) {
            try {
              gOPD([], "length");
            } catch (e2) {
              gOPD = null;
            }
          }
          functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
            if (!functionsHaveNames() || !gOPD) {
              return false;
            }
            var desc = gOPD(function() {
            }, "name");
            return !!desc && !!desc.configurable;
          };
          var $bind = Function.prototype.bind;
          functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
            return functionsHaveNames() && typeof $bind === "function" && function f() {
            }.bind().name !== "";
          };
          module2.exports = functionsHaveNames;
        }
      });
      var require_implementation6 = __commonJS3({
        "../../node_modules/function.prototype.name/implementation.js"(exports2, module2) {
          "use strict";
          var IsCallable = require_IsCallable();
          var functionsHaveNames = require_functions_have_names()();
          var callBound = require_callBound();
          var $functionToString = callBound("Function.prototype.toString");
          var $stringMatch = callBound("String.prototype.match");
          var classRegex = /^class /;
          var isClass = function isClassConstructor(fn) {
            if (IsCallable(fn)) {
              return false;
            }
            if (typeof fn !== "function") {
              return false;
            }
            try {
              var match = $stringMatch($functionToString(fn), classRegex);
              return !!match;
            } catch (e2) {
            }
            return false;
          };
          var regex = /\s*function\s+([^(\s]*)\s*/;
          var functionProto = Function.prototype;
          module2.exports = function getName() {
            if (!isClass(this) && !IsCallable(this)) {
              throw new TypeError("Function.prototype.name sham getter called on non-function");
            }
            if (functionsHaveNames) {
              return this.name;
            }
            if (this === functionProto) {
              return "";
            }
            var str = $functionToString(this);
            var match = $stringMatch(str, regex);
            var name = match && match[1];
            return name;
          };
        }
      });
      var require_polyfill4 = __commonJS3({
        "../../node_modules/function.prototype.name/polyfill.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation6();
          module2.exports = function getPolyfill() {
            return implementation;
          };
        }
      });
      var require_shim4 = __commonJS3({
        "../../node_modules/function.prototype.name/shim.js"(exports2, module2) {
          "use strict";
          var supportsDescriptors = require_define_properties().supportsDescriptors;
          var functionsHaveNames = require_functions_have_names()();
          var getPolyfill = require_polyfill4();
          var defineProperty2 = Object.defineProperty;
          var TypeErr = TypeError;
          module2.exports = function shimName() {
            var polyfill = getPolyfill();
            if (functionsHaveNames) {
              return polyfill;
            }
            if (!supportsDescriptors) {
              throw new TypeErr("Shimming Function.prototype.name support requires ES5 property descriptor support.");
            }
            var functionProto = Function.prototype;
            defineProperty2(functionProto, "name", {
              configurable: true,
              enumerable: false,
              get: function() {
                var name = polyfill.call(this);
                if (this !== functionProto) {
                  defineProperty2(this, "name", {
                    configurable: true,
                    enumerable: false,
                    value: name,
                    writable: false
                  });
                }
                return name;
              }
            });
            return polyfill;
          };
        }
      });
      var require_function_prototype = __commonJS3({
        "../../node_modules/function.prototype.name/index.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var callBind = require_call_bind();
          var implementation = require_implementation6();
          var getPolyfill = require_polyfill4();
          var shim = require_shim4();
          var bound = callBind(implementation);
          define2(bound, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = bound;
        }
      });
      var require_getComponentName = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/getComponentName.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = getComponentName;
          var _functionPrototype = _interopRequireDefault2(require_function_prototype());
          var _reactIs = require_react_is2();
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function getComponentName(Component6) {
            if (typeof Component6 === "string") {
              return Component6;
            }
            if (typeof Component6 === "function") {
              return Component6.displayName || (0, _functionPrototype["default"])(Component6);
            }
            if ((0, _reactIs.isForwardRef)({
              type: Component6,
              $$typeof: _reactIs.Element
            })) {
              return Component6.displayName;
            }
            if ((0, _reactIs.isMemo)(Component6)) {
              return getComponentName(Component6.type);
            }
            return null;
          }
        }
      });
      var require_childrenOfType = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/childrenOfType.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _arrayPrototype = _interopRequireDefault2(require_array_prototype());
          var _getComponentName = _interopRequireDefault2(require_getComponentName());
          var _renderableChildren = _interopRequireDefault2(require_renderableChildren());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function onlyTypes(types2, children, componentName) {
            if (!children.every(function(child) {
              return child && (0, _arrayPrototype["default"])(types2, function(Type) {
                return Type === "*" || child.type === Type;
              });
            })) {
              var typeNames = types2.map(_getComponentName["default"]).join(", or ");
              return new TypeError("`".concat(componentName, "` only accepts children of type ").concat(typeNames));
            }
            return null;
          }
          function isRequired(types2, children, componentName) {
            if (children.length === 0) {
              var typeNames = types2.map(_getComponentName["default"]).join(", or ");
              return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(typeNames));
            }
            return null;
          }
          function childrenOfType() {
            for (var _len = arguments.length, types2 = new Array(_len), _key = 0; _key < _len; _key++) {
              types2[_key] = arguments[_key];
            }
            if (types2.length < 1) {
              throw new TypeError("childrenOfType: at least 1 type is required");
            }
            function validator(props, propName, componentName) {
              return onlyTypes(types2, (0, _renderableChildren["default"])(props[propName]), componentName);
            }
            validator.isRequired = function(props, propName, componentName) {
              var children = (0, _renderableChildren["default"])(props[propName]);
              return isRequired(types2, children, componentName) || onlyTypes(types2, children, componentName);
            };
            return (0, _wrapValidator["default"])(validator, "childrenOfType", types2);
          }
          var _default = childrenOfType;
          exports2["default"] = _default;
        }
      });
      var require_isInteger = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/isInteger.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var floor = Math.floor;
          var finite = isFinite;
          var _default = Number.isInteger || function(x2) {
            return typeof x2 === "number" && finite(x2) && floor(x2) === x2;
          };
          exports2["default"] = _default;
        }
      });
      var require_integer = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/integer.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _isInteger = _interopRequireDefault2(require_isInteger());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function requiredInteger(props, propName, componentName) {
            var propValue = props[propName];
            if (propValue == null || !(0, _isInteger["default"])(propValue)) {
              return new RangeError("".concat(propName, " in ").concat(componentName, " must be an integer"));
            }
            return null;
          }
          var validator = function integer(props, propName) {
            var propValue = props[propName];
            if (propValue == null) {
              return null;
            }
            for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              rest[_key - 2] = arguments[_key];
            }
            return requiredInteger.apply(void 0, [props, propName].concat(rest));
          };
          validator.isRequired = requiredInteger;
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(validator, "integer");
          };
          exports2["default"] = _default;
        }
      });
      var require_implementation7 = __commonJS3({
        "../../node_modules/object-is/implementation.js"(exports2, module2) {
          "use strict";
          var numberIsNaN = function(value) {
            return value !== value;
          };
          module2.exports = function is(a2, b22) {
            if (a2 === 0 && b22 === 0) {
              return 1 / a2 === 1 / b22;
            }
            if (a2 === b22) {
              return true;
            }
            if (numberIsNaN(a2) && numberIsNaN(b22)) {
              return true;
            }
            return false;
          };
        }
      });
      var require_polyfill5 = __commonJS3({
        "../../node_modules/object-is/polyfill.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation7();
          module2.exports = function getPolyfill() {
            return typeof Object.is === "function" ? Object.is : implementation;
          };
        }
      });
      var require_shim5 = __commonJS3({
        "../../node_modules/object-is/shim.js"(exports2, module2) {
          "use strict";
          var getPolyfill = require_polyfill5();
          var define2 = require_define_properties();
          module2.exports = function shimObjectIs() {
            var polyfill = getPolyfill();
            define2(Object, { is: polyfill }, {
              is: function testObjectIs() {
                return Object.is !== polyfill;
              }
            });
            return polyfill;
          };
        }
      });
      var require_object_is = __commonJS3({
        "../../node_modules/object-is/index.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var callBind = require_call_bind();
          var implementation = require_implementation7();
          var getPolyfill = require_polyfill5();
          var shim = require_shim5();
          var polyfill = callBind(getPolyfill(), Object);
          define2(polyfill, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = polyfill;
        }
      });
      var require_nonNegativeNumber = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/nonNegativeNumber.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _objectIs = _interopRequireDefault2(require_object_is());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function isNonNegative(x2) {
            return typeof x2 === "number" && isFinite(x2) && x2 >= 0 && !(0, _objectIs["default"])(x2, -0);
          }
          function nonNegativeNumber(props, propName, componentName) {
            var value = props[propName];
            if (value == null || isNonNegative(value)) {
              return null;
            }
            return new RangeError("".concat(propName, " in ").concat(componentName, " must be a non-negative number"));
          }
          function requiredNonNegativeNumber(props, propName, componentName) {
            var value = props[propName];
            if (isNonNegative(value)) {
              return null;
            }
            return new RangeError("".concat(propName, " in ").concat(componentName, " must be a non-negative number"));
          }
          nonNegativeNumber.isRequired = requiredNonNegativeNumber;
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(nonNegativeNumber, "nonNegativeNumber");
          };
          exports2["default"] = _default;
        }
      });
      var require_nonNegativeInteger = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/nonNegativeInteger.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _and = _interopRequireDefault2(require_and());
          var _integer = _interopRequireDefault2(require_integer());
          var _nonNegativeNumber = _interopRequireDefault2(require_nonNegativeNumber());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var _default = (0, _and["default"])([(0, _integer["default"])(), (0, _nonNegativeNumber["default"])()], "nonNegativeInteger");
          exports2["default"] = _default;
        }
      });
      var require_typeOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/helpers/typeOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = typeOf;
          var _react = _interopRequireDefault2(require_react());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function typeOf(child) {
            if (child === null) {
              return "null";
            }
            if (Array.isArray(child)) {
              return "array";
            }
            if (_typeof(child) !== "object") {
              return _typeof(child);
            }
            if (/* @__PURE__ */ _react["default"].isValidElement(child)) {
              return child.type;
            }
            return child;
          }
        }
      });
      var require_object3 = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/object.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _isPlainObject = _interopRequireDefault2(require_isPlainObject3());
          var _typeOf = _interopRequireDefault2(require_typeOf());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var ReactPropTypeLocationNames = {
            prop: "prop",
            context: "context",
            childContext: "child context"
          };
          function object(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (propValue == null) {
              return null;
            }
            if ((0, _isPlainObject["default"])(propValue)) {
              return null;
            }
            var locationName = ReactPropTypeLocationNames[location] || location;
            return new TypeError("Invalid ".concat(locationName, " `").concat(propFullName, "` of type `").concat((0, _typeOf["default"])(propValue), "` supplied to `").concat(componentName, "`, expected `object`."));
          }
          object.isRequired = function objectRequired(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (propValue == null) {
              var locationName = ReactPropTypeLocationNames[location] || location;
              return new TypeError("The ".concat(locationName, " `").concat(propFullName, "` is marked as required in `").concat(componentName, "`, but its value is `").concat(propValue, "`."));
            }
            for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
              rest[_key - 5] = arguments[_key];
            }
            return object.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
          };
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(object, "object");
          };
          exports2["default"] = _default;
        }
      });
      var require_withShape = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/withShape.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = withShape;
          var _and = _interopRequireDefault2(require_and());
          var _shape = _interopRequireDefault2(require_shape());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function withShape(type, shapeTypes) {
            if (typeof type !== "function") {
              throw new TypeError("type must be a valid PropType");
            }
            var shapeValidator = (0, _shape["default"])(shapeTypes);
            return (0, _and["default"])([type, shapeValidator], "withShape");
          }
        }
      });
      var require_sequenceOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/sequenceOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = sequenceOfValidator;
          var _propTypes = require_prop_types();
          var _and = _interopRequireDefault2(require_and());
          var _between = _interopRequireDefault2(require_between());
          var _nonNegativeInteger = _interopRequireDefault2(require_nonNegativeInteger());
          var _object = _interopRequireDefault2(require_object3());
          var _withShape = _interopRequireDefault2(require_withShape());
          var _typeOf = _interopRequireDefault2(require_typeOf());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function ownKeys(object, enumerableOnly) {
            var keys22 = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys22.push.apply(keys22, symbols);
            }
            return keys22;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty2(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var minValidator = _nonNegativeInteger["default"];
          var maxValidator = (0, _and["default"])([_nonNegativeInteger["default"], (0, _between["default"])({
            gte: 1
          })]);
          function validateRange(min, max) {
            if (typeof max !== "number" || typeof min !== "number") {
              return null;
            }
            if (min <= max) {
              return null;
            }
            return new RangeError("min must be less than or equal to max");
          }
          var specifierShape = {
            validator: function validator(props, propName) {
              var propValue = props[propName];
              if (typeof propValue !== "function") {
                return new TypeError('"validator" must be a propType validator function');
              }
              return null;
            },
            min: function min(props, propName) {
              return minValidator(props, propName) || validateRange(props.min, props.max);
            },
            max: function max(props, propName) {
              return maxValidator(props, propName) || validateRange(props.min, props.max);
            }
          };
          function getMinMax(_ref) {
            var min = _ref.min, max = _ref.max;
            var minimum;
            var maximum;
            if (typeof min !== "number" && typeof max !== "number") {
              minimum = 1;
              maximum = 1;
            } else {
              minimum = typeof min === "number" ? min : 1;
              maximum = typeof max === "number" ? max : Infinity;
            }
            return {
              minimum,
              maximum
            };
          }
          function chunkByType(items) {
            var chunk = [];
            var lastType;
            return items.reduce(function(chunks, item) {
              var itemType = (0, _typeOf["default"])(item);
              if (!lastType || itemType === lastType) {
                chunk.push(item);
              } else {
                chunks.push(chunk);
                chunk = [item];
              }
              lastType = itemType;
              return chunks;
            }, []).concat(chunk.length > 0 ? [chunk] : []);
          }
          function validateChunks(specifiers, props, propName, componentName) {
            var items = props[propName];
            var chunks = chunkByType(items);
            for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
              rest[_key - 4] = arguments[_key];
            }
            for (var i2 = 0; i2 < specifiers.length; i2 += 1) {
              var _specifiers$i = specifiers[i2], validator = _specifiers$i.validator, min = _specifiers$i.min, max = _specifiers$i.max;
              var _getMinMax = getMinMax({
                min,
                max
              }), minimum = _getMinMax.minimum, maximum = _getMinMax.maximum;
              if (chunks.length === 0 && minimum === 0) {
                continue;
              }
              var arrayOfValidator = (0, _propTypes.arrayOf)(validator).isRequired;
              var chunk = chunks.shift();
              var chunkError = arrayOfValidator.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, _defineProperty2({}, propName, chunk)), propName, componentName].concat(rest));
              if (chunkError) {
                if (minimum === 0) {
                  chunks.unshift(chunk);
                  continue;
                }
                return chunkError;
              }
              if (chunk.length < minimum) {
                return new RangeError("".concat(componentName, ": specifier index ").concat(i2, " requires a minimum of ").concat(min, " items, but only has ").concat(chunk.length, "."));
              }
              if (chunk.length > maximum) {
                return new RangeError("".concat(componentName, ": specifier index ").concat(i2, " requires a maximum of ").concat(max, " items, but has ").concat(chunk.length, "."));
              }
            }
            if (chunks.length > 0) {
              return new TypeError("".concat(componentName, ": after all ").concat(specifiers.length, " specifiers matched, ").concat(chunks.length, " types of items were remaining."));
            }
            return null;
          }
          var specifierValidator = (0, _withShape["default"])((0, _object["default"])(), specifierShape).isRequired;
          function sequenceOfValidator() {
            for (var _len2 = arguments.length, specifiers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              specifiers[_key2] = arguments[_key2];
            }
            if (specifiers.length === 0) {
              throw new RangeError("sequenceOf: at least one specifier is required");
            }
            var errors = specifiers.map(function(specifier, i2) {
              return specifierValidator({
                specifier
              }, "specifier", "sequenceOf specifier", "suequenceOf specifier, index ".concat(i2), "specifier, index ".concat(i2));
            });
            if (errors.some(Boolean)) {
              throw new TypeError("\n      sequenceOf: all specifiers must match the appropriate shape.\n\n      Errors:\n        ".concat(errors.map(function(e2, i2) {
                return " - Argument index ".concat(i2, ": ").concat(e2.message);
              }).join(",\n        "), "\n    "));
            }
            var validator = function sequenceOf(props, propName) {
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                rest[_key3 - 2] = arguments[_key3];
              }
              var error = _propTypes.array.apply(void 0, [props, propName].concat(rest));
              if (error) {
                return error;
              }
              return validateChunks.apply(void 0, [specifiers, props, propName].concat(rest));
            };
            validator.isRequired = function sequenceOfRequired(props, propName, componentName) {
              for (var _len4 = arguments.length, rest = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
                rest[_key4 - 3] = arguments[_key4];
              }
              var error = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));
              if (error) {
                return error;
              }
              return validateChunks.apply(void 0, [specifiers, props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, "sequenceOf", specifiers);
          }
        }
      });
      var require_childrenSequenceOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/childrenSequenceOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = childrenSequenceOfValidator;
          var _sequenceOf = _interopRequireDefault2(require_sequenceOf());
          var _renderableChildren = _interopRequireDefault2(require_renderableChildren());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function ownKeys(object, enumerableOnly) {
            var keys22 = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys22.push.apply(keys22, symbols);
            }
            return keys22;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty2(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function childrenSequenceOfValidator() {
            for (var _len = arguments.length, specifiers = new Array(_len), _key = 0; _key < _len; _key++) {
              specifiers[_key] = arguments[_key];
            }
            var seq = _sequenceOf["default"].apply(void 0, specifiers);
            var validator = function childrenSequenceOf(props, propName, componentName) {
              if (propName !== "children") {
                return new TypeError("".concat(componentName, ' is using the childrenSequenceOf validator on non-children prop "').concat(propName, '"'));
              }
              var propValue = props[propName];
              var children = (0, _renderableChildren["default"])(propValue);
              if (children.length === 0) {
                return null;
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return seq.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, {
                children
              }), propName, componentName].concat(rest));
            };
            validator.isRequired = function childrenSequenceOfRequired(props, propName, componentName) {
              if (propName !== "children") {
                return new TypeError("".concat(componentName, ' is using the childrenSequenceOf validator on non-children prop "').concat(propName, '"'));
              }
              var propValue = props[propName];
              var children = (0, _renderableChildren["default"])(propValue);
              if (children.length === 0) {
                return new TypeError("".concat(componentName, ": renderable children are required."));
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                rest[_key3 - 3] = arguments[_key3];
              }
              return seq.isRequired.apply(seq, [_objectSpread(_objectSpread({}, props), {}, {
                children
              }), propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, "childrenSequenceOf", specifiers);
          }
        }
      });
      var require_componentWithName = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/componentWithName.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = componentWithName;
          var _react = _interopRequireDefault2(require_react());
          var _isRegex = _interopRequireDefault2(require_is_regex());
          var _arrayPrototype = _interopRequireDefault2(require_array_prototype());
          var _getComponentName = _interopRequireDefault2(require_getComponentName());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function stripHOCs(fullName, namesOfHOCsToStrip) {
            var innerName = fullName;
            while (/\([^()]*\)/g.test(innerName)) {
              var HOC = innerName;
              var previousHOC = void 0;
              do {
                previousHOC = HOC;
                HOC = previousHOC.replace(/\([^()]*\)/g, "");
              } while (previousHOC !== HOC);
              if (namesOfHOCsToStrip.indexOf(HOC) === -1) {
                return innerName;
              }
              innerName = innerName.replace(RegExp("^".concat(HOC, "\\(|\\)$"), "g"), "");
            }
            return innerName;
          }
          function hasName(name, namesOfHOCsToStrip, propValue, propName, componentName) {
            for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
              rest[_key - 5] = arguments[_key];
            }
            if (Array.isArray(propValue)) {
              return (0, _arrayPrototype["default"])(propValue.map(function(item) {
                return hasName.apply(void 0, [name, namesOfHOCsToStrip, item, propName, componentName].concat(rest));
              }), Boolean) || null;
            }
            if (!/* @__PURE__ */ _react["default"].isValidElement(propValue)) {
              return new TypeError("".concat(componentName, ".").concat(propName, " is not a valid React element"));
            }
            var type = propValue.type;
            var componentNameFromType = (0, _getComponentName["default"])(type);
            var innerComponentName = namesOfHOCsToStrip.length > 0 ? stripHOCs(componentNameFromType, namesOfHOCsToStrip) : componentNameFromType;
            if ((0, _isRegex["default"])(name) && !name.test(innerComponentName)) {
              return new TypeError("`".concat(componentName, ".").concat(propName, "` only accepts components matching the regular expression ").concat(name));
            }
            if (!(0, _isRegex["default"])(name) && innerComponentName !== name) {
              return new TypeError("`".concat(componentName, ".").concat(propName, "` only accepts components named ").concat(name, ", got ").concat(innerComponentName));
            }
            return null;
          }
          function componentWithName(name) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (typeof name !== "string" && !(0, _isRegex["default"])(name)) {
              throw new TypeError("name must be a string or a regex");
            }
            var passedOptions = Object.keys(options);
            if (passedOptions.length > 1 || passedOptions.length === 1 && passedOptions[0] !== "stripHOCs") {
              throw new TypeError("The only options supported are: \u201CstripHOCs\u201D, got: \u201C".concat(passedOptions.join("\u201D, \u201C"), "\u201D"));
            }
            var _options$stripHOCs = options.stripHOCs, namesOfHOCsToStrip = _options$stripHOCs === void 0 ? [] : _options$stripHOCs;
            var allHOCNamesAreValid = namesOfHOCsToStrip.every(function(x2) {
              if (typeof x2 !== "string" || /[()]/g.test(x2)) {
                return false;
              }
              return /^(?:[a-z][a-zA-Z0-9]+|[A-Z][a-z][a-zA-Z0-9]+)$/.test(x2);
            });
            if (!allHOCNamesAreValid) {
              throw new TypeError("every provided HOC name must be a string with no parens, and in camelCase");
            }
            function componentWithNameValidator(props, propName, componentName) {
              var propValue = props[propName];
              if (props[propName] == null) {
                return null;
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return hasName.apply(void 0, [name, namesOfHOCsToStrip, propValue, propName, componentName].concat(rest));
            }
            componentWithNameValidator.isRequired = function componentWithNameRequired(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return new TypeError("`".concat(componentName, ".").concat(propName, "` requires at least one component named ").concat(name));
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                rest[_key3 - 3] = arguments[_key3];
              }
              return hasName.apply(void 0, [name, namesOfHOCsToStrip, propValue, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(componentWithNameValidator, "componentWithName:".concat(name), name);
          }
        }
      });
      var require_disallowedIf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/disallowedIf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = disallowedIf;
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function disallowedIf(propType, otherPropName, otherPropType) {
            if (typeof propType !== "function" || typeof propType.isRequired !== "function") {
              throw new TypeError("a propType validator is required; propType validators must also provide `.isRequired`");
            }
            if (typeof otherPropName !== "string") {
              throw new TypeError("other prop name must be a string");
            }
            if (typeof otherPropType !== "function") {
              throw new TypeError("other prop type validator is required");
            }
            function disallowedIfRequired(props, propName, componentName) {
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              var error = propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));
              if (error) {
                return error;
              }
              if (props[otherPropName] == null) {
                return null;
              }
              var otherError = otherPropType.apply(void 0, [props, otherPropName, componentName].concat(rest));
              if (otherError) {
                return null;
              }
              return new Error("prop \u201C".concat(propName, "\u201D is disallowed when \u201C").concat(otherPropName, "\u201D matches the provided validator"));
            }
            var validator = function disallowedIfPropType(props, propName) {
              if (props[propName] == null) {
                return null;
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                rest[_key2 - 2] = arguments[_key2];
              }
              return disallowedIfRequired.apply(void 0, [props, propName].concat(rest));
            };
            validator.isRequired = disallowedIfRequired;
            return (0, _wrapValidator["default"])(validator, "disallowedIf", {
              propType,
              otherPropName,
              otherPropType
            });
          }
        }
      });
      var require_elementType = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/elementType.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = elementTypeValidator;
          var _propTypes = require_prop_types();
          var _reactIs = require_react_is2();
          var _and = _interopRequireDefault2(require_and());
          var _getComponentName = _interopRequireDefault2(require_getComponentName());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function getTypeName(Type) {
            if (typeof Type === "string") {
              return Type;
            }
            var type = (0, _getComponentName["default"])(Type);
            return type || "Anonymous Component";
          }
          function validateElementType(Type, props, propName, componentName) {
            var type = props[propName].type;
            if (type === Type) {
              return null;
            }
            return new TypeError("".concat(componentName, ".").concat(propName, " must be a React element of type ").concat(getTypeName(Type)));
          }
          function elementTypeValidator(Type) {
            if (Type === "*") {
              return (0, _wrapValidator["default"])(_propTypes.element, "elementType(*)", Type);
            }
            if (!(0, _reactIs.isValidElementType)(Type)) {
              throw new TypeError('Type must be a React Component, an HTML element tag name, or "*". Got an '.concat(_typeof(Type)));
            }
            function elementType(props, propName, componentName) {
              if (props[propName] == null) {
                return null;
              }
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              return validateElementType.apply(void 0, [Type, props, propName, componentName].concat(rest));
            }
            elementType.isRequired = elementType;
            var typeName = getTypeName(Type);
            var validatorName = "elementType(".concat(typeName, ")");
            return (0, _wrapValidator["default"])((0, _and["default"])([_propTypes.element, elementType], validatorName), validatorName, Type);
          }
        }
      });
      var require_or = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/or.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = or;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
          }
          function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return _arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return _arrayLikeToArray(o2, minLen);
          }
          function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return _arrayLikeToArray(arr);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          function oneOfTypeValidator(validators) {
            var validator = function oneOfType(props, propName, componentName) {
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              var propValue = props[propName];
              if (typeof propValue === "undefined") {
                return null;
              }
              var errors = validators.map(function(v2) {
                return v2.apply(void 0, [props, propName, componentName].concat(rest));
              }).filter(Boolean);
              if (errors.length < validators.length) {
                return null;
              }
              return new TypeError("".concat(componentName, ": invalid value supplied to ").concat(propName, "."));
            };
            validator.isRequired = function oneOfTypeRequired(props, propName, componentName) {
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              var propValue = props[propName];
              if (typeof propValue === "undefined") {
                return new TypeError("".concat(componentName, ": missing value for required ").concat(propName, "."));
              }
              var errors = validators.map(function(v2) {
                return v2.apply(void 0, [props, propName, componentName].concat(rest));
              }).filter(Boolean);
              if (errors.length === validators.length) {
                return new TypeError("".concat(componentName, ": invalid value ").concat(errors, " supplied to required ").concat(propName, "."));
              }
              return null;
            };
            return (0, _wrapValidator["default"])(validator, "oneOfType", validators);
          }
          function or(validators) {
            var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "or";
            if (!Array.isArray(validators)) {
              throw new TypeError("or: 2 or more validators are required");
            }
            if (validators.length <= 1) {
              throw new RangeError("or: 2 or more validators are required");
            }
            var validator = oneOfTypeValidator([(0, _propTypes.arrayOf)(oneOfTypeValidator(validators))].concat(_toConsumableArray(validators)));
            return (0, _wrapValidator["default"])(validator, name, validators);
          }
        }
      });
      var require_explicitNull = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/explicitNull.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          function explicitNull(props, propName, componentName) {
            if (props[propName] == null) {
              return null;
            }
            return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be null or undefined; received ").concat(_typeof(props[propName])));
          }
          explicitNull.isRequired = function explicitNullRequired(props, propName, componentName) {
            if (props[propName] === null) {
              return null;
            }
            return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be null; received ").concat(_typeof(props[propName])));
          };
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(explicitNull, "explicitNull");
          };
          exports2["default"] = _default;
        }
      });
      var require_empty = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/empty.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _propTypes = require_prop_types();
          var _or = _interopRequireDefault2(require_or());
          var _explicitNull = _interopRequireDefault2(require_explicitNull());
          var _withShape = _interopRequireDefault2(require_withShape());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var arrayOfValidator;
          var validator = (0, _or["default"])([
            _explicitNull["default"],
            (0, _propTypes.oneOf)([false, "", NaN]),
            (0, _withShape["default"])(_propTypes.array, {
              length: (0, _propTypes.oneOf)([0]).isRequired
            }).isRequired,
            function() {
              return arrayOfValidator.apply(void 0, arguments);
            }
          ]);
          arrayOfValidator = (0, _propTypes.arrayOf)(validator).isRequired;
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(validator, "empty");
          };
          exports2["default"] = _default;
        }
      });
      var require_keysOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/keysOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = keysOfValidator;
          var _isPrimitive = _interopRequireDefault2(require_isPrimitive());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function keysOfValidator(propType) {
            var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "keysOf";
            if (typeof propType !== "function") {
              throw new TypeError("argument to keysOf must be a valid PropType function");
            }
            var validator = function keysOf(props, propName, componentName, location, propFullName) {
              for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
                rest[_key - 5] = arguments[_key];
              }
              var propValue = props[propName];
              if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
                return null;
              }
              var firstError = null;
              Object.keys(propValue).some(function(key) {
                firstError = propType.apply(void 0, [_defineProperty2({}, key, key), key, componentName, location, "(".concat(propFullName, ").").concat(key)].concat(rest));
                return firstError != null;
              });
              return firstError || null;
            };
            validator.isRequired = function keyedByRequired(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return new TypeError("".concat(componentName, ": ").concat(propName, " is required, but value is ").concat(propValue));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return validator.apply(void 0, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, name, propType);
          }
        }
      });
      var require_mutuallyExclusiveProps = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/mutuallyExclusiveProps.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = mutuallyExclusiveOfType;
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function ownKeys(object, enumerableOnly) {
            var keys22 = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys22.push.apply(keys22, symbols);
            }
            return keys22;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty2(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function mutuallyExclusiveOfType(propType) {
            if (typeof propType !== "function") {
              throw new TypeError("a propType is required");
            }
            for (var _len = arguments.length, exclusiveProps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              exclusiveProps[_key - 1] = arguments[_key];
            }
            if (exclusiveProps.length < 1) {
              throw new TypeError("at least one prop that is mutually exclusive with this propType is required");
            }
            var propList = exclusiveProps.join(", or ");
            var map2 = exclusiveProps.reduce(function(acc, prop) {
              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty2({}, prop, true));
            }, {});
            var countProps = function countProps2(count, prop) {
              return count + (map2[prop] ? 1 : 0);
            };
            var validator = function mutuallyExclusiveProps(props, propName, componentName) {
              var exclusivePropCount = Object.keys(props).filter(function(prop) {
                return props[prop] != null;
              }).reduce(countProps, 0);
              if (exclusivePropCount > 1) {
                return new Error("A ".concat(componentName, " cannot have more than one of these props: ").concat(propList));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return propType.apply(void 0, [props, propName, componentName].concat(rest));
            };
            validator.isRequired = function mutuallyExclusivePropsRequired(props, propName, componentName) {
              var exclusivePropCount = Object.keys(props).filter(function(prop) {
                return prop === propName || props[prop] != null;
              }).reduce(countProps, 0);
              if (exclusivePropCount > 1) {
                return new Error("A ".concat(componentName, " cannot have more than one of these props: ").concat(propList));
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                rest[_key3 - 3] = arguments[_key3];
              }
              return propType.apply(void 0, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, "mutuallyExclusiveProps:".concat(propList), exclusiveProps);
          }
        }
      });
      var require_mutuallyExclusiveTrueProps = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/mutuallyExclusiveTrueProps.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = mutuallyExclusiveTrue;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function mutuallyExclusiveTrue() {
            for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {
              exclusiveProps[_key] = arguments[_key];
            }
            if (exclusiveProps.length < 1) {
              throw new TypeError("at least one prop that is mutually exclusive is required");
            }
            if (!exclusiveProps.every(function(x2) {
              return typeof x2 === "string";
            })) {
              throw new TypeError("all exclusive true props must be strings");
            }
            var propsList = exclusiveProps.join(", or ");
            var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {
              var countProps = function countProps2(count, prop) {
                return count + (props[prop] ? 1 : 0);
              };
              var exclusivePropCount = exclusiveProps.reduce(countProps, 0);
              if (exclusivePropCount > 1) {
                return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
            };
            validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {
              var countProps = function countProps2(count, prop) {
                return count + (props[prop] ? 1 : 0);
              };
              var exclusivePropCount = exclusiveProps.reduce(countProps, 0);
              if (exclusivePropCount > 1) {
                return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
              }
              for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                rest[_key3 - 3] = arguments[_key3];
              }
              return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(validator, "mutuallyExclusiveTrueProps: ".concat(propsList), exclusiveProps);
          }
        }
      });
      var require_nChildren = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/nChildren.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = nChildren;
          var _react = _interopRequireDefault2(require_react());
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function nChildren(n2) {
            var propType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _propTypes.node;
            if (typeof n2 !== "number" || isNaN(n2) || n2 < 0) {
              throw new TypeError("a non-negative number is required");
            }
            var validator = function nChildrenValidator(props, propName, componentName) {
              if (propName !== "children") {
                return new TypeError("".concat(componentName, " is using the nChildren validator on a non-children prop"));
              }
              var children = props.children;
              var childrenCount = _react["default"].Children.count(children);
              if (childrenCount !== n2) {
                return new RangeError("".concat(componentName, " expects to receive ").concat(n2, " children, but received ").concat(childrenCount, " children."));
              }
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              return propType.apply(void 0, [props, propName, componentName].concat(rest));
            };
            validator.isRequired = validator;
            return (0, _wrapValidator["default"])(validator, "nChildren:".concat(n2), n2);
          }
        }
      });
      var require_numericString = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/numericString.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\.[0-9]+)?|0|0\.[0-9]+)$/;
          var validator = function numericString(props, propName, componentName) {
            if (props[propName] == null) {
              return null;
            }
            for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
              rest[_key - 3] = arguments[_key];
            }
            var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));
            if (stringError) {
              return stringError;
            }
            var value = props[propName];
            var passesRegex = validNumericChars.test(value);
            if (passesRegex) {
              return null;
            }
            return new TypeError("".concat(componentName, ': prop "').concat(propName, '" (value "').concat(value, '") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  '));
          };
          validator.isRequired = function numericStringRequired(props, propName, componentName) {
            if (props[propName] == null) {
              return new TypeError("".concat(componentName, ": ").concat(propName, " is required"));
            }
            for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
              rest[_key2 - 3] = arguments[_key2];
            }
            return validator.apply(void 0, [props, propName, componentName].concat(rest));
          };
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(validator, "numericString");
          };
          exports2["default"] = _default;
        }
      });
      var require_predicate = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/predicate.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = predicate;
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function predicate(fn) {
            var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
            if (typeof fn !== "function") {
              throw new TypeError("`fn` must be a function");
            }
            if (typeof message !== "string") {
              throw new TypeError("`message`, if provided, must be a string");
            }
            function requiredValidator(props, propName, componentName) {
              var result = fn(props[propName]);
              if (result) {
                return null;
              }
              return new TypeError("`".concat(componentName, "` requires that `").concat(propName, "` pass a predicate function").concat(message ? ": ".concat(message) : "", "."));
            }
            function validator(props, propName) {
              if (props[propName] == null) {
                return null;
              }
              for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                rest[_key - 2] = arguments[_key];
              }
              return requiredValidator.apply(void 0, [props, propName].concat(rest));
            }
            validator.isRequired = requiredValidator;
            return (0, _wrapValidator["default"])(validator, "predicate", fn);
          }
        }
      });
      var require_range = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/range.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = range;
          var _and = _interopRequireDefault2(require_and());
          var _between = _interopRequireDefault2(require_between());
          var _integer = _interopRequireDefault2(require_integer());
          var _isInteger = _interopRequireDefault2(require_isInteger());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var MAX_SAFE_INTEGER3 = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
          function isValidLength(x2) {
            return (0, _isInteger["default"])(x2) && Math.abs(x2) < MAX_SAFE_INTEGER3;
          }
          function range(min, max) {
            if (!isValidLength(min) || !isValidLength(max)) {
              throw new RangeError('"range" requires two integers: '.concat(min, " and ").concat(max, " given"));
            }
            if (min === max) {
              throw new RangeError("min and max must not be the same");
            }
            return (0, _wrapValidator["default"])((0, _and["default"])([(0, _integer["default"])(), (0, _between["default"])({
              gte: min,
              lt: max
            })], "range"), "range", {
              min,
              max
            });
          }
        }
      });
      var require_ref = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/ref.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _react = require_react();
          var _isPlainObject = _interopRequireDefault2(require_isPlainObject3());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          var isPrototypeOf = Object.prototype.isPrototypeOf;
          function isNewRef(prop) {
            if (!(0, _isPlainObject["default"])(prop)) {
              return false;
            }
            var ownProperties = Object.keys(prop);
            return ownProperties.length === 1 && ownProperties[0] === "current";
          }
          function isCallbackRef(prop) {
            return typeof prop === "function" && !isPrototypeOf.call(_react.Component, prop) && (!_react.PureComponent || !isPrototypeOf.call(_react.PureComponent, prop));
          }
          function requiredRef(props, propName, componentName) {
            var propValue = props[propName];
            if (isCallbackRef(propValue) || isNewRef(propValue)) {
              return null;
            }
            return new TypeError("".concat(propName, " in ").concat(componentName, " must be a ref"));
          }
          function ref(props, propName, componentName) {
            var propValue = props[propName];
            if (propValue == null) {
              return null;
            }
            for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
              rest[_key - 3] = arguments[_key];
            }
            return requiredRef.apply(void 0, [props, propName, componentName].concat(rest));
          }
          ref.isRequired = requiredRef;
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(ref, "ref");
          };
          exports2["default"] = _default;
        }
      });
      var require_requiredBy = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/requiredBy.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = getRequiredBy;
          var _objectIs = _interopRequireDefault2(require_object_is());
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function getRequiredBy(requiredByPropName, propType) {
            var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            function requiredBy(props, propName, componentName) {
              if (props[requiredByPropName]) {
                var propValue = props[propName];
                if ((0, _objectIs["default"])(propValue, defaultValue) || typeof propValue === "undefined") {
                  return new TypeError("".concat(componentName, ": when ").concat(requiredByPropName, " is true, prop \u201C").concat(propName, "\u201D must be present."));
                }
              }
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              return propType.apply(void 0, [props, propName, componentName].concat(rest));
            }
            requiredBy.isRequired = function requiredByRequired(props, propName, componentName) {
              var propValue = props[propName];
              if ((0, _objectIs["default"])(propValue, defaultValue)) {
                return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be present."));
              }
              for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                rest[_key2 - 3] = arguments[_key2];
              }
              return propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));
            };
            return (0, _wrapValidator["default"])(requiredBy, "requiredBy \u201C".concat(requiredByPropName, "\u201D"), [requiredByPropName, defaultValue]);
          }
        }
      });
      var require_restrictedProp = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/restrictedProp.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function customMessageWrapper(messsageFunction) {
            function restrictedProp(props, propName, componentName, location) {
              if (props[propName] == null) {
                return null;
              }
              if (messsageFunction && typeof messsageFunction === "function") {
                for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
                  rest[_key - 4] = arguments[_key];
                }
                return new TypeError(messsageFunction.apply(void 0, [props, propName, componentName, location].concat(rest)));
              }
              return new TypeError("The ".concat(propName, " ").concat(location, " on ").concat(componentName, " is not allowed."));
            }
            restrictedProp.isRequired = restrictedProp;
            return restrictedProp;
          }
          var _default = function _default2() {
            var messsageFunction = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            return (0, _wrapValidator["default"])(customMessageWrapper(messsageFunction), "restrictedProp");
          };
          exports2["default"] = _default;
        }
      });
      var require_stringEndsWith = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/stringEndsWith.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = stringEndsWithValidator;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function stringEndsWithValidator(end) {
            if (typeof end !== "string" || end.length === 0) {
              throw new TypeError("a non-empty string is required");
            }
            var validator = function stringEndsWith(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));
              if (stringError) {
                return stringError;
              }
              if (!propValue.endsWith(end) || propValue.length <= end.length) {
                return new TypeError("".concat(componentName, ": ").concat(propName, ' does not end with "').concat(end, '"'));
              }
              return null;
            };
            validator.isRequired = function requiredStringEndsWith() {
              var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);
              if (stringError) {
                return stringError;
              }
              return validator.apply(void 0, arguments);
            };
            return (0, _wrapValidator["default"])(validator, "stringEndsWith: ".concat(end));
          }
        }
      });
      var require_stringStartsWith = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/stringStartsWith.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = stringStartsWithValidator;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function stringStartsWithValidator(start) {
            if (typeof start !== "string" || start.length === 0) {
              throw new TypeError("a non-empty string is required");
            }
            var validator = function stringStartsWith(props, propName, componentName) {
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
              }
              var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));
              if (stringError) {
                return stringError;
              }
              if (!propValue.startsWith(start) || propValue.length <= start.length) {
                return new TypeError("".concat(componentName, ": ").concat(propName, ' does not start with "').concat(start, '"'));
              }
              return null;
            };
            validator.isRequired = function requiredStringStartsWith() {
              var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);
              if (stringError) {
                return stringError;
              }
              return validator.apply(void 0, arguments);
            };
            return (0, _wrapValidator["default"])(validator, "stringStartsWith: ".concat(start));
          }
        }
      });
      var require_uniqueArray = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/uniqueArray.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = void 0;
          var _propTypes = require_prop_types();
          var _wrapValidator = _interopRequireDefault2(require_wrapValidator());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function uniqueCountWithSet(arr) {
            return new Set(arr).size;
          }
          function uniqueCountLegacy(arr) {
            var seen = [];
            arr.forEach(function(item) {
              if (seen.indexOf(item) === -1) {
                seen.push(item);
              }
            });
            return seen.length;
          }
          var getUniqueCount = typeof Set === "function" ? uniqueCountWithSet : uniqueCountLegacy;
          function requiredUniqueArray(props, propName, componentName) {
            for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
              rest[_key - 3] = arguments[_key];
            }
            var result = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));
            if (result != null) {
              return result;
            }
            var propValue = props[propName];
            var uniqueCount = getUniqueCount(propValue);
            if (uniqueCount !== propValue.length) {
              return new RangeError("".concat(componentName, ": values must be unique. ").concat(propValue.length - uniqueCount, " duplicate values found."));
            }
            return null;
          }
          function uniqueArray(props, propName) {
            var propValue = props[propName];
            if (propValue == null) {
              return null;
            }
            for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              rest[_key2 - 2] = arguments[_key2];
            }
            return requiredUniqueArray.apply(void 0, [props, propName].concat(rest));
          }
          uniqueArray.isRequired = requiredUniqueArray;
          var _default = function _default2() {
            return (0, _wrapValidator["default"])(uniqueArray, "uniqueArray");
          };
          exports2["default"] = _default;
        }
      });
      var require_uniqueArrayOf = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/uniqueArrayOf.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          exports2["default"] = uniqueArrayOfTypeValidator;
          var _propTypes = require_prop_types();
          var _and = _interopRequireDefault2(require_and());
          var _uniqueArray = _interopRequireDefault2(require_uniqueArray());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function ownKeys(object, enumerableOnly) {
            var keys22 = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys22.push.apply(keys22, symbols);
            }
            return keys22;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty2(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function _defineProperty2(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var unique = (0, _uniqueArray["default"])();
          function uniqueArrayOfTypeValidator(type) {
            if (typeof type !== "function") {
              throw new TypeError("type must be a validator function");
            }
            var mapper = null;
            var name = "uniqueArrayOfType";
            for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              rest[_key - 1] = arguments[_key];
            }
            if (rest.length === 1) {
              if (typeof rest[0] === "function") {
                mapper = rest[0];
              } else if (typeof rest[0] === "string") {
                name = rest[0];
              } else {
                throw new TypeError("single input must either be string or function");
              }
            } else if (rest.length === 2) {
              if (typeof rest[0] === "function" && typeof rest[1] === "string") {
                mapper = rest[0];
                name = rest[1];
              } else {
                throw new TypeError("multiple inputs must be in [function, string] order");
              }
            } else if (rest.length > 2) {
              throw new TypeError("only [], [name], [mapper], and [mapper, name] are valid inputs");
            }
            function uniqueArrayOfMapped(props, propName) {
              var propValue = props[propName];
              if (propValue == null) {
                return null;
              }
              var values = propValue.map(mapper);
              for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
              }
              return unique.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, _defineProperty2({}, propName, values)), propName].concat(args));
            }
            uniqueArrayOfMapped.isRequired = function isRequired(props, propName) {
              var propValue = props[propName];
              for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                args[_key3 - 2] = arguments[_key3];
              }
              if (propValue == null) {
                return _propTypes.array.isRequired.apply(_propTypes.array, [props, propName].concat(args));
              }
              return uniqueArrayOfMapped.apply(void 0, [props, propName].concat(args));
            };
            var arrayValidator = (0, _propTypes.arrayOf)(type);
            var uniqueValidator = mapper ? uniqueArrayOfMapped : unique;
            var validator = (0, _and["default"])([arrayValidator, uniqueValidator], name);
            validator.isRequired = (0, _and["default"])([uniqueValidator.isRequired, arrayValidator.isRequired], "".concat(name, ".isRequired"));
            return validator;
          }
        }
      });
      var require_build2 = __commonJS3({
        "../../node_modules/airbnb-prop-types/build/index.js"(exports2, module2) {
          "use strict";
          var _propTypesExact = _interopRequireDefault2(require_build());
          var _and = _interopRequireDefault2(require_and());
          var _between = _interopRequireDefault2(require_between());
          var _booleanSome = _interopRequireDefault2(require_booleanSome());
          var _childrenHavePropXorChildren = _interopRequireDefault2(require_childrenHavePropXorChildren());
          var _childrenOf = _interopRequireDefault2(require_childrenOf());
          var _childrenOfType = _interopRequireDefault2(require_childrenOfType());
          var _childrenSequenceOf = _interopRequireDefault2(require_childrenSequenceOf());
          var _componentWithName = _interopRequireDefault2(require_componentWithName());
          var _disallowedIf = _interopRequireDefault2(require_disallowedIf());
          var _elementType = _interopRequireDefault2(require_elementType());
          var _empty = _interopRequireDefault2(require_empty());
          var _explicitNull = _interopRequireDefault2(require_explicitNull());
          var _integer = _interopRequireDefault2(require_integer());
          var _keysOf = _interopRequireDefault2(require_keysOf());
          var _mutuallyExclusiveProps = _interopRequireDefault2(require_mutuallyExclusiveProps());
          var _mutuallyExclusiveTrueProps = _interopRequireDefault2(require_mutuallyExclusiveTrueProps());
          var _nChildren = _interopRequireDefault2(require_nChildren());
          var _nonNegativeInteger = _interopRequireDefault2(require_nonNegativeInteger());
          var _nonNegativeNumber = _interopRequireDefault2(require_nonNegativeNumber());
          var _numericString = _interopRequireDefault2(require_numericString());
          var _object = _interopRequireDefault2(require_object3());
          var _or = _interopRequireDefault2(require_or());
          var _predicate = _interopRequireDefault2(require_predicate());
          var _range = _interopRequireDefault2(require_range());
          var _ref = _interopRequireDefault2(require_ref());
          var _requiredBy = _interopRequireDefault2(require_requiredBy());
          var _restrictedProp = _interopRequireDefault2(require_restrictedProp());
          var _sequenceOf = _interopRequireDefault2(require_sequenceOf());
          var _shape = _interopRequireDefault2(require_shape());
          var _stringEndsWith = _interopRequireDefault2(require_stringEndsWith());
          var _stringStartsWith = _interopRequireDefault2(require_stringStartsWith());
          var _uniqueArray = _interopRequireDefault2(require_uniqueArray());
          var _uniqueArrayOf = _interopRequireDefault2(require_uniqueArrayOf());
          var _valuesOf = _interopRequireDefault2(require_valuesOf());
          var _withShape = _interopRequireDefault2(require_withShape());
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          module2.exports = {
            and: _and["default"],
            between: _between["default"],
            booleanSome: _booleanSome["default"],
            childrenHavePropXorChildren: _childrenHavePropXorChildren["default"],
            childrenOf: _childrenOf["default"],
            childrenOfType: _childrenOfType["default"],
            childrenSequenceOf: _childrenSequenceOf["default"],
            componentWithName: _componentWithName["default"],
            disallowedIf: _disallowedIf["default"],
            elementType: _elementType["default"],
            empty: _empty["default"],
            explicitNull: _explicitNull["default"],
            forbidExtraProps: _propTypesExact["default"],
            integer: _integer["default"],
            keysOf: _keysOf["default"],
            mutuallyExclusiveProps: _mutuallyExclusiveProps["default"],
            mutuallyExclusiveTrueProps: _mutuallyExclusiveTrueProps["default"],
            nChildren: _nChildren["default"],
            nonNegativeInteger: _nonNegativeInteger["default"],
            nonNegativeNumber: _nonNegativeNumber["default"],
            numericString: _numericString["default"],
            object: _object["default"],
            or: _or["default"],
            predicate: _predicate["default"],
            range: _range["default"],
            ref: _ref["default"],
            requiredBy: _requiredBy["default"],
            restrictedProp: _restrictedProp["default"],
            sequenceOf: _sequenceOf["default"],
            shape: _shape["default"],
            stringEndsWith: _stringEndsWith["default"],
            stringStartsWith: _stringStartsWith["default"],
            uniqueArray: _uniqueArray["default"],
            uniqueArrayOf: _uniqueArrayOf["default"],
            valuesOf: _valuesOf["default"],
            withShape: _withShape["default"]
          };
        }
      });
      var require_airbnb_prop_types = __commonJS3({
        "../../node_modules/airbnb-prop-types/index.js"(exports2, module2) {
          module2.exports = false ? null : require_build2();
        }
      });
      var require_lib2 = __commonJS3({
        "../../node_modules/consolidated-events/lib/index.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          var CAN_USE_DOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
          function testPassiveEventListeners() {
            if (!CAN_USE_DOM) {
              return false;
            }
            if (!window.addEventListener || !window.removeEventListener || !Object.defineProperty) {
              return false;
            }
            var supportsPassiveOption = false;
            try {
              var opts = Object.defineProperty({}, "passive", {
                get: function() {
                  function get4() {
                    supportsPassiveOption = true;
                  }
                  return get4;
                }()
              });
              var noop22 = function noop32() {
              };
              window.addEventListener("testPassiveEventSupport", noop22, opts);
              window.removeEventListener("testPassiveEventSupport", noop22, opts);
            } catch (e2) {
            }
            return supportsPassiveOption;
          }
          var memoized = void 0;
          function canUsePassiveEventListeners() {
            if (memoized === void 0) {
              memoized = testPassiveEventListeners();
            }
            return memoized;
          }
          function normalizeEventOptions(eventOptions) {
            if (!eventOptions) {
              return void 0;
            }
            if (!canUsePassiveEventListeners()) {
              return !!eventOptions.capture;
            }
            return eventOptions;
          }
          function eventOptionsKey(normalizedEventOptions) {
            if (!normalizedEventOptions) {
              return 0;
            }
            if (normalizedEventOptions === true) {
              return 100;
            }
            var capture = normalizedEventOptions.capture << 0;
            var passive = normalizedEventOptions.passive << 1;
            var once = normalizedEventOptions.once << 2;
            return capture + passive + once;
          }
          function ensureCanMutateNextEventHandlers(eventHandlers) {
            if (eventHandlers.handlers === eventHandlers.nextHandlers) {
              eventHandlers.nextHandlers = eventHandlers.handlers.slice();
            }
          }
          function TargetEventHandlers(target) {
            this.target = target;
            this.events = {};
          }
          TargetEventHandlers.prototype.getEventHandlers = function() {
            function getEventHandlers(eventName, options) {
              var key = String(eventName) + " " + String(eventOptionsKey(options));
              if (!this.events[key]) {
                this.events[key] = {
                  handlers: [],
                  handleEvent: void 0
                };
                this.events[key].nextHandlers = this.events[key].handlers;
              }
              return this.events[key];
            }
            return getEventHandlers;
          }();
          TargetEventHandlers.prototype.handleEvent = function() {
            function handleEvent(eventName, options, event) {
              var eventHandlers = this.getEventHandlers(eventName, options);
              eventHandlers.handlers = eventHandlers.nextHandlers;
              eventHandlers.handlers.forEach(function(handler) {
                if (handler) {
                  handler(event);
                }
              });
            }
            return handleEvent;
          }();
          TargetEventHandlers.prototype.add = function() {
            function add3(eventName, listener, options) {
              var _this = this;
              var eventHandlers = this.getEventHandlers(eventName, options);
              ensureCanMutateNextEventHandlers(eventHandlers);
              if (eventHandlers.nextHandlers.length === 0) {
                eventHandlers.handleEvent = this.handleEvent.bind(this, eventName, options);
                this.target.addEventListener(eventName, eventHandlers.handleEvent, options);
              }
              eventHandlers.nextHandlers.push(listener);
              var isSubscribed = true;
              var unsubscribe = function() {
                function unsubscribe2() {
                  if (!isSubscribed) {
                    return;
                  }
                  isSubscribed = false;
                  ensureCanMutateNextEventHandlers(eventHandlers);
                  var index = eventHandlers.nextHandlers.indexOf(listener);
                  eventHandlers.nextHandlers.splice(index, 1);
                  if (eventHandlers.nextHandlers.length === 0) {
                    if (_this.target) {
                      _this.target.removeEventListener(eventName, eventHandlers.handleEvent, options);
                    }
                    eventHandlers.handleEvent = void 0;
                  }
                }
                return unsubscribe2;
              }();
              return unsubscribe;
            }
            return add3;
          }();
          var EVENT_HANDLERS_KEY = "__consolidated_events_handlers__";
          function addEventListener(target, eventName, listener, options) {
            if (!target[EVENT_HANDLERS_KEY]) {
              target[EVENT_HANDLERS_KEY] = new TargetEventHandlers(target);
            }
            var normalizedEventOptions = normalizeEventOptions(options);
            return target[EVENT_HANDLERS_KEY].add(eventName, listener, normalizedEventOptions);
          }
          exports2.addEventListener = addEventListener;
        }
      });
      var require_implementation8 = __commonJS3({
        "../../node_modules/object.values/implementation.js"(exports2, module2) {
          "use strict";
          var RequireObjectCoercible = require_RequireObjectCoercible();
          var callBound = require_callBound();
          var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");
          var $push = callBound("Array.prototype.push");
          module2.exports = function values(O) {
            var obj = RequireObjectCoercible(O);
            var vals = [];
            for (var key in obj) {
              if ($isEnumerable(obj, key)) {
                $push(vals, obj[key]);
              }
            }
            return vals;
          };
        }
      });
      var require_polyfill6 = __commonJS3({
        "../../node_modules/object.values/polyfill.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation8();
          module2.exports = function getPolyfill() {
            return typeof Object.values === "function" ? Object.values : implementation;
          };
        }
      });
      var require_shim6 = __commonJS3({
        "../../node_modules/object.values/shim.js"(exports2, module2) {
          "use strict";
          var getPolyfill = require_polyfill6();
          var define2 = require_define_properties();
          module2.exports = function shimValues() {
            var polyfill = getPolyfill();
            define2(Object, { values: polyfill }, {
              values: function testValues() {
                return Object.values !== polyfill;
              }
            });
            return polyfill;
          };
        }
      });
      var require_object4 = __commonJS3({
        "../../node_modules/object.values/index.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var callBind = require_call_bind();
          var implementation = require_implementation8();
          var getPolyfill = require_polyfill6();
          var shim = require_shim6();
          var polyfill = callBind(getPolyfill(), Object);
          define2(polyfill, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = polyfill;
        }
      });
      var require_implementation9 = __commonJS3({
        "../../node_modules/document.contains/implementation.js"(exports2, module2) {
          "use strict";
          module2.exports = function contains(other) {
            if (arguments.length < 1) {
              throw new TypeError("1 argument is required");
            }
            if (typeof other !== "object") {
              throw new TypeError("Argument 1 (\u201Dother\u201C) to Node.contains must be an instance of Node");
            }
            var node = other;
            do {
              if (this === node) {
                return true;
              }
              if (node) {
                node = node.parentNode;
              }
            } while (node);
            return false;
          };
        }
      });
      var require_polyfill7 = __commonJS3({
        "../../node_modules/document.contains/polyfill.js"(exports2, module2) {
          "use strict";
          var implementation = require_implementation9();
          module2.exports = function getPolyfill() {
            if (typeof document !== "undefined") {
              if (document.contains) {
                return document.contains;
              }
              if (document.body && document.body.contains) {
                try {
                  if (typeof document.body.contains.call(document, "") === "boolean") {
                    return document.body.contains;
                  }
                } catch (e2) {
                }
              }
            }
            return implementation;
          };
        }
      });
      var require_shim7 = __commonJS3({
        "../../node_modules/document.contains/shim.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var getPolyfill = require_polyfill7();
          module2.exports = function shimContains() {
            var polyfill = getPolyfill();
            if (typeof document !== "undefined") {
              define2(document, { contains: polyfill }, { contains: function() {
                return document.contains !== polyfill;
              } });
              if (typeof Element !== "undefined") {
                define2(Element.prototype, { contains: polyfill }, { contains: function() {
                  return Element.prototype.contains !== polyfill;
                } });
              }
            }
            return polyfill;
          };
        }
      });
      var require_document = __commonJS3({
        "../../node_modules/document.contains/index.js"(exports2, module2) {
          "use strict";
          var define2 = require_define_properties();
          var implementation = require_implementation9();
          var getPolyfill = require_polyfill7();
          var polyfill = getPolyfill();
          var shim = require_shim7();
          var boundContains = function contains(node, other) {
            return polyfill.apply(node, [other]);
          };
          define2(boundContains, {
            getPolyfill,
            implementation,
            shim
          });
          module2.exports = boundContains;
        }
      });
      var require_OutsideClickHandler = __commonJS3({
        "../../node_modules/react-outside-click-handler/build/OutsideClickHandler.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _createClass9 = function() {
            function defineProperties(target, props) {
              for (var i2 = 0; i2 < props.length; i2++) {
                var descriptor = props[i2];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          var _react = require_react();
          var _react2 = _interopRequireDefault2(_react);
          var _propTypes = require_prop_types();
          var _propTypes2 = _interopRequireDefault2(_propTypes);
          var _airbnbPropTypes = require_airbnb_prop_types();
          var _consolidatedEvents = require_lib2();
          var _object = require_object4();
          var _object2 = _interopRequireDefault2(_object);
          var _document = require_document();
          var _document2 = _interopRequireDefault2(_document);
          function _interopRequireDefault2(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _classCallCheck9(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _possibleConstructorReturn9(self2, call) {
            if (!self2) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self2;
          }
          function _inherits9(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var DISPLAY = {
            BLOCK: "block",
            FLEX: "flex",
            INLINE: "inline",
            INLINE_BLOCK: "inline-block",
            CONTENTS: "contents"
          };
          var propTypes = (0, _airbnbPropTypes.forbidExtraProps)({
            children: _propTypes2["default"].node.isRequired,
            onOutsideClick: _propTypes2["default"].func.isRequired,
            disabled: _propTypes2["default"].bool,
            useCapture: _propTypes2["default"].bool,
            display: _propTypes2["default"].oneOf((0, _object2["default"])(DISPLAY))
          });
          var defaultProps2 = {
            disabled: false,
            useCapture: true,
            display: DISPLAY.BLOCK
          };
          var OutsideClickHandler2 = function(_React$Component) {
            _inherits9(OutsideClickHandler3, _React$Component);
            function OutsideClickHandler3() {
              var _ref;
              _classCallCheck9(this, OutsideClickHandler3);
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              var _this = _possibleConstructorReturn9(this, (_ref = OutsideClickHandler3.__proto__ || Object.getPrototypeOf(OutsideClickHandler3)).call.apply(_ref, [this].concat(args)));
              _this.onMouseDown = _this.onMouseDown.bind(_this);
              _this.onMouseUp = _this.onMouseUp.bind(_this);
              _this.setChildNodeRef = _this.setChildNodeRef.bind(_this);
              return _this;
            }
            _createClass9(OutsideClickHandler3, [{
              key: "componentDidMount",
              value: function() {
                function componentDidMount() {
                  var _props = this.props, disabled = _props.disabled, useCapture = _props.useCapture;
                  if (!disabled)
                    this.addMouseDownEventListener(useCapture);
                }
                return componentDidMount;
              }()
            }, {
              key: "componentDidUpdate",
              value: function() {
                function componentDidUpdate(_ref2) {
                  var prevDisabled = _ref2.disabled;
                  var _props2 = this.props, disabled = _props2.disabled, useCapture = _props2.useCapture;
                  if (prevDisabled !== disabled) {
                    if (disabled) {
                      this.removeEventListeners();
                    } else {
                      this.addMouseDownEventListener(useCapture);
                    }
                  }
                }
                return componentDidUpdate;
              }()
            }, {
              key: "componentWillUnmount",
              value: function() {
                function componentWillUnmount() {
                  this.removeEventListeners();
                }
                return componentWillUnmount;
              }()
            }, {
              key: "onMouseDown",
              value: function() {
                function onMouseDown(e2) {
                  var useCapture = this.props.useCapture;
                  var isDescendantOfRoot = this.childNode && (0, _document2["default"])(this.childNode, e2.target);
                  if (!isDescendantOfRoot) {
                    if (this.removeMouseUp) {
                      this.removeMouseUp();
                      this.removeMouseUp = null;
                    }
                    this.removeMouseUp = (0, _consolidatedEvents.addEventListener)(document, "mouseup", this.onMouseUp, { capture: useCapture });
                  }
                }
                return onMouseDown;
              }()
            }, {
              key: "onMouseUp",
              value: function() {
                function onMouseUp(e2) {
                  var onOutsideClick = this.props.onOutsideClick;
                  var isDescendantOfRoot = this.childNode && (0, _document2["default"])(this.childNode, e2.target);
                  if (this.removeMouseUp) {
                    this.removeMouseUp();
                    this.removeMouseUp = null;
                  }
                  if (!isDescendantOfRoot) {
                    onOutsideClick(e2);
                  }
                }
                return onMouseUp;
              }()
            }, {
              key: "setChildNodeRef",
              value: function() {
                function setChildNodeRef(ref) {
                  this.childNode = ref;
                }
                return setChildNodeRef;
              }()
            }, {
              key: "addMouseDownEventListener",
              value: function() {
                function addMouseDownEventListener(useCapture) {
                  this.removeMouseDown = (0, _consolidatedEvents.addEventListener)(document, "mousedown", this.onMouseDown, { capture: useCapture });
                }
                return addMouseDownEventListener;
              }()
            }, {
              key: "removeEventListeners",
              value: function() {
                function removeEventListeners() {
                  if (this.removeMouseDown)
                    this.removeMouseDown();
                  if (this.removeMouseUp)
                    this.removeMouseUp();
                }
                return removeEventListeners;
              }()
            }, {
              key: "render",
              value: function() {
                function render3() {
                  var _props3 = this.props, children = _props3.children, display = _props3.display;
                  return _react2["default"].createElement("div", {
                    ref: this.setChildNodeRef,
                    style: display !== DISPLAY.BLOCK && (0, _object2["default"])(DISPLAY).includes(display) ? { display } : void 0
                  }, children);
                }
                return render3;
              }()
            }]);
            return OutsideClickHandler3;
          }(_react2["default"].Component);
          exports2["default"] = OutsideClickHandler2;
          OutsideClickHandler2.propTypes = propTypes;
          OutsideClickHandler2.defaultProps = defaultProps2;
        }
      });
      var require_react_outside_click_handler = __commonJS3({
        "../../node_modules/react-outside-click-handler/index.js"(exports2, module2) {
          module2.exports = require_OutsideClickHandler();
        }
      });
      var require_shallowequal = __commonJS3({
        "../../node_modules/shallowequal/index.js"(exports2, module2) {
          module2.exports = function shallowEqual(objA, objB, compare, compareContext) {
            var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
            if (ret !== void 0) {
              return !!ret;
            }
            if (objA === objB) {
              return true;
            }
            if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
            for (var idx = 0; idx < keysA.length; idx++) {
              var key = keysA[idx];
              if (!bHasOwnProperty(key)) {
                return false;
              }
              var valueA = objA[key];
              var valueB = objB[key];
              ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
              if (ret === false || ret === void 0 && valueA !== valueB) {
                return false;
              }
            }
            return true;
          };
        }
      });
      var require_emotion_memoize_cjs_dev2 = __commonJS3({
        "../../node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          function memoize22(fn) {
            var cache = /* @__PURE__ */ Object.create(null);
            return function(arg) {
              if (cache[arg] === void 0)
                cache[arg] = fn(arg);
              return cache[arg];
            };
          }
          exports2.default = memoize22;
        }
      });
      var require_emotion_memoize_cjs2 = __commonJS3({
        "../../node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js"(exports2, module2) {
          "use strict";
          if (false) {
            module2.exports = null;
          } else {
            module2.exports = require_emotion_memoize_cjs_dev2();
          }
        }
      });
      var require_emotion_is_prop_valid_cjs_dev2 = __commonJS3({
        "../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          var memoize22 = require_emotion_memoize_cjs2();
          function _interopDefault(e2) {
            return e2 && e2.__esModule ? e2 : { "default": e2 };
          }
          var memoize__default = /* @__PURE__ */ _interopDefault(memoize22);
          var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
          var isPropValid = /* @__PURE__ */ memoize__default["default"](function(prop) {
            return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
          });
          exports2.default = isPropValid;
        }
      });
      var require_emotion_is_prop_valid_cjs2 = __commonJS3({
        "../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js"(exports2, module2) {
          "use strict";
          if (false) {
            module2.exports = null;
          } else {
            module2.exports = require_emotion_is_prop_valid_cjs_dev2();
          }
        }
      });
      var require_hoist_non_react_statics_cjs2 = __commonJS3({
        "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
          "use strict";
          var reactIs = require_react_is2();
          var REACT_STATICS = {
            childContextTypes: true,
            contextType: true,
            contextTypes: true,
            defaultProps: true,
            displayName: true,
            getDefaultProps: true,
            getDerivedStateFromError: true,
            getDerivedStateFromProps: true,
            mixins: true,
            propTypes: true,
            type: true
          };
          var KNOWN_STATICS = {
            name: true,
            length: true,
            prototype: true,
            caller: true,
            callee: true,
            arguments: true,
            arity: true
          };
          var FORWARD_REF_STATICS = {
            "$$typeof": true,
            render: true,
            defaultProps: true,
            displayName: true,
            propTypes: true
          };
          var MEMO_STATICS = {
            "$$typeof": true,
            compare: true,
            defaultProps: true,
            displayName: true,
            propTypes: true,
            type: true
          };
          var TYPE_STATICS = {};
          TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
          TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
          function getStatics(component) {
            if (reactIs.isMemo(component)) {
              return MEMO_STATICS;
            }
            return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
          }
          var defineProperty2 = Object.defineProperty;
          var getOwnPropertyNames = Object.getOwnPropertyNames;
          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var getPrototypeOf = Object.getPrototypeOf;
          var objectPrototype = Object.prototype;
          function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
            if (typeof sourceComponent !== "string") {
              if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);
                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                  hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
              }
              var keys22 = getOwnPropertyNames(sourceComponent);
              if (getOwnPropertySymbols) {
                keys22 = keys22.concat(getOwnPropertySymbols(sourceComponent));
              }
              var targetStatics = getStatics(targetComponent);
              var sourceStatics = getStatics(sourceComponent);
              for (var i2 = 0; i2 < keys22.length; ++i2) {
                var key = keys22[i2];
                if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                  var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                  try {
                    defineProperty2(targetComponent, key, descriptor);
                  } catch (e2) {
                  }
                }
              }
            }
            return targetComponent;
          }
          module2.exports = hoistNonReactStatics;
        }
      });
      var src_exports = {};
      __export(src_exports, {
        default: () => editor_default
      });
      var import_react552 = __toESM3(require_react());
      var import_react210 = __toESM3(require_react());
      var import_react73 = __toESM3(require_react());
      var DefaultContext = {
        color: void 0,
        size: void 0,
        className: void 0,
        style: void 0,
        attr: void 0
      };
      var IconContext = import_react73.default.createContext && import_react73.default.createContext(DefaultContext);
      var __assign2 = function() {
        __assign2 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p))
                t2[p] = s2[p];
          }
          return t2;
        };
        return __assign2.apply(this, arguments);
      };
      var __rest2 = function(s2, e2) {
        var t2 = {};
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
            t2[p] = s2[p];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
            if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
              t2[p[i2]] = s2[p[i2]];
          }
        return t2;
      };
      function Tree2Element(tree) {
        return tree && tree.map(function(node, i2) {
          return import_react210.default.createElement(node.tag, __assign2({
            key: i2
          }, node.attr), Tree2Element(node.child));
        });
      }
      function GenIcon(data) {
        return function(props) {
          return import_react210.default.createElement(IconBase, __assign2({
            attr: __assign2({}, data.attr)
          }, props), Tree2Element(data.child));
        };
      }
      function IconBase(props) {
        var elem = function(conf) {
          var attr = props.attr, size2 = props.size, title = props.title, svgProps = __rest2(props, ["attr", "size", "title"]);
          var computedSize = size2 || conf.size || "1em";
          var className;
          if (conf.className)
            className = conf.className;
          if (props.className)
            className = (className ? className + " " : "") + props.className;
          return import_react210.default.createElement("svg", __assign2({
            stroke: "currentColor",
            fill: "currentColor",
            strokeWidth: "0"
          }, conf.attr, attr, svgProps, {
            className,
            style: __assign2(__assign2({
              color: props.color || conf.color
            }, conf.style), props.style),
            height: computedSize,
            width: computedSize,
            xmlns: "http://www.w3.org/2000/svg"
          }), title && import_react210.default.createElement("title", null, title), props.children);
        };
        return IconContext !== void 0 ? import_react210.default.createElement(IconContext.Consumer, null, function(conf) {
          return elem(conf);
        }) : elem(DefaultContext);
      }
      function FaRedo(props) {
        return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z" } }] })(props);
      }
      function FaUndo(props) {
        return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z" } }] })(props);
      }
      var import_react310 = __toESM3(require_react());
      var PIXEL_SIZE = 20;
      var getKey = ({ x: x2, y: y2 }) => `${x2}-${y2}`;
      function Canvas(state2) {
        const { width, height, pixels, defaultColor = "#fff", draw, commit } = state2;
        function pointerUp() {
          commit();
        }
        function pointerMove(event) {
          event.target.releasePointerCapture(event.pointerId);
          const {
            target: { dataset: { x: x2, y: y2 } },
            pointerType,
            buttons
          } = event;
          if (pointerType == "mouse" && buttons !== 1)
            return;
          draw([getKey({ x: x2, y: y2 })]);
        }
        ;
        function* getPositions() {
          for (let y2 = 0; y2 < width; y2++) {
            for (let x2 = 0; x2 < height; x2++) {
              yield { x: x2, y: y2 };
            }
          }
        }
        function getColor2({ x: x2, y: y2 }) {
          const key = getKey({ x: x2, y: y2 });
          return pixels[key] || defaultColor;
        }
        function getPixels() {
          return [...getPositions()].map((coords) => {
            const { x: x2, y: y2 } = coords;
            return {
              "data-x": x2,
              "data-y": y2,
              key: getKey(coords),
              x: x2 * PIXEL_SIZE,
              y: y2 * PIXEL_SIZE,
              fill: getColor2(coords),
              width: PIXEL_SIZE,
              height: PIXEL_SIZE
            };
          });
        }
        return /* @__PURE__ */ import_react310.default.createElement("svg", {
          style: { touchAction: "none" },
          width: width * PIXEL_SIZE,
          height: height * PIXEL_SIZE,
          onPointerMove: pointerMove,
          onPointerUp: pointerUp
        }, getPixels().map((props) => /* @__PURE__ */ import_react310.default.createElement("rect", {
          ...props
        })));
      }
      var import_react532 = __toESM3(require_react());
      var import_react142 = __toESM3(require_react());
      var import_reactcss9 = __toESM3(require_lib());
      var import_react510 = __toESM3(require_react());
      var import_reactcss2 = __toESM3(require_lib());
      var calculateChange = function calculateChange2(e2, hsl, direction2, initialA, container2) {
        var containerWidth = container2.clientWidth;
        var containerHeight = container2.clientHeight;
        var x2 = typeof e2.pageX === "number" ? e2.pageX : e2.touches[0].pageX;
        var y2 = typeof e2.pageY === "number" ? e2.pageY : e2.touches[0].pageY;
        var left = x2 - (container2.getBoundingClientRect().left + window.pageXOffset);
        var top = y2 - (container2.getBoundingClientRect().top + window.pageYOffset);
        if (direction2 === "vertical") {
          var a2 = void 0;
          if (top < 0) {
            a2 = 0;
          } else if (top > containerHeight) {
            a2 = 1;
          } else {
            a2 = Math.round(top * 100 / containerHeight) / 100;
          }
          if (hsl.a !== a2) {
            return {
              h: hsl.h,
              s: hsl.s,
              l: hsl.l,
              a: a2,
              source: "rgb"
            };
          }
        } else {
          var _a7 = void 0;
          if (left < 0) {
            _a7 = 0;
          } else if (left > containerWidth) {
            _a7 = 1;
          } else {
            _a7 = Math.round(left * 100 / containerWidth) / 100;
          }
          if (initialA !== _a7) {
            return {
              h: hsl.h,
              s: hsl.s,
              l: hsl.l,
              a: _a7,
              source: "rgb"
            };
          }
        }
        return null;
      };
      var import_react410 = __toESM3(require_react());
      var import_reactcss = __toESM3(require_lib());
      var checkboardCache = {};
      var render = function render2(c1, c2, size2, serverCanvas) {
        if (typeof document === "undefined" && !serverCanvas) {
          return null;
        }
        var canvas = serverCanvas ? new serverCanvas() : document.createElement("canvas");
        canvas.width = size2 * 2;
        canvas.height = size2 * 2;
        var ctx = canvas.getContext("2d");
        if (!ctx) {
          return null;
        }
        ctx.fillStyle = c1;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = c2;
        ctx.fillRect(0, 0, size2, size2);
        ctx.translate(size2, size2);
        ctx.fillRect(0, 0, size2, size2);
        return canvas.toDataURL();
      };
      var get3 = function get22(c1, c2, size2, serverCanvas) {
        var key = c1 + "-" + c2 + "-" + size2 + (serverCanvas ? "-server" : "");
        if (checkboardCache[key]) {
          return checkboardCache[key];
        }
        var checkboard = render(c1, c2, size2, serverCanvas);
        checkboardCache[key] = checkboard;
        return checkboard;
      };
      var _extends = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var Checkboard = function Checkboard2(_ref) {
        var white = _ref.white, grey = _ref.grey, size2 = _ref.size, renderers = _ref.renderers, borderRadius = _ref.borderRadius, boxShadow = _ref.boxShadow, children = _ref.children;
        var styles2 = (0, import_reactcss.default)({
          "default": {
            grid: {
              borderRadius,
              boxShadow,
              absolute: "0px 0px 0px 0px",
              background: "url(" + get3(white, grey, size2, renderers.canvas) + ") center left"
            }
          }
        });
        return (0, import_react410.isValidElement)(children) ? import_react410.default.cloneElement(children, _extends({}, children.props, { style: _extends({}, children.props.style, styles2.grid) })) : import_react410.default.createElement("div", { style: styles2.grid });
      };
      Checkboard.defaultProps = {
        size: 8,
        white: "transparent",
        grey: "rgba(0,0,0,.08)",
        renderers: {}
      };
      var Checkboard_default = Checkboard;
      var _extends2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Alpha = function(_ref) {
        _inherits(Alpha2, _ref);
        function Alpha2() {
          var _ref2;
          var _temp, _this, _ret;
          _classCallCheck(this, Alpha2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha2.__proto__ || Object.getPrototypeOf(Alpha2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e2) {
            var change = calculateChange(e2, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);
            change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e2);
          }, _this.handleMouseDown = function(e2) {
            _this.handleChange(e2);
            window.addEventListener("mousemove", _this.handleChange);
            window.addEventListener("mouseup", _this.handleMouseUp);
          }, _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          }, _this.unbindEventListeners = function() {
            window.removeEventListener("mousemove", _this.handleChange);
            window.removeEventListener("mouseup", _this.handleMouseUp);
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }
        _createClass(Alpha2, [{
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.unbindEventListeners();
          }
        }, {
          key: "render",
          value: function render3() {
            var _this2 = this;
            var rgb = this.props.rgb;
            var styles2 = (0, import_reactcss2.default)({
              "default": {
                alpha: {
                  absolute: "0px 0px 0px 0px",
                  borderRadius: this.props.radius
                },
                checkboard: {
                  absolute: "0px 0px 0px 0px",
                  overflow: "hidden",
                  borderRadius: this.props.radius
                },
                gradient: {
                  absolute: "0px 0px 0px 0px",
                  background: "linear-gradient(to right, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)",
                  boxShadow: this.props.shadow,
                  borderRadius: this.props.radius
                },
                container: {
                  position: "relative",
                  height: "100%",
                  margin: "0 3px"
                },
                pointer: {
                  position: "absolute",
                  left: rgb.a * 100 + "%"
                },
                slider: {
                  width: "4px",
                  borderRadius: "1px",
                  height: "8px",
                  boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
                  background: "#fff",
                  marginTop: "1px",
                  transform: "translateX(-2px)"
                }
              },
              "vertical": {
                gradient: {
                  background: "linear-gradient(to bottom, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)"
                },
                pointer: {
                  left: 0,
                  top: rgb.a * 100 + "%"
                }
              },
              "overwrite": _extends2({}, this.props.style)
            }, {
              vertical: this.props.direction === "vertical",
              overwrite: true
            });
            return import_react510.default.createElement("div", { style: styles2.alpha }, import_react510.default.createElement("div", { style: styles2.checkboard }, import_react510.default.createElement(Checkboard_default, { renderers: this.props.renderers })), import_react510.default.createElement("div", { style: styles2.gradient }), import_react510.default.createElement("div", {
              style: styles2.container,
              ref: function ref(container2) {
                return _this2.container = container2;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            }, import_react510.default.createElement("div", { style: styles2.pointer }, this.props.pointer ? import_react510.default.createElement(this.props.pointer, this.props) : import_react510.default.createElement("div", { style: styles2.slider }))));
          }
        }]);
        return Alpha2;
      }(import_react510.PureComponent || import_react510.Component);
      var Alpha_default = Alpha;
      var import_react610 = __toESM3(require_react());
      var import_reactcss3 = __toESM3(require_lib());
      var _createClass2 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn2(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits2(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var DEFAULT_ARROW_OFFSET = 1;
      var UP_KEY_CODE = 38;
      var DOWN_KEY_CODE = 40;
      var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];
      var isValidKeyCode = function isValidKeyCode2(keyCode) {
        return VALID_KEY_CODES.indexOf(keyCode) > -1;
      };
      var getNumberValue = function getNumberValue2(value) {
        return Number(String(value).replace(/%/g, ""));
      };
      var idCounter = 1;
      var EditableInput = function(_ref) {
        _inherits2(EditableInput2, _ref);
        function EditableInput2(props) {
          _classCallCheck2(this, EditableInput2);
          var _this = _possibleConstructorReturn2(this, (EditableInput2.__proto__ || Object.getPrototypeOf(EditableInput2)).call(this));
          _this.handleBlur = function() {
            if (_this.state.blurValue) {
              _this.setState({ value: _this.state.blurValue, blurValue: null });
            }
          };
          _this.handleChange = function(e2) {
            _this.setUpdatedValue(e2.target.value, e2);
          };
          _this.handleKeyDown = function(e2) {
            var value = getNumberValue(e2.target.value);
            if (!isNaN(value) && isValidKeyCode(e2.keyCode)) {
              var offset = _this.getArrowOffset();
              var updatedValue = e2.keyCode === UP_KEY_CODE ? value + offset : value - offset;
              _this.setUpdatedValue(updatedValue, e2);
            }
          };
          _this.handleDrag = function(e2) {
            if (_this.props.dragLabel) {
              var newValue = Math.round(_this.props.value + e2.movementX);
              if (newValue >= 0 && newValue <= _this.props.dragMax) {
                _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e2);
              }
            }
          };
          _this.handleMouseDown = function(e2) {
            if (_this.props.dragLabel) {
              e2.preventDefault();
              _this.handleDrag(e2);
              window.addEventListener("mousemove", _this.handleDrag);
              window.addEventListener("mouseup", _this.handleMouseUp);
            }
          };
          _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          };
          _this.unbindEventListeners = function() {
            window.removeEventListener("mousemove", _this.handleDrag);
            window.removeEventListener("mouseup", _this.handleMouseUp);
          };
          _this.state = {
            value: String(props.value).toUpperCase(),
            blurValue: String(props.value).toUpperCase()
          };
          _this.inputId = "rc-editable-input-" + idCounter++;
          return _this;
        }
        _createClass2(EditableInput2, [{
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
              if (this.input === document.activeElement) {
                this.setState({ blurValue: String(this.props.value).toUpperCase() });
              } else {
                this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() });
              }
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.unbindEventListeners();
          }
        }, {
          key: "getValueObjectWithLabel",
          value: function getValueObjectWithLabel(value) {
            return _defineProperty({}, this.props.label, value);
          }
        }, {
          key: "getArrowOffset",
          value: function getArrowOffset() {
            return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
          }
        }, {
          key: "setUpdatedValue",
          value: function setUpdatedValue(value, e2) {
            var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;
            this.props.onChange && this.props.onChange(onChangeValue, e2);
            this.setState({ value });
          }
        }, {
          key: "render",
          value: function render3() {
            var _this2 = this;
            var styles2 = (0, import_reactcss3.default)({
              "default": {
                wrap: {
                  position: "relative"
                }
              },
              "user-override": {
                wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
                input: this.props.style && this.props.style.input ? this.props.style.input : {},
                label: this.props.style && this.props.style.label ? this.props.style.label : {}
              },
              "dragLabel-true": {
                label: {
                  cursor: "ew-resize"
                }
              }
            }, {
              "user-override": true
            }, this.props);
            return import_react610.default.createElement("div", { style: styles2.wrap }, import_react610.default.createElement("input", {
              id: this.inputId,
              style: styles2.input,
              ref: function ref(input) {
                return _this2.input = input;
              },
              value: this.state.value,
              onKeyDown: this.handleKeyDown,
              onChange: this.handleChange,
              onBlur: this.handleBlur,
              placeholder: this.props.placeholder,
              spellCheck: "false"
            }), this.props.label && !this.props.hideLabel ? import_react610.default.createElement("label", {
              htmlFor: this.inputId,
              style: styles2.label,
              onMouseDown: this.handleMouseDown
            }, this.props.label) : null);
          }
        }]);
        return EditableInput2;
      }(import_react610.PureComponent || import_react610.Component);
      var EditableInput_default = EditableInput;
      var import_react74 = __toESM3(require_react());
      var import_reactcss4 = __toESM3(require_lib());
      var calculateChange3 = function calculateChange4(e2, direction2, hsl, container2) {
        var containerWidth = container2.clientWidth;
        var containerHeight = container2.clientHeight;
        var x2 = typeof e2.pageX === "number" ? e2.pageX : e2.touches[0].pageX;
        var y2 = typeof e2.pageY === "number" ? e2.pageY : e2.touches[0].pageY;
        var left = x2 - (container2.getBoundingClientRect().left + window.pageXOffset);
        var top = y2 - (container2.getBoundingClientRect().top + window.pageYOffset);
        if (direction2 === "vertical") {
          var h2 = void 0;
          if (top < 0) {
            h2 = 359;
          } else if (top > containerHeight) {
            h2 = 0;
          } else {
            var percent2 = -(top * 100 / containerHeight) + 100;
            h2 = 360 * percent2 / 100;
          }
          if (hsl.h !== h2) {
            return {
              h: h2,
              s: hsl.s,
              l: hsl.l,
              a: hsl.a,
              source: "hsl"
            };
          }
        } else {
          var _h2 = void 0;
          if (left < 0) {
            _h2 = 0;
          } else if (left > containerWidth) {
            _h2 = 359;
          } else {
            var _percent = left * 100 / containerWidth;
            _h2 = 360 * _percent / 100;
          }
          if (hsl.h !== _h2) {
            return {
              h: _h2,
              s: hsl.s,
              l: hsl.l,
              a: hsl.a,
              source: "hsl"
            };
          }
        }
        return null;
      };
      var _createClass3 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck3(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn3(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits3(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Hue = function(_ref) {
        _inherits3(Hue2, _ref);
        function Hue2() {
          var _ref2;
          var _temp, _this, _ret;
          _classCallCheck3(this, Hue2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn3(this, (_ref2 = Hue2.__proto__ || Object.getPrototypeOf(Hue2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e2) {
            var change = calculateChange3(e2, _this.props.direction, _this.props.hsl, _this.container);
            change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e2);
          }, _this.handleMouseDown = function(e2) {
            _this.handleChange(e2);
            window.addEventListener("mousemove", _this.handleChange);
            window.addEventListener("mouseup", _this.handleMouseUp);
          }, _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          }, _temp), _possibleConstructorReturn3(_this, _ret);
        }
        _createClass3(Hue2, [{
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.unbindEventListeners();
          }
        }, {
          key: "unbindEventListeners",
          value: function unbindEventListeners() {
            window.removeEventListener("mousemove", this.handleChange);
            window.removeEventListener("mouseup", this.handleMouseUp);
          }
        }, {
          key: "render",
          value: function render3() {
            var _this2 = this;
            var _props$direction = this.props.direction, direction2 = _props$direction === void 0 ? "horizontal" : _props$direction;
            var styles2 = (0, import_reactcss4.default)({
              "default": {
                hue: {
                  absolute: "0px 0px 0px 0px",
                  borderRadius: this.props.radius,
                  boxShadow: this.props.shadow
                },
                container: {
                  padding: "0 2px",
                  position: "relative",
                  height: "100%",
                  borderRadius: this.props.radius
                },
                pointer: {
                  position: "absolute",
                  left: this.props.hsl.h * 100 / 360 + "%"
                },
                slider: {
                  marginTop: "1px",
                  width: "4px",
                  borderRadius: "1px",
                  height: "8px",
                  boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
                  background: "#fff",
                  transform: "translateX(-2px)"
                }
              },
              "vertical": {
                pointer: {
                  left: "0px",
                  top: -(this.props.hsl.h * 100 / 360) + 100 + "%"
                }
              }
            }, { vertical: direction2 === "vertical" });
            return import_react74.default.createElement("div", { style: styles2.hue }, import_react74.default.createElement("div", {
              className: "hue-" + direction2,
              style: styles2.container,
              ref: function ref(container2) {
                return _this2.container = container2;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            }, import_react74.default.createElement("style", null, "\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "), import_react74.default.createElement("div", { style: styles2.pointer }, this.props.pointer ? import_react74.default.createElement(this.props.pointer, this.props) : import_react74.default.createElement("div", { style: styles2.slider }))));
          }
        }]);
        return Hue2;
      }(import_react74.PureComponent || import_react74.Component);
      var Hue_default = Hue;
      var import_react82 = __toESM3(require_react());
      var import_prop_types = __toESM3(require_prop_types());
      var import_reactcss5 = __toESM3(require_lib());
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      var listCacheClear_default = listCacheClear;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var eq_default = eq;
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq_default(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var assocIndexOf_default = assocIndexOf;
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf_default(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      var listCacheDelete_default = listCacheDelete;
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf_default(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      var listCacheGet_default = listCacheGet;
      function listCacheHas(key) {
        return assocIndexOf_default(this.__data__, key) > -1;
      }
      var listCacheHas_default = listCacheHas;
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf_default(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      var listCacheSet_default = listCacheSet;
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear_default;
      ListCache.prototype["delete"] = listCacheDelete_default;
      ListCache.prototype.get = listCacheGet_default;
      ListCache.prototype.has = listCacheHas_default;
      ListCache.prototype.set = listCacheSet_default;
      var ListCache_default = ListCache;
      function stackClear() {
        this.__data__ = new ListCache_default();
        this.size = 0;
      }
      var stackClear_default = stackClear;
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      var stackDelete_default = stackDelete;
      function stackGet(key) {
        return this.__data__.get(key);
      }
      var stackGet_default = stackGet;
      function stackHas(key) {
        return this.__data__.has(key);
      }
      var stackHas_default = stackHas;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeGlobal_default = freeGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal_default || freeSelf || Function("return this")();
      var root_default = root;
      var Symbol2 = root_default.Symbol;
      var Symbol_default = Symbol2;
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      var getRawTag_default = getRawTag;
      var objectProto2 = Object.prototype;
      var nativeObjectToString2 = objectProto2.toString;
      function objectToString(value) {
        return nativeObjectToString2.call(value);
      }
      var objectToString_default = objectToString;
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
      }
      var baseGetTag_default = baseGetTag;
      function isObject5(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var isObject_default = isObject5;
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction5(value) {
        if (!isObject_default(value)) {
          return false;
        }
        var tag = baseGetTag_default(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      var isFunction_default = isFunction5;
      var coreJsData = root_default["__core-js_shared__"];
      var coreJsData_default = coreJsData;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMasked_default = isMasked;
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var toSource_default = toSource;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto2 = Function.prototype;
      var objectProto3 = Object.prototype;
      var funcToString2 = funcProto2.toString;
      var hasOwnProperty2 = objectProto3.hasOwnProperty;
      var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative(value) {
        if (!isObject_default(value) || isMasked_default(value)) {
          return false;
        }
        var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource_default(value));
      }
      var baseIsNative_default = baseIsNative;
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      var getValue_default = getValue;
      function getNative(object, key) {
        var value = getValue_default(object, key);
        return baseIsNative_default(value) ? value : void 0;
      }
      var getNative_default = getNative;
      var Map2 = getNative_default(root_default, "Map");
      var Map_default = Map2;
      var nativeCreate = getNative_default(Object, "create");
      var nativeCreate_default = nativeCreate;
      function hashClear() {
        this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
        this.size = 0;
      }
      var hashClear_default = hashClear;
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      var hashDelete_default = hashDelete;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto4 = Object.prototype;
      var hasOwnProperty3 = objectProto4.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate_default) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty3.call(data, key) ? data[key] : void 0;
      }
      var hashGet_default = hashGet;
      var objectProto5 = Object.prototype;
      var hasOwnProperty4 = objectProto5.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
      }
      var hashHas_default = hashHas;
      var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
        return this;
      }
      var hashSet_default = hashSet;
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear_default;
      Hash.prototype["delete"] = hashDelete_default;
      Hash.prototype.get = hashGet_default;
      Hash.prototype.has = hashHas_default;
      Hash.prototype.set = hashSet_default;
      var Hash_default = Hash;
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash_default(),
          "map": new (Map_default || ListCache_default)(),
          "string": new Hash_default()
        };
      }
      var mapCacheClear_default = mapCacheClear;
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      var isKeyable_default = isKeyable;
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      var getMapData_default = getMapData;
      function mapCacheDelete(key) {
        var result = getMapData_default(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      var mapCacheDelete_default = mapCacheDelete;
      function mapCacheGet(key) {
        return getMapData_default(this, key).get(key);
      }
      var mapCacheGet_default = mapCacheGet;
      function mapCacheHas(key) {
        return getMapData_default(this, key).has(key);
      }
      var mapCacheHas_default = mapCacheHas;
      function mapCacheSet(key, value) {
        var data = getMapData_default(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      var mapCacheSet_default = mapCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear_default;
      MapCache.prototype["delete"] = mapCacheDelete_default;
      MapCache.prototype.get = mapCacheGet_default;
      MapCache.prototype.has = mapCacheHas_default;
      MapCache.prototype.set = mapCacheSet_default;
      var MapCache_default = MapCache;
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache_default) {
          var pairs = data.__data__;
          if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache_default(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      var stackSet_default = stackSet;
      function Stack2(entries) {
        var data = this.__data__ = new ListCache_default(entries);
        this.size = data.size;
      }
      Stack2.prototype.clear = stackClear_default;
      Stack2.prototype["delete"] = stackDelete_default;
      Stack2.prototype.get = stackGet_default;
      Stack2.prototype.has = stackHas_default;
      Stack2.prototype.set = stackSet_default;
      var Stack_default = Stack2;
      var defineProperty = function() {
        try {
          var func = getNative_default(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      var defineProperty_default = defineProperty;
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty_default) {
          defineProperty_default(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var baseAssignValue_default = baseAssignValue;
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq_default(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue_default(object, key, value);
        }
      }
      var assignMergeValue_default = assignMergeValue;
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      var createBaseFor_default = createBaseFor;
      var baseFor = createBaseFor_default();
      var baseFor_default = baseFor;
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root_default.Buffer : void 0;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      var cloneBuffer_default = cloneBuffer;
      var Uint8Array2 = root_default.Uint8Array;
      var Uint8Array_default = Uint8Array2;
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
        return result;
      }
      var cloneArrayBuffer_default = cloneArrayBuffer;
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      var cloneTypedArray_default = cloneTypedArray;
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      var copyArray_default = copyArray;
      var objectCreate = Object.create;
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject_default(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      var baseCreate_default = baseCreate;
      function overArg(func, transform2) {
        return function(arg) {
          return func(transform2(arg));
        };
      }
      var overArg_default = overArg;
      var getPrototype = overArg_default(Object.getPrototypeOf, Object);
      var getPrototype_default = getPrototype;
      var objectProto6 = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto6;
        return value === proto;
      }
      var isPrototype_default = isPrototype;
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
      }
      var initCloneObject_default = initCloneObject;
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isObjectLike_default = isObjectLike;
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
      }
      var baseIsArguments_default = baseIsArguments;
      var objectProto7 = Object.prototype;
      var hasOwnProperty5 = objectProto7.hasOwnProperty;
      var propertyIsEnumerable = objectProto7.propertyIsEnumerable;
      var isArguments = baseIsArguments_default(function() {
        return arguments;
      }()) ? baseIsArguments_default : function(value) {
        return isObjectLike_default(value) && hasOwnProperty5.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArguments_default = isArguments;
      var isArray = Array.isArray;
      var isArray_default = isArray;
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      var isLength_default = isLength;
      function isArrayLike(value) {
        return value != null && isLength_default(value.length) && !isFunction_default(value);
      }
      var isArrayLike_default = isArrayLike;
      function isArrayLikeObject(value) {
        return isObjectLike_default(value) && isArrayLike_default(value);
      }
      var isArrayLikeObject_default = isArrayLikeObject;
      function stubFalse() {
        return false;
      }
      var stubFalse_default = stubFalse;
      var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
      var Buffer3 = moduleExports2 ? root_default.Buffer : void 0;
      var nativeIsBuffer = Buffer3 ? Buffer3.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse_default;
      var isBuffer_default = isBuffer;
      var objectTag = "[object Object]";
      var funcProto3 = Function.prototype;
      var objectProto8 = Object.prototype;
      var funcToString3 = funcProto3.toString;
      var hasOwnProperty6 = objectProto8.hasOwnProperty;
      var objectCtorString = funcToString3.call(Object);
      function isPlainObject(value) {
        if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {
          return false;
        }
        var proto = getPrototype_default(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty6.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
      }
      var isPlainObject_default = isPlainObject;
      var argsTag2 = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag2 = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag2 = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag2] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
      }
      var baseIsTypedArray_default = baseIsTypedArray;
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      var baseUnary_default = baseUnary;
      var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
      var freeProcess = moduleExports3 && freeGlobal_default.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule3 && freeModule3.require && freeModule3.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      var nodeUtil_default = nodeUtil;
      var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
      var isTypedArray_default = isTypedArray;
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var safeGet_default = safeGet;
      var objectProto9 = Object.prototype;
      var hasOwnProperty7 = objectProto9.hasOwnProperty;
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty7.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue_default(object, key, value);
        }
      }
      var assignValue_default = assignValue;
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue_default(object, key, newValue);
          } else {
            assignValue_default(object, key, newValue);
          }
        }
        return object;
      }
      var copyObject_default = copyObject;
      function baseTimes(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      var baseTimes_default = baseTimes;
      var MAX_SAFE_INTEGER2 = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER2 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      var isIndex_default = isIndex;
      var objectProto10 = Object.prototype;
      var hasOwnProperty8 = objectProto10.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty8.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      var arrayLikeKeys_default = arrayLikeKeys;
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      var nativeKeysIn_default = nativeKeysIn;
      var objectProto11 = Object.prototype;
      var hasOwnProperty9 = objectProto11.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject_default(object)) {
          return nativeKeysIn_default(object);
        }
        var isProto = isPrototype_default(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty9.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      var baseKeysIn_default = baseKeysIn;
      function keysIn(object) {
        return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
      }
      var keysIn_default = keysIn;
      function toPlainObject(value) {
        return copyObject_default(value, keysIn_default(value));
      }
      var toPlainObject_default = toPlainObject;
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet_default(object, key), srcValue = safeGet_default(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue_default(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray_default(srcValue), isBuff = !isArr && isBuffer_default(srcValue), isTyped = !isArr && !isBuff && isTypedArray_default(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray_default(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject_default(objValue)) {
              newValue = copyArray_default(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer_default(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray_default(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject_default(srcValue) || isArguments_default(srcValue)) {
            newValue = objValue;
            if (isArguments_default(objValue)) {
              newValue = toPlainObject_default(objValue);
            } else if (!isObject_default(objValue) || isFunction_default(objValue)) {
              newValue = initCloneObject_default(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue_default(object, key, newValue);
      }
      var baseMergeDeep_default = baseMergeDeep;
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor_default(source, function(srcValue, key) {
          stack || (stack = new Stack_default());
          if (isObject_default(srcValue)) {
            baseMergeDeep_default(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet_default(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue_default(object, key, newValue);
          }
        }, keysIn_default);
      }
      var baseMerge_default = baseMerge;
      function identity(value) {
        return value;
      }
      var identity_default = identity;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      var apply_default = apply;
      var nativeMax = Math.max;
      function overRest(func, start, transform2) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform2(array);
          return apply_default(func, this, otherArgs);
        };
      }
      var overRest_default = overRest;
      function constant(value) {
        return function() {
          return value;
        };
      }
      var constant_default = constant;
      var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
        return defineProperty_default(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant_default(string),
          "writable": true
        });
      };
      var baseSetToString_default = baseSetToString;
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      var shortOut_default = shortOut;
      var setToString = shortOut_default(baseSetToString_default);
      var setToString_default = setToString;
      function baseRest(func, start) {
        return setToString_default(overRest_default(func, start, identity_default), func + "");
      }
      var baseRest_default = baseRest;
      function isIterateeCall(value, index, object) {
        if (!isObject_default(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
          return eq_default(object[index], value);
        }
        return false;
      }
      var isIterateeCall_default = isIterateeCall;
      function createAssigner(assigner) {
        return baseRest_default(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      var createAssigner_default = createAssigner;
      var merge2 = createAssigner_default(function(object, source, srcIndex) {
        baseMerge_default(object, source, srcIndex);
      });
      var merge_default = merge2;
      var Raised = function Raised2(_ref) {
        var zDepth = _ref.zDepth, radius = _ref.radius, background2 = _ref.background, children = _ref.children, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles;
        var styles2 = (0, import_reactcss5.default)(merge_default({
          "default": {
            wrap: {
              position: "relative",
              display: "inline-block"
            },
            content: {
              position: "relative"
            },
            bg: {
              absolute: "0px 0px 0px 0px",
              boxShadow: "0 " + zDepth + "px " + zDepth * 4 + "px rgba(0,0,0,.24)",
              borderRadius: radius,
              background: background2
            }
          },
          "zDepth-0": {
            bg: {
              boxShadow: "none"
            }
          },
          "zDepth-1": {
            bg: {
              boxShadow: "0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"
            }
          },
          "zDepth-2": {
            bg: {
              boxShadow: "0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"
            }
          },
          "zDepth-3": {
            bg: {
              boxShadow: "0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"
            }
          },
          "zDepth-4": {
            bg: {
              boxShadow: "0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"
            }
          },
          "zDepth-5": {
            bg: {
              boxShadow: "0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"
            }
          },
          "square": {
            bg: {
              borderRadius: "0"
            }
          },
          "circle": {
            bg: {
              borderRadius: "50%"
            }
          }
        }, passedStyles), { "zDepth-1": zDepth === 1 });
        return import_react82.default.createElement("div", { style: styles2.wrap }, import_react82.default.createElement("div", { style: styles2.bg }), import_react82.default.createElement("div", { style: styles2.content }, children));
      };
      Raised.propTypes = {
        background: import_prop_types.default.string,
        zDepth: import_prop_types.default.oneOf([0, 1, 2, 3, 4, 5]),
        radius: import_prop_types.default.number,
        styles: import_prop_types.default.object
      };
      Raised.defaultProps = {
        background: "#fff",
        zDepth: 1,
        radius: 2,
        styles: {}
      };
      var Raised_default = Raised;
      var import_react92 = __toESM3(require_react());
      var import_reactcss6 = __toESM3(require_lib());
      var now = function() {
        return root_default.Date.now();
      };
      var now_default = now;
      var reWhitespace = /\s/;
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var trimmedEndIndex_default = trimmedEndIndex;
      var reTrimStart = /^\s+/;
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
      }
      var baseTrim_default = baseTrim;
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
      }
      var isSymbol_default = isSymbol;
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol_default(value)) {
          return NAN;
        }
        if (isObject_default(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject_default(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim_default(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      var toNumber_default = toNumber;
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax2 = Math.max;
      var nativeMin = Math.min;
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber_default(wait) || 0;
        if (isObject_default(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax2(toNumber_default(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now_default();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now_default());
        }
        function debounced() {
          var time = now_default(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var debounce_default = debounce;
      var FUNC_ERROR_TEXT2 = "Expected a function";
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT2);
        }
        if (isObject_default(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce_default(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      var throttle_default = throttle;
      var calculateChange5 = function calculateChange6(e2, hsl, container2) {
        var _container$getBoundin = container2.getBoundingClientRect(), containerWidth = _container$getBoundin.width, containerHeight = _container$getBoundin.height;
        var x2 = typeof e2.pageX === "number" ? e2.pageX : e2.touches[0].pageX;
        var y2 = typeof e2.pageY === "number" ? e2.pageY : e2.touches[0].pageY;
        var left = x2 - (container2.getBoundingClientRect().left + window.pageXOffset);
        var top = y2 - (container2.getBoundingClientRect().top + window.pageYOffset);
        if (left < 0) {
          left = 0;
        } else if (left > containerWidth) {
          left = containerWidth;
        }
        if (top < 0) {
          top = 0;
        } else if (top > containerHeight) {
          top = containerHeight;
        }
        var saturation = left / containerWidth;
        var bright = 1 - top / containerHeight;
        return {
          h: hsl.h,
          s: saturation,
          v: bright,
          a: hsl.a,
          source: "hsv"
        };
      };
      var _createClass4 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck4(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn4(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits4(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Saturation = function(_ref) {
        _inherits4(Saturation2, _ref);
        function Saturation2(props) {
          _classCallCheck4(this, Saturation2);
          var _this = _possibleConstructorReturn4(this, (Saturation2.__proto__ || Object.getPrototypeOf(Saturation2)).call(this, props));
          _this.handleChange = function(e2) {
            typeof _this.props.onChange === "function" && _this.throttle(_this.props.onChange, calculateChange5(e2, _this.props.hsl, _this.container), e2);
          };
          _this.handleMouseDown = function(e2) {
            _this.handleChange(e2);
            var renderWindow = _this.getContainerRenderWindow();
            renderWindow.addEventListener("mousemove", _this.handleChange);
            renderWindow.addEventListener("mouseup", _this.handleMouseUp);
          };
          _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          };
          _this.throttle = throttle_default(function(fn, data, e2) {
            fn(data, e2);
          }, 50);
          return _this;
        }
        _createClass4(Saturation2, [{
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.throttle.cancel();
            this.unbindEventListeners();
          }
        }, {
          key: "getContainerRenderWindow",
          value: function getContainerRenderWindow() {
            var container2 = this.container;
            var renderWindow = window;
            while (!renderWindow.document.contains(container2) && renderWindow.parent !== renderWindow) {
              renderWindow = renderWindow.parent;
            }
            return renderWindow;
          }
        }, {
          key: "unbindEventListeners",
          value: function unbindEventListeners() {
            var renderWindow = this.getContainerRenderWindow();
            renderWindow.removeEventListener("mousemove", this.handleChange);
            renderWindow.removeEventListener("mouseup", this.handleMouseUp);
          }
        }, {
          key: "render",
          value: function render3() {
            var _this2 = this;
            var _ref2 = this.props.style || {}, color3 = _ref2.color, white = _ref2.white, black = _ref2.black, pointer = _ref2.pointer, circle = _ref2.circle;
            var styles2 = (0, import_reactcss6.default)({
              "default": {
                color: {
                  absolute: "0px 0px 0px 0px",
                  background: "hsl(" + this.props.hsl.h + ",100%, 50%)",
                  borderRadius: this.props.radius
                },
                white: {
                  absolute: "0px 0px 0px 0px",
                  borderRadius: this.props.radius
                },
                black: {
                  absolute: "0px 0px 0px 0px",
                  boxShadow: this.props.shadow,
                  borderRadius: this.props.radius
                },
                pointer: {
                  position: "absolute",
                  top: -(this.props.hsv.v * 100) + 100 + "%",
                  left: this.props.hsv.s * 100 + "%",
                  cursor: "default"
                },
                circle: {
                  width: "4px",
                  height: "4px",
                  boxShadow: "0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",
                  borderRadius: "50%",
                  cursor: "hand",
                  transform: "translate(-2px, -2px)"
                }
              },
              "custom": {
                color: color3,
                white,
                black,
                pointer,
                circle
              }
            }, { "custom": !!this.props.style });
            return import_react92.default.createElement("div", {
              style: styles2.color,
              ref: function ref(container2) {
                return _this2.container = container2;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            }, import_react92.default.createElement("style", null, "\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "), import_react92.default.createElement("div", { style: styles2.white, className: "saturation-white" }, import_react92.default.createElement("div", { style: styles2.black, className: "saturation-black" }), import_react92.default.createElement("div", { style: styles2.pointer }, this.props.pointer ? import_react92.default.createElement(this.props.pointer, this.props) : import_react92.default.createElement("div", { style: styles2.circle }))));
          }
        }]);
        return Saturation2;
      }(import_react92.PureComponent || import_react92.Component);
      var Saturation_default = Saturation;
      var import_react102 = __toESM3(require_react());
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      var arrayEach_default = arrayEach;
      var nativeKeys = overArg_default(Object.keys, Object);
      var nativeKeys_default = nativeKeys;
      var objectProto12 = Object.prototype;
      var hasOwnProperty10 = objectProto12.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype_default(object)) {
          return nativeKeys_default(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty10.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      var baseKeys_default = baseKeys;
      function keys2(object) {
        return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
      }
      var keys_default = keys2;
      function baseForOwn(object, iteratee) {
        return object && baseFor_default(object, iteratee, keys_default);
      }
      var baseForOwn_default = baseForOwn;
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike_default(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      var createBaseEach_default = createBaseEach;
      var baseEach = createBaseEach_default(baseForOwn_default);
      var baseEach_default = baseEach;
      function castFunction(value) {
        return typeof value == "function" ? value : identity_default;
      }
      var castFunction_default = castFunction;
      function forEach(collection, iteratee) {
        var func = isArray_default(collection) ? arrayEach_default : baseEach_default;
        return func(collection, castFunction_default(iteratee));
      }
      var forEach_default = forEach;
      var import_tinycolor2 = __toESM3(require_tinycolor());
      var simpleCheckForValidColor = function simpleCheckForValidColor2(data) {
        var keysToCheck = ["r", "g", "b", "a", "h", "s", "l", "v"];
        var checked = 0;
        var passed = 0;
        forEach_default(keysToCheck, function(letter) {
          if (data[letter]) {
            checked += 1;
            if (!isNaN(data[letter])) {
              passed += 1;
            }
            if (letter === "s" || letter === "l") {
              var percentPatt = /^\d+%$/;
              if (percentPatt.test(data[letter])) {
                passed += 1;
              }
            }
          }
        });
        return checked === passed ? data : false;
      };
      var toState = function toState2(data, oldHue) {
        var color3 = data.hex ? (0, import_tinycolor2.default)(data.hex) : (0, import_tinycolor2.default)(data);
        var hsl = color3.toHsl();
        var hsv = color3.toHsv();
        var rgb = color3.toRgb();
        var hex2 = color3.toHex();
        if (hsl.s === 0) {
          hsl.h = oldHue || 0;
          hsv.h = oldHue || 0;
        }
        var transparent = hex2 === "000000" && rgb.a === 0;
        return {
          hsl,
          hex: transparent ? "transparent" : "#" + hex2,
          rgb,
          hsv,
          oldHue: data.h || oldHue || hsl.h,
          source: data.source
        };
      };
      var isValidHex = function isValidHex2(hex2) {
        if (hex2 === "transparent") {
          return true;
        }
        var lh = String(hex2).charAt(0) === "#" ? 1 : 0;
        return hex2.length !== 4 + lh && hex2.length < 7 + lh && (0, import_tinycolor2.default)(hex2).isValid();
      };
      var getContrastingColor = function getContrastingColor2(data) {
        if (!data) {
          return "#fff";
        }
        var col = toState(data);
        if (col.hex === "transparent") {
          return "rgba(0,0,0,0.4)";
        }
        var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1e3;
        return yiq >= 128 ? "#000" : "#fff";
      };
      var isvalidColorString = function isvalidColorString2(string, type) {
        var stringWithoutDegree = string.replace("\xB0", "");
        return (0, import_tinycolor2.default)(type + " (" + stringWithoutDegree + ")")._ok;
      };
      var _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass5 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck5(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn5(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits5(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var ColorWrap = function ColorWrap2(Picker) {
        var ColorPicker = function(_ref) {
          _inherits5(ColorPicker2, _ref);
          function ColorPicker2(props) {
            _classCallCheck5(this, ColorPicker2);
            var _this = _possibleConstructorReturn5(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this));
            _this.handleChange = function(data, event) {
              var isValidColor = simpleCheckForValidColor(data);
              if (isValidColor) {
                var colors2 = toState(data, data.h || _this.state.oldHue);
                _this.setState(colors2);
                _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors2, event);
                _this.props.onChange && _this.props.onChange(colors2, event);
              }
            };
            _this.handleSwatchHover = function(data, event) {
              var isValidColor = simpleCheckForValidColor(data);
              if (isValidColor) {
                var colors2 = toState(data, data.h || _this.state.oldHue);
                _this.props.onSwatchHover && _this.props.onSwatchHover(colors2, event);
              }
            };
            _this.state = _extends3({}, toState(props.color, 0));
            _this.debounce = debounce_default(function(fn, data, event) {
              fn(data, event);
            }, 100);
            return _this;
          }
          _createClass5(ColorPicker2, [{
            key: "render",
            value: function render3() {
              var optionalEvents = {};
              if (this.props.onSwatchHover) {
                optionalEvents.onSwatchHover = this.handleSwatchHover;
              }
              return import_react102.default.createElement(Picker, _extends3({}, this.props, this.state, {
                onChange: this.handleChange
              }, optionalEvents));
            }
          }], [{
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, state2) {
              return _extends3({}, toState(nextProps.color, state2.oldHue));
            }
          }]);
          return ColorPicker2;
        }(import_react102.PureComponent || import_react102.Component);
        ColorPicker.propTypes = _extends3({}, Picker.propTypes);
        ColorPicker.defaultProps = _extends3({}, Picker.defaultProps, {
          color: {
            h: 250,
            s: 0.5,
            l: 0.2,
            a: 1
          }
        });
        return ColorPicker;
      };
      var ColorWrap_default = ColorWrap;
      var import_react122 = __toESM3(require_react());
      var import_reactcss7 = __toESM3(require_lib());
      var import_react112 = __toESM3(require_react());
      var _extends4 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass6 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck6(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn6(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits6(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var handleFocus = function handleFocus2(Component6) {
        var Span = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits6(Focus, _React$Component);
          function Focus() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck6(this, Focus);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn6(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function() {
              return _this.setState({ focus: true });
            }, _this.handleBlur = function() {
              return _this.setState({ focus: false });
            }, _temp), _possibleConstructorReturn6(_this, _ret);
          }
          _createClass6(Focus, [{
            key: "render",
            value: function render3() {
              return import_react112.default.createElement(Span, { onFocus: this.handleFocus, onBlur: this.handleBlur }, import_react112.default.createElement(Component6, _extends4({}, this.props, this.state)));
            }
          }]);
          return Focus;
        }(import_react112.default.Component);
      };
      var _extends5 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var ENTER = 13;
      var Swatch = function Swatch2(_ref) {
        var color3 = _ref.color, style = _ref.style, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onHover = _ref.onHover, _ref$title = _ref.title, title = _ref$title === void 0 ? color3 : _ref$title, children = _ref.children, focus = _ref.focus, _ref$focusStyle = _ref.focusStyle, focusStyle = _ref$focusStyle === void 0 ? {} : _ref$focusStyle;
        var transparent = color3 === "transparent";
        var styles2 = (0, import_reactcss7.default)({
          default: {
            swatch: _extends5({
              background: color3,
              height: "100%",
              width: "100%",
              cursor: "pointer",
              position: "relative",
              outline: "none"
            }, style, focus ? focusStyle : {})
          }
        });
        var handleClick = function handleClick2(e2) {
          return onClick(color3, e2);
        };
        var handleKeyDown = function handleKeyDown2(e2) {
          return e2.keyCode === ENTER && onClick(color3, e2);
        };
        var handleHover3 = function handleHover4(e2) {
          return onHover(color3, e2);
        };
        var optionalEvents = {};
        if (onHover) {
          optionalEvents.onMouseOver = handleHover3;
        }
        return import_react122.default.createElement("div", _extends5({
          style: styles2.swatch,
          onClick: handleClick,
          title,
          tabIndex: 0,
          onKeyDown: handleKeyDown
        }, optionalEvents), children, transparent && import_react122.default.createElement(Checkboard_default, {
          borderRadius: styles2.swatch.borderRadius,
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,0.1)"
        }));
      };
      var Swatch_default = handleFocus(Swatch);
      var import_react132 = __toESM3(require_react());
      var import_reactcss8 = __toESM3(require_lib());
      var AlphaPointer = function AlphaPointer2(_ref) {
        var direction2 = _ref.direction;
        var styles2 = (0, import_reactcss8.default)({
          "default": {
            picker: {
              width: "18px",
              height: "18px",
              borderRadius: "50%",
              transform: "translate(-9px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          },
          "vertical": {
            picker: {
              transform: "translate(-3px, -9px)"
            }
          }
        }, { vertical: direction2 === "vertical" });
        return import_react132.default.createElement("div", { style: styles2.picker });
      };
      var AlphaPointer_default = AlphaPointer;
      var _extends6 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var AlphaPicker = function AlphaPicker2(_ref) {
        var rgb = _ref.rgb, hsl = _ref.hsl, width = _ref.width, height = _ref.height, onChange = _ref.onChange, direction2 = _ref.direction, style = _ref.style, renderers = _ref.renderers, pointer = _ref.pointer, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss9.default)({
          "default": {
            picker: {
              position: "relative",
              width,
              height
            },
            alpha: {
              radius: "2px",
              style
            }
          }
        });
        return import_react142.default.createElement("div", { style: styles2.picker, className: "alpha-picker " + className }, import_react142.default.createElement(Alpha_default, _extends6({}, styles2.alpha, {
          rgb,
          hsl,
          pointer,
          renderers,
          onChange,
          direction: direction2
        })));
      };
      AlphaPicker.defaultProps = {
        width: "316px",
        height: "16px",
        direction: "horizontal",
        pointer: AlphaPointer_default
      };
      var Alpha_default2 = ColorWrap_default(AlphaPicker);
      var import_react162 = __toESM3(require_react());
      var import_prop_types2 = __toESM3(require_prop_types());
      var import_reactcss11 = __toESM3(require_lib());
      var import_react152 = __toESM3(require_react());
      var import_reactcss10 = __toESM3(require_lib());
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      var arrayMap_default = arrayMap;
      var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED3);
        return this;
      }
      var setCacheAdd_default = setCacheAdd;
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      var setCacheHas_default = setCacheHas;
      function SetCache(values) {
        var index = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache_default();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
      SetCache.prototype.has = setCacheHas_default;
      var SetCache_default = SetCache;
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var arraySome_default = arraySome;
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      var cacheHas_default = cacheHas;
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome_default(other, function(othValue2, othIndex) {
              if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      var equalArrays_default = equalArrays;
      function mapToArray(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      var mapToArray_default = mapToArray;
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      var setToArray_default = setToArray;
      var COMPARE_PARTIAL_FLAG2 = 1;
      var COMPARE_UNORDERED_FLAG2 = 2;
      var boolTag2 = "[object Boolean]";
      var dateTag2 = "[object Date]";
      var errorTag2 = "[object Error]";
      var mapTag2 = "[object Map]";
      var numberTag2 = "[object Number]";
      var regexpTag2 = "[object RegExp]";
      var setTag2 = "[object Set]";
      var stringTag2 = "[object String]";
      var symbolTag2 = "[object Symbol]";
      var arrayBufferTag2 = "[object ArrayBuffer]";
      var dataViewTag2 = "[object DataView]";
      var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag2:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag2:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
              return false;
            }
            return true;
          case boolTag2:
          case dateTag2:
          case numberTag2:
            return eq_default(+object, +other);
          case errorTag2:
            return object.name == other.name && object.message == other.message;
          case regexpTag2:
          case stringTag2:
            return object == other + "";
          case mapTag2:
            var convert = mapToArray_default;
          case setTag2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
            convert || (convert = setToArray_default);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG2;
            stack.set(object, other);
            var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag2:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      var equalByTag_default = equalByTag;
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      var arrayPush_default = arrayPush;
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
      }
      var baseGetAllKeys_default = baseGetAllKeys;
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      var arrayFilter_default = arrayFilter;
      function stubArray() {
        return [];
      }
      var stubArray_default = stubArray;
      var objectProto13 = Object.prototype;
      var propertyIsEnumerable2 = objectProto13.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable2.call(object, symbol);
        });
      };
      var getSymbols_default = getSymbols;
      function getAllKeys(object) {
        return baseGetAllKeys_default(object, keys_default, getSymbols_default);
      }
      var getAllKeys_default = getAllKeys;
      var COMPARE_PARTIAL_FLAG3 = 1;
      var objectProto14 = Object.prototype;
      var hasOwnProperty11 = objectProto14.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty11.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      var equalObjects_default = equalObjects;
      var DataView2 = getNative_default(root_default, "DataView");
      var DataView_default = DataView2;
      var Promise2 = getNative_default(root_default, "Promise");
      var Promise_default = Promise2;
      var Set2 = getNative_default(root_default, "Set");
      var Set_default = Set2;
      var WeakMap2 = getNative_default(root_default, "WeakMap");
      var WeakMap_default = WeakMap2;
      var mapTag3 = "[object Map]";
      var objectTag3 = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag3 = "[object Set]";
      var weakMapTag2 = "[object WeakMap]";
      var dataViewTag3 = "[object DataView]";
      var dataViewCtorString = toSource_default(DataView_default);
      var mapCtorString = toSource_default(Map_default);
      var promiseCtorString = toSource_default(Promise_default);
      var setCtorString = toSource_default(Set_default);
      var weakMapCtorString = toSource_default(WeakMap_default);
      var getTag = baseGetTag_default;
      if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
        getTag = function(value) {
          var result = baseGetTag_default(value), Ctor = result == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag3;
              case mapCtorString:
                return mapTag3;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag3;
              case weakMapCtorString:
                return weakMapTag2;
            }
          }
          return result;
        };
      }
      var getTag_default = getTag;
      var COMPARE_PARTIAL_FLAG4 = 1;
      var argsTag3 = "[object Arguments]";
      var arrayTag2 = "[object Array]";
      var objectTag4 = "[object Object]";
      var objectProto15 = Object.prototype;
      var hasOwnProperty12 = objectProto15.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object), othTag = othIsArr ? arrayTag2 : getTag_default(other);
        objTag = objTag == argsTag3 ? objectTag4 : objTag;
        othTag = othTag == argsTag3 ? objectTag4 : othTag;
        var objIsObj = objTag == objectTag4, othIsObj = othTag == objectTag4, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer_default(object)) {
          if (!isBuffer_default(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack_default());
          return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
          var objIsWrapped = objIsObj && hasOwnProperty12.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty12.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack_default());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack_default());
        return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
      }
      var baseIsEqualDeep_default = baseIsEqualDeep;
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      var baseIsEqual_default = baseIsEqual;
      var COMPARE_PARTIAL_FLAG5 = 1;
      var COMPARE_UNORDERED_FLAG3 = 2;
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack_default();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      var baseIsMatch_default = baseIsMatch;
      function isStrictComparable(value) {
        return value === value && !isObject_default(value);
      }
      var isStrictComparable_default = isStrictComparable;
      function getMatchData(object) {
        var result = keys_default(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable_default(value)];
        }
        return result;
      }
      var getMatchData_default = getMatchData;
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      var matchesStrictComparable_default = matchesStrictComparable;
      function baseMatches(source) {
        var matchData = getMatchData_default(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch_default(object, source, matchData);
        };
      }
      var baseMatches_default = baseMatches;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray_default(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      var isKey_default = isKey;
      var FUNC_ERROR_TEXT3 = "Expected a function";
      function memoize3(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT3);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize3.Cache || MapCache_default)();
        return memoized;
      }
      memoize3.Cache = MapCache_default;
      var memoize_default = memoize3;
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize_default(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      var memoizeCapped_default = memoizeCapped;
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped_default(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName, function(match, number2, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
        });
        return result;
      });
      var stringToPath_default = stringToPath;
      var INFINITY = 1 / 0;
      var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
      var symbolToString = symbolProto2 ? symbolProto2.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray_default(value)) {
          return arrayMap_default(value, baseToString) + "";
        }
        if (isSymbol_default(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      var baseToString_default = baseToString;
      function toString(value) {
        return value == null ? "" : baseToString_default(value);
      }
      var toString_default = toString;
      function castPath(value, object) {
        if (isArray_default(value)) {
          return value;
        }
        return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
      }
      var castPath_default = castPath;
      var INFINITY2 = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol_default(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
      }
      var toKey_default = toKey;
      function baseGet(object, path) {
        path = castPath_default(path, object);
        var index = 0, length = path.length;
        while (object != null && index < length) {
          object = object[toKey_default(path[index++])];
        }
        return index && index == length ? object : void 0;
      }
      var baseGet_default = baseGet;
      function get32(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet_default(object, path);
        return result === void 0 ? defaultValue : result;
      }
      var get_default = get32;
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      var baseHasIn_default = baseHasIn;
      function hasPath(object, path, hasFunc) {
        path = castPath_default(path, object);
        var index = -1, length = path.length, result = false;
        while (++index < length) {
          var key = toKey_default(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength_default(length) && isIndex_default(key, length) && (isArray_default(object) || isArguments_default(object));
      }
      var hasPath_default = hasPath;
      function hasIn(object, path) {
        return object != null && hasPath_default(object, path, baseHasIn_default);
      }
      var hasIn_default = hasIn;
      var COMPARE_PARTIAL_FLAG6 = 1;
      var COMPARE_UNORDERED_FLAG4 = 2;
      function baseMatchesProperty(path, srcValue) {
        if (isKey_default(path) && isStrictComparable_default(srcValue)) {
          return matchesStrictComparable_default(toKey_default(path), srcValue);
        }
        return function(object) {
          var objValue = get_default(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
        };
      }
      var baseMatchesProperty_default = baseMatchesProperty;
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      var baseProperty_default = baseProperty;
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet_default(object, path);
        };
      }
      var basePropertyDeep_default = basePropertyDeep;
      function property(path) {
        return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
      }
      var property_default = property;
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity_default;
        }
        if (typeof value == "object") {
          return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
        }
        return property_default(value);
      }
      var baseIteratee_default = baseIteratee;
      function baseMap(collection, iteratee) {
        var index = -1, result = isArrayLike_default(collection) ? Array(collection.length) : [];
        baseEach_default(collection, function(value, key, collection2) {
          result[++index] = iteratee(value, key, collection2);
        });
        return result;
      }
      var baseMap_default = baseMap;
      function map(collection, iteratee) {
        var func = isArray_default(collection) ? arrayMap_default : baseMap_default;
        return func(collection, baseIteratee_default(iteratee, 3));
      }
      var map_default = map;
      var BlockSwatches = function BlockSwatches2(_ref) {
        var colors2 = _ref.colors, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
        var styles2 = (0, import_reactcss10.default)({
          "default": {
            swatches: {
              marginRight: "-10px"
            },
            swatch: {
              width: "22px",
              height: "22px",
              float: "left",
              marginRight: "10px",
              marginBottom: "10px",
              borderRadius: "4px"
            },
            clear: {
              clear: "both"
            }
          }
        });
        return import_react152.default.createElement("div", { style: styles2.swatches }, map_default(colors2, function(c2) {
          return import_react152.default.createElement(Swatch_default, {
            key: c2,
            color: c2,
            style: styles2.swatch,
            onClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "0 0 4px " + c2
            }
          });
        }), import_react152.default.createElement("div", { style: styles2.clear }));
      };
      var BlockSwatches_default = BlockSwatches;
      var Block = function Block2(_ref) {
        var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex2 = _ref.hex, colors2 = _ref.colors, width = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var transparent = hex2 === "transparent";
        var handleChange = function handleChange2(hexCode, e2) {
          isValidHex(hexCode) && onChange({
            hex: hexCode,
            source: "hex"
          }, e2);
        };
        var styles2 = (0, import_reactcss11.default)(merge_default({
          "default": {
            card: {
              width,
              background: "#fff",
              boxShadow: "0 1px rgba(0,0,0,.1)",
              borderRadius: "6px",
              position: "relative"
            },
            head: {
              height: "110px",
              background: hex2,
              borderRadius: "6px 6px 0 0",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              position: "relative"
            },
            body: {
              padding: "10px"
            },
            label: {
              fontSize: "18px",
              color: getContrastingColor(hex2),
              position: "relative"
            },
            triangle: {
              width: "0px",
              height: "0px",
              borderStyle: "solid",
              borderWidth: "0 10px 10px 10px",
              borderColor: "transparent transparent " + hex2 + " transparent",
              position: "absolute",
              top: "-10px",
              left: "50%",
              marginLeft: "-10px"
            },
            input: {
              width: "100%",
              fontSize: "12px",
              color: "#666",
              border: "0px",
              outline: "none",
              height: "22px",
              boxShadow: "inset 0 0 0 1px #ddd",
              borderRadius: "4px",
              padding: "0 7px",
              boxSizing: "border-box"
            }
          },
          "hide-triangle": {
            triangle: {
              display: "none"
            }
          }
        }, passedStyles), { "hide-triangle": triangle === "hide" });
        return import_react162.default.createElement("div", { style: styles2.card, className: "block-picker " + className }, import_react162.default.createElement("div", { style: styles2.triangle }), import_react162.default.createElement("div", { style: styles2.head }, transparent && import_react162.default.createElement(Checkboard_default, { borderRadius: "6px 6px 0 0" }), import_react162.default.createElement("div", { style: styles2.label }, hex2)), import_react162.default.createElement("div", { style: styles2.body }, import_react162.default.createElement(BlockSwatches_default, { colors: colors2, onClick: handleChange, onSwatchHover }), import_react162.default.createElement(EditableInput_default, {
          style: { input: styles2.input },
          value: hex2,
          onChange: handleChange
        })));
      };
      Block.propTypes = {
        width: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]),
        colors: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
        triangle: import_prop_types2.default.oneOf(["top", "hide"]),
        styles: import_prop_types2.default.object
      };
      Block.defaultProps = {
        width: 170,
        colors: ["#D9E3F0", "#F47373", "#697689", "#37D67A", "#2CCCE4", "#555555", "#dce775", "#ff8a65", "#ba68c8"],
        triangle: "top",
        styles: {}
      };
      var Block_default = ColorWrap_default(Block);
      var import_react182 = __toESM3(require_react());
      var import_prop_types3 = __toESM3(require_prop_types());
      var import_reactcss13 = __toESM3(require_lib());
      var red = { "50": "#ffebee", "100": "#ffcdd2", "200": "#ef9a9a", "300": "#e57373", "400": "#ef5350", "500": "#f44336", "600": "#e53935", "700": "#d32f2f", "800": "#c62828", "900": "#b71c1c", "a100": "#ff8a80", "a200": "#ff5252", "a400": "#ff1744", "a700": "#d50000" };
      var pink = { "50": "#fce4ec", "100": "#f8bbd0", "200": "#f48fb1", "300": "#f06292", "400": "#ec407a", "500": "#e91e63", "600": "#d81b60", "700": "#c2185b", "800": "#ad1457", "900": "#880e4f", "a100": "#ff80ab", "a200": "#ff4081", "a400": "#f50057", "a700": "#c51162" };
      var purple = { "50": "#f3e5f5", "100": "#e1bee7", "200": "#ce93d8", "300": "#ba68c8", "400": "#ab47bc", "500": "#9c27b0", "600": "#8e24aa", "700": "#7b1fa2", "800": "#6a1b9a", "900": "#4a148c", "a100": "#ea80fc", "a200": "#e040fb", "a400": "#d500f9", "a700": "#aa00ff" };
      var deepPurple = { "50": "#ede7f6", "100": "#d1c4e9", "200": "#b39ddb", "300": "#9575cd", "400": "#7e57c2", "500": "#673ab7", "600": "#5e35b1", "700": "#512da8", "800": "#4527a0", "900": "#311b92", "a100": "#b388ff", "a200": "#7c4dff", "a400": "#651fff", "a700": "#6200ea" };
      var indigo = { "50": "#e8eaf6", "100": "#c5cae9", "200": "#9fa8da", "300": "#7986cb", "400": "#5c6bc0", "500": "#3f51b5", "600": "#3949ab", "700": "#303f9f", "800": "#283593", "900": "#1a237e", "a100": "#8c9eff", "a200": "#536dfe", "a400": "#3d5afe", "a700": "#304ffe" };
      var blue = { "50": "#e3f2fd", "100": "#bbdefb", "200": "#90caf9", "300": "#64b5f6", "400": "#42a5f5", "500": "#2196f3", "600": "#1e88e5", "700": "#1976d2", "800": "#1565c0", "900": "#0d47a1", "a100": "#82b1ff", "a200": "#448aff", "a400": "#2979ff", "a700": "#2962ff" };
      var lightBlue = { "50": "#e1f5fe", "100": "#b3e5fc", "200": "#81d4fa", "300": "#4fc3f7", "400": "#29b6f6", "500": "#03a9f4", "600": "#039be5", "700": "#0288d1", "800": "#0277bd", "900": "#01579b", "a100": "#80d8ff", "a200": "#40c4ff", "a400": "#00b0ff", "a700": "#0091ea" };
      var cyan = { "50": "#e0f7fa", "100": "#b2ebf2", "200": "#80deea", "300": "#4dd0e1", "400": "#26c6da", "500": "#00bcd4", "600": "#00acc1", "700": "#0097a7", "800": "#00838f", "900": "#006064", "a100": "#84ffff", "a200": "#18ffff", "a400": "#00e5ff", "a700": "#00b8d4" };
      var teal = { "50": "#e0f2f1", "100": "#b2dfdb", "200": "#80cbc4", "300": "#4db6ac", "400": "#26a69a", "500": "#009688", "600": "#00897b", "700": "#00796b", "800": "#00695c", "900": "#004d40", "a100": "#a7ffeb", "a200": "#64ffda", "a400": "#1de9b6", "a700": "#00bfa5" };
      var green = { "50": "#e8f5e9", "100": "#c8e6c9", "200": "#a5d6a7", "300": "#81c784", "400": "#66bb6a", "500": "#4caf50", "600": "#43a047", "700": "#388e3c", "800": "#2e7d32", "900": "#1b5e20", "a100": "#b9f6ca", "a200": "#69f0ae", "a400": "#00e676", "a700": "#00c853" };
      var lightGreen = { "50": "#f1f8e9", "100": "#dcedc8", "200": "#c5e1a5", "300": "#aed581", "400": "#9ccc65", "500": "#8bc34a", "600": "#7cb342", "700": "#689f38", "800": "#558b2f", "900": "#33691e", "a100": "#ccff90", "a200": "#b2ff59", "a400": "#76ff03", "a700": "#64dd17" };
      var lime = { "50": "#f9fbe7", "100": "#f0f4c3", "200": "#e6ee9c", "300": "#dce775", "400": "#d4e157", "500": "#cddc39", "600": "#c0ca33", "700": "#afb42b", "800": "#9e9d24", "900": "#827717", "a100": "#f4ff81", "a200": "#eeff41", "a400": "#c6ff00", "a700": "#aeea00" };
      var yellow = { "50": "#fffde7", "100": "#fff9c4", "200": "#fff59d", "300": "#fff176", "400": "#ffee58", "500": "#ffeb3b", "600": "#fdd835", "700": "#fbc02d", "800": "#f9a825", "900": "#f57f17", "a100": "#ffff8d", "a200": "#ffff00", "a400": "#ffea00", "a700": "#ffd600" };
      var amber = { "50": "#fff8e1", "100": "#ffecb3", "200": "#ffe082", "300": "#ffd54f", "400": "#ffca28", "500": "#ffc107", "600": "#ffb300", "700": "#ffa000", "800": "#ff8f00", "900": "#ff6f00", "a100": "#ffe57f", "a200": "#ffd740", "a400": "#ffc400", "a700": "#ffab00" };
      var orange = { "50": "#fff3e0", "100": "#ffe0b2", "200": "#ffcc80", "300": "#ffb74d", "400": "#ffa726", "500": "#ff9800", "600": "#fb8c00", "700": "#f57c00", "800": "#ef6c00", "900": "#e65100", "a100": "#ffd180", "a200": "#ffab40", "a400": "#ff9100", "a700": "#ff6d00" };
      var deepOrange = { "50": "#fbe9e7", "100": "#ffccbc", "200": "#ffab91", "300": "#ff8a65", "400": "#ff7043", "500": "#ff5722", "600": "#f4511e", "700": "#e64a19", "800": "#d84315", "900": "#bf360c", "a100": "#ff9e80", "a200": "#ff6e40", "a400": "#ff3d00", "a700": "#dd2c00" };
      var brown = { "50": "#efebe9", "100": "#d7ccc8", "200": "#bcaaa4", "300": "#a1887f", "400": "#8d6e63", "500": "#795548", "600": "#6d4c41", "700": "#5d4037", "800": "#4e342e", "900": "#3e2723" };
      var blueGrey = { "50": "#eceff1", "100": "#cfd8dc", "200": "#b0bec5", "300": "#90a4ae", "400": "#78909c", "500": "#607d8b", "600": "#546e7a", "700": "#455a64", "800": "#37474f", "900": "#263238" };
      var import_react172 = __toESM3(require_react());
      var import_reactcss12 = __toESM3(require_lib());
      var CircleSwatch = function CircleSwatch2(_ref) {
        var color3 = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, hover = _ref.hover, active = _ref.active, circleSize = _ref.circleSize, circleSpacing = _ref.circleSpacing;
        var styles2 = (0, import_reactcss12.default)({
          "default": {
            swatch: {
              width: circleSize,
              height: circleSize,
              marginRight: circleSpacing,
              marginBottom: circleSpacing,
              transform: "scale(1)",
              transition: "100ms transform ease"
            },
            Swatch: {
              borderRadius: "50%",
              background: "transparent",
              boxShadow: "inset 0 0 0 " + (circleSize / 2 + 1) + "px " + color3,
              transition: "100ms box-shadow ease"
            }
          },
          "hover": {
            swatch: {
              transform: "scale(1.2)"
            }
          },
          "active": {
            Swatch: {
              boxShadow: "inset 0 0 0 3px " + color3
            }
          }
        }, { hover, active });
        return import_react172.default.createElement("div", { style: styles2.swatch }, import_react172.default.createElement(Swatch_default, {
          style: styles2.Swatch,
          color: color3,
          onClick,
          onHover: onSwatchHover,
          focusStyle: { boxShadow: styles2.Swatch.boxShadow + ", 0 0 5px " + color3 }
        }));
      };
      CircleSwatch.defaultProps = {
        circleSize: 28,
        circleSpacing: 14
      };
      var CircleSwatch_default = (0, import_reactcss12.handleHover)(CircleSwatch);
      var Circle3 = function Circle22(_ref) {
        var width = _ref.width, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors2 = _ref.colors, hex2 = _ref.hex, circleSize = _ref.circleSize, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, circleSpacing = _ref.circleSpacing, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss13.default)(merge_default({
          "default": {
            card: {
              width,
              display: "flex",
              flexWrap: "wrap",
              marginRight: -circleSpacing,
              marginBottom: -circleSpacing
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(hexCode, e2) {
          return onChange({ hex: hexCode, source: "hex" }, e2);
        };
        return import_react182.default.createElement("div", { style: styles2.card, className: "circle-picker " + className }, map_default(colors2, function(c2) {
          return import_react182.default.createElement(CircleSwatch_default, {
            key: c2,
            color: c2,
            onClick: handleChange,
            onSwatchHover,
            active: hex2 === c2.toLowerCase(),
            circleSize,
            circleSpacing
          });
        }));
      };
      Circle3.propTypes = {
        width: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.number]),
        circleSize: import_prop_types3.default.number,
        circleSpacing: import_prop_types3.default.number,
        styles: import_prop_types3.default.object
      };
      Circle3.defaultProps = {
        width: 252,
        circleSize: 28,
        circleSpacing: 14,
        colors: [red["500"], pink["500"], purple["500"], deepPurple["500"], indigo["500"], blue["500"], lightBlue["500"], cyan["500"], teal["500"], green["500"], lightGreen["500"], lime["500"], yellow["500"], amber["500"], orange["500"], deepOrange["500"], brown["500"], blueGrey["500"]],
        styles: {}
      };
      var Circle_default = ColorWrap_default(Circle3);
      var import_react222 = __toESM3(require_react());
      var import_prop_types4 = __toESM3(require_prop_types());
      var import_reactcss17 = __toESM3(require_lib());
      var import_react192 = __toESM3(require_react());
      var import_reactcss14 = __toESM3(require_lib());
      function isUndefined(value) {
        return value === void 0;
      }
      var isUndefined_default = isUndefined;
      var import_UnfoldMoreHorizontalIcon = __toESM3(require_UnfoldMoreHorizontalIcon());
      var _createClass7 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck7(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn7(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits7(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var ChromeFields = function(_React$Component) {
        _inherits7(ChromeFields2, _React$Component);
        function ChromeFields2(props) {
          _classCallCheck7(this, ChromeFields2);
          var _this = _possibleConstructorReturn7(this, (ChromeFields2.__proto__ || Object.getPrototypeOf(ChromeFields2)).call(this));
          _this.toggleViews = function() {
            if (_this.state.view === "hex") {
              _this.setState({ view: "rgb" });
            } else if (_this.state.view === "rgb") {
              _this.setState({ view: "hsl" });
            } else if (_this.state.view === "hsl") {
              if (_this.props.hsl.a === 1) {
                _this.setState({ view: "hex" });
              } else {
                _this.setState({ view: "rgb" });
              }
            }
          };
          _this.handleChange = function(data, e2) {
            if (data.hex) {
              isValidHex(data.hex) && _this.props.onChange({
                hex: data.hex,
                source: "hex"
              }, e2);
            } else if (data.r || data.g || data.b) {
              _this.props.onChange({
                r: data.r || _this.props.rgb.r,
                g: data.g || _this.props.rgb.g,
                b: data.b || _this.props.rgb.b,
                source: "rgb"
              }, e2);
            } else if (data.a) {
              if (data.a < 0) {
                data.a = 0;
              } else if (data.a > 1) {
                data.a = 1;
              }
              _this.props.onChange({
                h: _this.props.hsl.h,
                s: _this.props.hsl.s,
                l: _this.props.hsl.l,
                a: Math.round(data.a * 100) / 100,
                source: "rgb"
              }, e2);
            } else if (data.h || data.s || data.l) {
              if (typeof data.s === "string" && data.s.includes("%")) {
                data.s = data.s.replace("%", "");
              }
              if (typeof data.l === "string" && data.l.includes("%")) {
                data.l = data.l.replace("%", "");
              }
              if (data.s == 1) {
                data.s = 0.01;
              } else if (data.l == 1) {
                data.l = 0.01;
              }
              _this.props.onChange({
                h: data.h || _this.props.hsl.h,
                s: Number(!isUndefined_default(data.s) ? data.s : _this.props.hsl.s),
                l: Number(!isUndefined_default(data.l) ? data.l : _this.props.hsl.l),
                source: "hsl"
              }, e2);
            }
          };
          _this.showHighlight = function(e2) {
            e2.currentTarget.style.background = "#eee";
          };
          _this.hideHighlight = function(e2) {
            e2.currentTarget.style.background = "transparent";
          };
          if (props.hsl.a !== 1 && props.view === "hex") {
            _this.state = {
              view: "rgb"
            };
          } else {
            _this.state = {
              view: props.view
            };
          }
          return _this;
        }
        _createClass7(ChromeFields2, [{
          key: "render",
          value: function render3() {
            var _this2 = this;
            var styles2 = (0, import_reactcss14.default)({
              "default": {
                wrap: {
                  paddingTop: "16px",
                  display: "flex"
                },
                fields: {
                  flex: "1",
                  display: "flex",
                  marginLeft: "-6px"
                },
                field: {
                  paddingLeft: "6px",
                  width: "100%"
                },
                alpha: {
                  paddingLeft: "6px",
                  width: "100%"
                },
                toggle: {
                  width: "32px",
                  textAlign: "right",
                  position: "relative"
                },
                icon: {
                  marginRight: "-4px",
                  marginTop: "12px",
                  cursor: "pointer",
                  position: "relative"
                },
                iconHighlight: {
                  position: "absolute",
                  width: "24px",
                  height: "28px",
                  background: "#eee",
                  borderRadius: "4px",
                  top: "10px",
                  left: "12px",
                  display: "none"
                },
                input: {
                  fontSize: "11px",
                  color: "#333",
                  width: "100%",
                  borderRadius: "2px",
                  border: "none",
                  boxShadow: "inset 0 0 0 1px #dadada",
                  height: "21px",
                  textAlign: "center"
                },
                label: {
                  textTransform: "uppercase",
                  fontSize: "11px",
                  lineHeight: "11px",
                  color: "#969696",
                  textAlign: "center",
                  display: "block",
                  marginTop: "12px"
                },
                svg: {
                  fill: "#333",
                  width: "24px",
                  height: "24px",
                  border: "1px transparent solid",
                  borderRadius: "5px"
                }
              },
              "disableAlpha": {
                alpha: {
                  display: "none"
                }
              }
            }, this.props, this.state);
            var fields = void 0;
            if (this.state.view === "hex") {
              fields = import_react192.default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "hex",
                value: this.props.hex,
                onChange: this.handleChange
              })));
            } else if (this.state.view === "rgb") {
              fields = import_react192.default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "r",
                value: this.props.rgb.r,
                onChange: this.handleChange
              })), import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "g",
                value: this.props.rgb.g,
                onChange: this.handleChange
              })), import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "b",
                value: this.props.rgb.b,
                onChange: this.handleChange
              })), import_react192.default.createElement("div", { style: styles2.alpha }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "a",
                value: this.props.rgb.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })));
            } else if (this.state.view === "hsl") {
              fields = import_react192.default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "h",
                value: Math.round(this.props.hsl.h),
                onChange: this.handleChange
              })), import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "s",
                value: Math.round(this.props.hsl.s * 100) + "%",
                onChange: this.handleChange
              })), import_react192.default.createElement("div", { style: styles2.field }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "l",
                value: Math.round(this.props.hsl.l * 100) + "%",
                onChange: this.handleChange
              })), import_react192.default.createElement("div", { style: styles2.alpha }, import_react192.default.createElement(EditableInput_default, {
                style: { input: styles2.input, label: styles2.label },
                label: "a",
                value: this.props.hsl.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })));
            }
            return import_react192.default.createElement("div", { style: styles2.wrap, className: "flexbox-fix" }, fields, import_react192.default.createElement("div", { style: styles2.toggle }, import_react192.default.createElement("div", { style: styles2.icon, onClick: this.toggleViews, ref: function ref(icon) {
              return _this2.icon = icon;
            } }, import_react192.default.createElement(import_UnfoldMoreHorizontalIcon.default, {
              style: styles2.svg,
              onMouseOver: this.showHighlight,
              onMouseEnter: this.showHighlight,
              onMouseOut: this.hideHighlight
            }))));
          }
        }], [{
          key: "getDerivedStateFromProps",
          value: function getDerivedStateFromProps(nextProps, state2) {
            if (nextProps.hsl.a !== 1 && state2.view === "hex") {
              return { view: "rgb" };
            }
            return null;
          }
        }]);
        return ChromeFields2;
      }(import_react192.default.Component);
      ChromeFields.defaultProps = {
        view: "hex"
      };
      var ChromeFields_default = ChromeFields;
      var import_react202 = __toESM3(require_react());
      var import_reactcss15 = __toESM3(require_lib());
      var ChromePointer = function ChromePointer2() {
        var styles2 = (0, import_reactcss15.default)({
          "default": {
            picker: {
              width: "12px",
              height: "12px",
              borderRadius: "6px",
              transform: "translate(-6px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          }
        });
        return import_react202.default.createElement("div", { style: styles2.picker });
      };
      var ChromePointer_default = ChromePointer;
      var import_react212 = __toESM3(require_react());
      var import_reactcss16 = __toESM3(require_lib());
      var ChromePointerCircle = function ChromePointerCircle2() {
        var styles2 = (0, import_reactcss16.default)({
          "default": {
            picker: {
              width: "12px",
              height: "12px",
              borderRadius: "6px",
              boxShadow: "inset 0 0 0 1px #fff",
              transform: "translate(-6px, -6px)"
            }
          }
        });
        return import_react212.default.createElement("div", { style: styles2.picker });
      };
      var ChromePointerCircle_default = ChromePointerCircle;
      var Chrome = function Chrome2(_ref) {
        var width = _ref.width, onChange = _ref.onChange, disableAlpha = _ref.disableAlpha, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex2 = _ref.hex, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, defaultView = _ref.defaultView;
        var styles2 = (0, import_reactcss17.default)(merge_default({
          "default": {
            picker: {
              width,
              background: "#fff",
              borderRadius: "2px",
              boxShadow: "0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",
              boxSizing: "initial",
              fontFamily: "Menlo"
            },
            saturation: {
              width: "100%",
              paddingBottom: "55%",
              position: "relative",
              borderRadius: "2px 2px 0 0",
              overflow: "hidden"
            },
            Saturation: {
              radius: "2px 2px 0 0"
            },
            body: {
              padding: "16px 16px 12px"
            },
            controls: {
              display: "flex"
            },
            color: {
              width: "32px"
            },
            swatch: {
              marginTop: "6px",
              width: "16px",
              height: "16px",
              borderRadius: "8px",
              position: "relative",
              overflow: "hidden"
            },
            active: {
              absolute: "0px 0px 0px 0px",
              borderRadius: "8px",
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.1)",
              background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + rgb.a + ")",
              zIndex: "2"
            },
            toggles: {
              flex: "1"
            },
            hue: {
              height: "10px",
              position: "relative",
              marginBottom: "8px"
            },
            Hue: {
              radius: "2px"
            },
            alpha: {
              height: "10px",
              position: "relative"
            },
            Alpha: {
              radius: "2px"
            }
          },
          "disableAlpha": {
            color: {
              width: "22px"
            },
            alpha: {
              display: "none"
            },
            hue: {
              marginBottom: "0px"
            },
            swatch: {
              width: "10px",
              height: "10px",
              marginTop: "0px"
            }
          }
        }, passedStyles), { disableAlpha });
        return import_react222.default.createElement("div", { style: styles2.picker, className: "chrome-picker " + className }, import_react222.default.createElement("div", { style: styles2.saturation }, import_react222.default.createElement(Saturation_default, {
          style: styles2.Saturation,
          hsl,
          hsv,
          pointer: ChromePointerCircle_default,
          onChange
        })), import_react222.default.createElement("div", { style: styles2.body }, import_react222.default.createElement("div", { style: styles2.controls, className: "flexbox-fix" }, import_react222.default.createElement("div", { style: styles2.color }, import_react222.default.createElement("div", { style: styles2.swatch }, import_react222.default.createElement("div", { style: styles2.active }), import_react222.default.createElement(Checkboard_default, { renderers }))), import_react222.default.createElement("div", { style: styles2.toggles }, import_react222.default.createElement("div", { style: styles2.hue }, import_react222.default.createElement(Hue_default, {
          style: styles2.Hue,
          hsl,
          pointer: ChromePointer_default,
          onChange
        })), import_react222.default.createElement("div", { style: styles2.alpha }, import_react222.default.createElement(Alpha_default, {
          style: styles2.Alpha,
          rgb,
          hsl,
          pointer: ChromePointer_default,
          renderers,
          onChange
        })))), import_react222.default.createElement(ChromeFields_default, {
          rgb,
          hsl,
          hex: hex2,
          view: defaultView,
          onChange,
          disableAlpha
        })));
      };
      Chrome.propTypes = {
        width: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]),
        disableAlpha: import_prop_types4.default.bool,
        styles: import_prop_types4.default.object,
        defaultView: import_prop_types4.default.oneOf(["hex", "rgb", "hsl"])
      };
      Chrome.defaultProps = {
        width: 225,
        disableAlpha: false,
        styles: {}
      };
      var Chrome_default = ColorWrap_default(Chrome);
      var import_react252 = __toESM3(require_react());
      var import_prop_types5 = __toESM3(require_prop_types());
      var import_reactcss20 = __toESM3(require_lib());
      var import_react232 = __toESM3(require_react());
      var import_reactcss18 = __toESM3(require_lib());
      var CompactColor = function CompactColor2(_ref) {
        var color3 = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, active = _ref.active;
        var styles2 = (0, import_reactcss18.default)({
          "default": {
            color: {
              background: color3,
              width: "15px",
              height: "15px",
              float: "left",
              marginRight: "5px",
              marginBottom: "5px",
              position: "relative",
              cursor: "pointer"
            },
            dot: {
              absolute: "5px 5px 5px 5px",
              background: getContrastingColor(color3),
              borderRadius: "50%",
              opacity: "0"
            }
          },
          "active": {
            dot: {
              opacity: "1"
            }
          },
          "color-#FFFFFF": {
            color: {
              boxShadow: "inset 0 0 0 1px #ddd"
            },
            dot: {
              background: "#000"
            }
          },
          "transparent": {
            dot: {
              background: "#000"
            }
          }
        }, { active, "color-#FFFFFF": color3 === "#FFFFFF", "transparent": color3 === "transparent" });
        return import_react232.default.createElement(Swatch_default, {
          style: styles2.color,
          color: color3,
          onClick,
          onHover: onSwatchHover,
          focusStyle: { boxShadow: "0 0 4px " + color3 }
        }, import_react232.default.createElement("div", { style: styles2.dot }));
      };
      var CompactColor_default = CompactColor;
      var import_react242 = __toESM3(require_react());
      var import_reactcss19 = __toESM3(require_lib());
      var CompactFields = function CompactFields2(_ref) {
        var hex2 = _ref.hex, rgb = _ref.rgb, onChange = _ref.onChange;
        var styles2 = (0, import_reactcss19.default)({
          "default": {
            fields: {
              display: "flex",
              paddingBottom: "6px",
              paddingRight: "5px",
              position: "relative"
            },
            active: {
              position: "absolute",
              top: "6px",
              left: "5px",
              height: "9px",
              width: "9px",
              background: hex2
            },
            HEXwrap: {
              flex: "6",
              position: "relative"
            },
            HEXinput: {
              width: "80%",
              padding: "0px",
              paddingLeft: "20%",
              border: "none",
              outline: "none",
              background: "none",
              fontSize: "12px",
              color: "#333",
              height: "16px"
            },
            HEXlabel: {
              display: "none"
            },
            RGBwrap: {
              flex: "3",
              position: "relative"
            },
            RGBinput: {
              width: "70%",
              padding: "0px",
              paddingLeft: "30%",
              border: "none",
              outline: "none",
              background: "none",
              fontSize: "12px",
              color: "#333",
              height: "16px"
            },
            RGBlabel: {
              position: "absolute",
              top: "3px",
              left: "0px",
              lineHeight: "16px",
              textTransform: "uppercase",
              fontSize: "12px",
              color: "#999"
            }
          }
        });
        var handleChange = function handleChange2(data, e2) {
          if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              source: "rgb"
            }, e2);
          } else {
            onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          }
        };
        return import_react242.default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, import_react242.default.createElement("div", { style: styles2.active }), import_react242.default.createElement(EditableInput_default, {
          style: { wrap: styles2.HEXwrap, input: styles2.HEXinput, label: styles2.HEXlabel },
          label: "hex",
          value: hex2,
          onChange: handleChange
        }), import_react242.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "r",
          value: rgb.r,
          onChange: handleChange
        }), import_react242.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "g",
          value: rgb.g,
          onChange: handleChange
        }), import_react242.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "b",
          value: rgb.b,
          onChange: handleChange
        }));
      };
      var CompactFields_default = CompactFields;
      var Compact = function Compact2(_ref) {
        var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors2 = _ref.colors, hex2 = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss20.default)(merge_default({
          "default": {
            Compact: {
              background: "#f6f6f6",
              radius: "4px"
            },
            compact: {
              paddingTop: "5px",
              paddingLeft: "5px",
              boxSizing: "initial",
              width: "240px"
            },
            clear: {
              clear: "both"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else {
            onChange(data, e2);
          }
        };
        return import_react252.default.createElement(Raised_default, { style: styles2.Compact, styles: passedStyles }, import_react252.default.createElement("div", { style: styles2.compact, className: "compact-picker " + className }, import_react252.default.createElement("div", null, map_default(colors2, function(c2) {
          return import_react252.default.createElement(CompactColor_default, {
            key: c2,
            color: c2,
            active: c2.toLowerCase() === hex2,
            onClick: handleChange,
            onSwatchHover
          });
        }), import_react252.default.createElement("div", { style: styles2.clear })), import_react252.default.createElement(CompactFields_default, { hex: hex2, rgb, onChange: handleChange })));
      };
      Compact.propTypes = {
        colors: import_prop_types5.default.arrayOf(import_prop_types5.default.string),
        styles: import_prop_types5.default.object
      };
      Compact.defaultProps = {
        colors: ["#4D4D4D", "#999999", "#FFFFFF", "#F44E3B", "#FE9200", "#FCDC00", "#DBDF00", "#A4DD00", "#68CCCA", "#73D8FF", "#AEA1FF", "#FDA1FF", "#333333", "#808080", "#cccccc", "#D33115", "#E27300", "#FCC400", "#B0BC00", "#68BC00", "#16A5A5", "#009CE0", "#7B64FF", "#FA28FF", "#000000", "#666666", "#B3B3B3", "#9F0500", "#C45100", "#FB9E00", "#808900", "#194D33", "#0C797D", "#0062B1", "#653294", "#AB149E"],
        styles: {}
      };
      var Compact_default = ColorWrap_default(Compact);
      var import_react272 = __toESM3(require_react());
      var import_prop_types6 = __toESM3(require_prop_types());
      var import_reactcss22 = __toESM3(require_lib());
      var import_react262 = __toESM3(require_react());
      var import_reactcss21 = __toESM3(require_lib());
      var GithubSwatch = function GithubSwatch2(_ref) {
        var hover = _ref.hover, color3 = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
        var hoverSwatch = {
          position: "relative",
          zIndex: "2",
          outline: "2px solid #fff",
          boxShadow: "0 0 5px 2px rgba(0,0,0,0.25)"
        };
        var styles2 = (0, import_reactcss21.default)({
          "default": {
            swatch: {
              width: "25px",
              height: "25px",
              fontSize: "0"
            }
          },
          "hover": {
            swatch: hoverSwatch
          }
        }, { hover });
        return import_react262.default.createElement("div", { style: styles2.swatch }, import_react262.default.createElement(Swatch_default, {
          color: color3,
          onClick,
          onHover: onSwatchHover,
          focusStyle: hoverSwatch
        }));
      };
      var GithubSwatch_default = (0, import_reactcss21.handleHover)(GithubSwatch);
      var Github = function Github2(_ref) {
        var width = _ref.width, colors2 = _ref.colors, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss22.default)(merge_default({
          "default": {
            card: {
              width,
              background: "#fff",
              border: "1px solid rgba(0,0,0,0.2)",
              boxShadow: "0 3px 12px rgba(0,0,0,0.15)",
              borderRadius: "4px",
              position: "relative",
              padding: "5px",
              display: "flex",
              flexWrap: "wrap"
            },
            triangle: {
              position: "absolute",
              border: "7px solid transparent",
              borderBottomColor: "#fff"
            },
            triangleShadow: {
              position: "absolute",
              border: "8px solid transparent",
              borderBottomColor: "rgba(0,0,0,0.15)"
            }
          },
          "hide-triangle": {
            triangle: {
              display: "none"
            },
            triangleShadow: {
              display: "none"
            }
          },
          "top-left-triangle": {
            triangle: {
              top: "-14px",
              left: "10px"
            },
            triangleShadow: {
              top: "-16px",
              left: "9px"
            }
          },
          "top-right-triangle": {
            triangle: {
              top: "-14px",
              right: "10px"
            },
            triangleShadow: {
              top: "-16px",
              right: "9px"
            }
          },
          "bottom-left-triangle": {
            triangle: {
              top: "35px",
              left: "10px",
              transform: "rotate(180deg)"
            },
            triangleShadow: {
              top: "37px",
              left: "9px",
              transform: "rotate(180deg)"
            }
          },
          "bottom-right-triangle": {
            triangle: {
              top: "35px",
              right: "10px",
              transform: "rotate(180deg)"
            },
            triangleShadow: {
              top: "37px",
              right: "9px",
              transform: "rotate(180deg)"
            }
          }
        }, passedStyles), {
          "hide-triangle": triangle === "hide",
          "top-left-triangle": triangle === "top-left",
          "top-right-triangle": triangle === "top-right",
          "bottom-left-triangle": triangle === "bottom-left",
          "bottom-right-triangle": triangle === "bottom-right"
        });
        var handleChange = function handleChange2(hex2, e2) {
          return onChange({ hex: hex2, source: "hex" }, e2);
        };
        return import_react272.default.createElement("div", { style: styles2.card, className: "github-picker " + className }, import_react272.default.createElement("div", { style: styles2.triangleShadow }), import_react272.default.createElement("div", { style: styles2.triangle }), map_default(colors2, function(c2) {
          return import_react272.default.createElement(GithubSwatch_default, {
            color: c2,
            key: c2,
            onClick: handleChange,
            onSwatchHover
          });
        }));
      };
      Github.propTypes = {
        width: import_prop_types6.default.oneOfType([import_prop_types6.default.string, import_prop_types6.default.number]),
        colors: import_prop_types6.default.arrayOf(import_prop_types6.default.string),
        triangle: import_prop_types6.default.oneOf(["hide", "top-left", "top-right", "bottom-left", "bottom-right"]),
        styles: import_prop_types6.default.object
      };
      Github.defaultProps = {
        width: 200,
        colors: ["#B80000", "#DB3E00", "#FCCB00", "#008B02", "#006B76", "#1273DE", "#004DCF", "#5300EB", "#EB9694", "#FAD0C3", "#FEF3BD", "#C1E1C5", "#BEDADC", "#C4DEF6", "#BED3F3", "#D4C4FB"],
        triangle: "top-left",
        styles: {}
      };
      var Github_default = ColorWrap_default(Github);
      var import_react292 = __toESM3(require_react());
      var import_prop_types7 = __toESM3(require_prop_types());
      var import_reactcss24 = __toESM3(require_lib());
      var import_react282 = __toESM3(require_react());
      var import_reactcss23 = __toESM3(require_lib());
      var SliderPointer = function SliderPointer2(_ref) {
        var direction2 = _ref.direction;
        var styles2 = (0, import_reactcss23.default)({
          "default": {
            picker: {
              width: "18px",
              height: "18px",
              borderRadius: "50%",
              transform: "translate(-9px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          },
          "vertical": {
            picker: {
              transform: "translate(-3px, -9px)"
            }
          }
        }, { vertical: direction2 === "vertical" });
        return import_react282.default.createElement("div", { style: styles2.picker });
      };
      var HuePointer_default = SliderPointer;
      var _extends7 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var HuePicker = function HuePicker2(_ref) {
        var width = _ref.width, height = _ref.height, onChange = _ref.onChange, hsl = _ref.hsl, direction2 = _ref.direction, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss24.default)(merge_default({
          "default": {
            picker: {
              position: "relative",
              width,
              height
            },
            hue: {
              radius: "2px"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data) {
          return onChange({ a: 1, h: data.h, l: 0.5, s: 1 });
        };
        return import_react292.default.createElement("div", { style: styles2.picker, className: "hue-picker " + className }, import_react292.default.createElement(Hue_default, _extends7({}, styles2.hue, {
          hsl,
          pointer,
          onChange: handleChange,
          direction: direction2
        })));
      };
      HuePicker.propTypes = {
        styles: import_prop_types7.default.object
      };
      HuePicker.defaultProps = {
        width: "316px",
        height: "16px",
        direction: "horizontal",
        pointer: HuePointer_default,
        styles: {}
      };
      var Hue_default2 = ColorWrap_default(HuePicker);
      var import_react302 = __toESM3(require_react());
      var import_reactcss25 = __toESM3(require_lib());
      var Material = function Material2(_ref) {
        var onChange = _ref.onChange, hex2 = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss25.default)(merge_default({
          "default": {
            material: {
              width: "98px",
              height: "98px",
              padding: "16px",
              fontFamily: "Roboto"
            },
            HEXwrap: {
              position: "relative"
            },
            HEXinput: {
              width: "100%",
              marginTop: "12px",
              fontSize: "15px",
              color: "#333",
              padding: "0px",
              border: "0px",
              borderBottom: "2px solid " + hex2,
              outline: "none",
              height: "30px"
            },
            HEXlabel: {
              position: "absolute",
              top: "0px",
              left: "0px",
              fontSize: "11px",
              color: "#999999",
              textTransform: "capitalize"
            },
            Hex: {
              style: {}
            },
            RGBwrap: {
              position: "relative"
            },
            RGBinput: {
              width: "100%",
              marginTop: "12px",
              fontSize: "15px",
              color: "#333",
              padding: "0px",
              border: "0px",
              borderBottom: "1px solid #eee",
              outline: "none",
              height: "30px"
            },
            RGBlabel: {
              position: "absolute",
              top: "0px",
              left: "0px",
              fontSize: "11px",
              color: "#999999",
              textTransform: "capitalize"
            },
            split: {
              display: "flex",
              marginRight: "-10px",
              paddingTop: "11px"
            },
            third: {
              flex: "1",
              paddingRight: "10px"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              source: "rgb"
            }, e2);
          }
        };
        return import_react302.default.createElement(Raised_default, { styles: passedStyles }, import_react302.default.createElement("div", { style: styles2.material, className: "material-picker " + className }, import_react302.default.createElement(EditableInput_default, {
          style: { wrap: styles2.HEXwrap, input: styles2.HEXinput, label: styles2.HEXlabel },
          label: "hex",
          value: hex2,
          onChange: handleChange
        }), import_react302.default.createElement("div", { style: styles2.split, className: "flexbox-fix" }, import_react302.default.createElement("div", { style: styles2.third }, import_react302.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "r",
          value: rgb.r,
          onChange: handleChange
        })), import_react302.default.createElement("div", { style: styles2.third }, import_react302.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "g",
          value: rgb.g,
          onChange: handleChange
        })), import_react302.default.createElement("div", { style: styles2.third }, import_react302.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "b",
          value: rgb.b,
          onChange: handleChange
        })))));
      };
      var Material_default = ColorWrap_default(Material);
      var import_react362 = __toESM3(require_react());
      var import_prop_types8 = __toESM3(require_prop_types());
      var import_reactcss31 = __toESM3(require_lib());
      var import_react312 = __toESM3(require_react());
      var import_reactcss26 = __toESM3(require_lib());
      var PhotoshopPicker = function PhotoshopPicker2(_ref) {
        var onChange = _ref.onChange, rgb = _ref.rgb, hsv = _ref.hsv, hex2 = _ref.hex;
        var styles2 = (0, import_reactcss26.default)({
          "default": {
            fields: {
              paddingTop: "5px",
              paddingBottom: "9px",
              width: "80px",
              position: "relative"
            },
            divider: {
              height: "5px"
            },
            RGBwrap: {
              position: "relative"
            },
            RGBinput: {
              marginLeft: "40%",
              width: "40%",
              height: "18px",
              border: "1px solid #888888",
              boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
              marginBottom: "5px",
              fontSize: "13px",
              paddingLeft: "3px",
              marginRight: "10px"
            },
            RGBlabel: {
              left: "0px",
              top: "0px",
              width: "34px",
              textTransform: "uppercase",
              fontSize: "13px",
              height: "18px",
              lineHeight: "22px",
              position: "absolute"
            },
            HEXwrap: {
              position: "relative"
            },
            HEXinput: {
              marginLeft: "20%",
              width: "80%",
              height: "18px",
              border: "1px solid #888888",
              boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
              marginBottom: "6px",
              fontSize: "13px",
              paddingLeft: "3px"
            },
            HEXlabel: {
              position: "absolute",
              top: "0px",
              left: "0px",
              width: "14px",
              textTransform: "uppercase",
              fontSize: "13px",
              height: "18px",
              lineHeight: "22px"
            },
            fieldSymbols: {
              position: "absolute",
              top: "5px",
              right: "-7px",
              fontSize: "13px"
            },
            symbol: {
              height: "20px",
              lineHeight: "22px",
              paddingBottom: "7px"
            }
          }
        });
        var handleChange = function handleChange2(data, e2) {
          if (data["#"]) {
            isValidHex(data["#"]) && onChange({
              hex: data["#"],
              source: "hex"
            }, e2);
          } else if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              source: "rgb"
            }, e2);
          } else if (data.h || data.s || data.v) {
            onChange({
              h: data.h || hsv.h,
              s: data.s || hsv.s,
              v: data.v || hsv.v,
              source: "hsv"
            }, e2);
          }
        };
        return import_react312.default.createElement("div", { style: styles2.fields }, import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "h",
          value: Math.round(hsv.h),
          onChange: handleChange
        }), import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "s",
          value: Math.round(hsv.s * 100),
          onChange: handleChange
        }), import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "v",
          value: Math.round(hsv.v * 100),
          onChange: handleChange
        }), import_react312.default.createElement("div", { style: styles2.divider }), import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "r",
          value: rgb.r,
          onChange: handleChange
        }), import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "g",
          value: rgb.g,
          onChange: handleChange
        }), import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "b",
          value: rgb.b,
          onChange: handleChange
        }), import_react312.default.createElement("div", { style: styles2.divider }), import_react312.default.createElement(EditableInput_default, {
          style: { wrap: styles2.HEXwrap, input: styles2.HEXinput, label: styles2.HEXlabel },
          label: "#",
          value: hex2.replace("#", ""),
          onChange: handleChange
        }), import_react312.default.createElement("div", { style: styles2.fieldSymbols }, import_react312.default.createElement("div", { style: styles2.symbol }, "\xB0"), import_react312.default.createElement("div", { style: styles2.symbol }, "%"), import_react312.default.createElement("div", { style: styles2.symbol }, "%")));
      };
      var PhotoshopFields_default = PhotoshopPicker;
      var import_react322 = __toESM3(require_react());
      var import_reactcss27 = __toESM3(require_lib());
      var PhotoshopPointerCircle = function PhotoshopPointerCircle2(_ref) {
        var hsl = _ref.hsl;
        var styles2 = (0, import_reactcss27.default)({
          "default": {
            picker: {
              width: "12px",
              height: "12px",
              borderRadius: "6px",
              boxShadow: "inset 0 0 0 1px #fff",
              transform: "translate(-6px, -6px)"
            }
          },
          "black-outline": {
            picker: {
              boxShadow: "inset 0 0 0 1px #000"
            }
          }
        }, { "black-outline": hsl.l > 0.5 });
        return import_react322.default.createElement("div", { style: styles2.picker });
      };
      var PhotoshopPointerCircle_default = PhotoshopPointerCircle;
      var import_react332 = __toESM3(require_react());
      var import_reactcss28 = __toESM3(require_lib());
      var PhotoshopPointerCircle3 = function PhotoshopPointerCircle4() {
        var styles2 = (0, import_reactcss28.default)({
          "default": {
            triangle: {
              width: 0,
              height: 0,
              borderStyle: "solid",
              borderWidth: "4px 0 4px 6px",
              borderColor: "transparent transparent transparent #fff",
              position: "absolute",
              top: "1px",
              left: "1px"
            },
            triangleBorder: {
              width: 0,
              height: 0,
              borderStyle: "solid",
              borderWidth: "5px 0 5px 8px",
              borderColor: "transparent transparent transparent #555"
            },
            left: {
              Extend: "triangleBorder",
              transform: "translate(-13px, -4px)"
            },
            leftInside: {
              Extend: "triangle",
              transform: "translate(-8px, -5px)"
            },
            right: {
              Extend: "triangleBorder",
              transform: "translate(20px, -14px) rotate(180deg)"
            },
            rightInside: {
              Extend: "triangle",
              transform: "translate(-8px, -5px)"
            }
          }
        });
        return import_react332.default.createElement("div", { style: styles2.pointer }, import_react332.default.createElement("div", { style: styles2.left }, import_react332.default.createElement("div", { style: styles2.leftInside })), import_react332.default.createElement("div", { style: styles2.right }, import_react332.default.createElement("div", { style: styles2.rightInside })));
      };
      var PhotoshopPointer_default = PhotoshopPointerCircle3;
      var import_react342 = __toESM3(require_react());
      var import_reactcss29 = __toESM3(require_lib());
      var PhotoshopButton = function PhotoshopButton2(_ref) {
        var onClick = _ref.onClick, label = _ref.label, children = _ref.children, active = _ref.active;
        var styles2 = (0, import_reactcss29.default)({
          "default": {
            button: {
              backgroundImage: "linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",
              border: "1px solid #878787",
              borderRadius: "2px",
              height: "20px",
              boxShadow: "0 1px 0 0 #EAEAEA",
              fontSize: "14px",
              color: "#000",
              lineHeight: "20px",
              textAlign: "center",
              marginBottom: "10px",
              cursor: "pointer"
            }
          },
          "active": {
            button: {
              boxShadow: "0 0 0 1px #878787"
            }
          }
        }, { active });
        return import_react342.default.createElement("div", { style: styles2.button, onClick }, label || children);
      };
      var PhotoshopButton_default = PhotoshopButton;
      var import_react352 = __toESM3(require_react());
      var import_reactcss30 = __toESM3(require_lib());
      var PhotoshopPreviews = function PhotoshopPreviews2(_ref) {
        var rgb = _ref.rgb, currentColor = _ref.currentColor;
        var styles2 = (0, import_reactcss30.default)({
          "default": {
            swatches: {
              border: "1px solid #B3B3B3",
              borderBottom: "1px solid #F0F0F0",
              marginBottom: "2px",
              marginTop: "1px"
            },
            new: {
              height: "34px",
              background: "rgb(" + rgb.r + "," + rgb.g + ", " + rgb.b + ")",
              boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"
            },
            current: {
              height: "34px",
              background: currentColor,
              boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"
            },
            label: {
              fontSize: "14px",
              color: "#000",
              textAlign: "center"
            }
          }
        });
        return import_react352.default.createElement("div", null, import_react352.default.createElement("div", { style: styles2.label }, "new"), import_react352.default.createElement("div", { style: styles2.swatches }, import_react352.default.createElement("div", { style: styles2.new }), import_react352.default.createElement("div", { style: styles2.current })), import_react352.default.createElement("div", { style: styles2.label }, "current"));
      };
      var PhotoshopPreviews_default = PhotoshopPreviews;
      var _createClass8 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck8(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn8(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits8(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Photoshop = function(_React$Component) {
        _inherits8(Photoshop2, _React$Component);
        function Photoshop2(props) {
          _classCallCheck8(this, Photoshop2);
          var _this = _possibleConstructorReturn8(this, (Photoshop2.__proto__ || Object.getPrototypeOf(Photoshop2)).call(this));
          _this.state = {
            currentColor: props.hex
          };
          return _this;
        }
        _createClass8(Photoshop2, [{
          key: "render",
          value: function render3() {
            var _props = this.props, _props$styles = _props.styles, passedStyles = _props$styles === void 0 ? {} : _props$styles, _props$className = _props.className, className = _props$className === void 0 ? "" : _props$className;
            var styles2 = (0, import_reactcss31.default)(merge_default({
              "default": {
                picker: {
                  background: "#DCDCDC",
                  borderRadius: "4px",
                  boxShadow: "0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",
                  boxSizing: "initial",
                  width: "513px"
                },
                head: {
                  backgroundImage: "linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",
                  borderBottom: "1px solid #B1B1B1",
                  boxShadow: "inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",
                  height: "23px",
                  lineHeight: "24px",
                  borderRadius: "4px 4px 0 0",
                  fontSize: "13px",
                  color: "#4D4D4D",
                  textAlign: "center"
                },
                body: {
                  padding: "15px 15px 0",
                  display: "flex"
                },
                saturation: {
                  width: "256px",
                  height: "256px",
                  position: "relative",
                  border: "2px solid #B3B3B3",
                  borderBottom: "2px solid #F0F0F0",
                  overflow: "hidden"
                },
                hue: {
                  position: "relative",
                  height: "256px",
                  width: "19px",
                  marginLeft: "10px",
                  border: "2px solid #B3B3B3",
                  borderBottom: "2px solid #F0F0F0"
                },
                controls: {
                  width: "180px",
                  marginLeft: "10px"
                },
                top: {
                  display: "flex"
                },
                previews: {
                  width: "60px"
                },
                actions: {
                  flex: "1",
                  marginLeft: "20px"
                }
              }
            }, passedStyles));
            return import_react362.default.createElement("div", { style: styles2.picker, className: "photoshop-picker " + className }, import_react362.default.createElement("div", { style: styles2.head }, this.props.header), import_react362.default.createElement("div", { style: styles2.body, className: "flexbox-fix" }, import_react362.default.createElement("div", { style: styles2.saturation }, import_react362.default.createElement(Saturation_default, {
              hsl: this.props.hsl,
              hsv: this.props.hsv,
              pointer: PhotoshopPointerCircle_default,
              onChange: this.props.onChange
            })), import_react362.default.createElement("div", { style: styles2.hue }, import_react362.default.createElement(Hue_default, {
              direction: "vertical",
              hsl: this.props.hsl,
              pointer: PhotoshopPointer_default,
              onChange: this.props.onChange
            })), import_react362.default.createElement("div", { style: styles2.controls }, import_react362.default.createElement("div", { style: styles2.top, className: "flexbox-fix" }, import_react362.default.createElement("div", { style: styles2.previews }, import_react362.default.createElement(PhotoshopPreviews_default, {
              rgb: this.props.rgb,
              currentColor: this.state.currentColor
            })), import_react362.default.createElement("div", { style: styles2.actions }, import_react362.default.createElement(PhotoshopButton_default, { label: "OK", onClick: this.props.onAccept, active: true }), import_react362.default.createElement(PhotoshopButton_default, { label: "Cancel", onClick: this.props.onCancel }), import_react362.default.createElement(PhotoshopFields_default, {
              onChange: this.props.onChange,
              rgb: this.props.rgb,
              hsv: this.props.hsv,
              hex: this.props.hex
            }))))));
          }
        }]);
        return Photoshop2;
      }(import_react362.default.Component);
      Photoshop.propTypes = {
        header: import_prop_types8.default.string,
        styles: import_prop_types8.default.object
      };
      Photoshop.defaultProps = {
        header: "Color Picker",
        styles: {}
      };
      var Photoshop_default = ColorWrap_default(Photoshop);
      var import_react392 = __toESM3(require_react());
      var import_prop_types10 = __toESM3(require_prop_types());
      var import_reactcss34 = __toESM3(require_lib());
      var import_react372 = __toESM3(require_react());
      var import_reactcss32 = __toESM3(require_lib());
      var SketchFields = function SketchFields2(_ref) {
        var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex2 = _ref.hex, disableAlpha = _ref.disableAlpha;
        var styles2 = (0, import_reactcss32.default)({
          "default": {
            fields: {
              display: "flex",
              paddingTop: "4px"
            },
            single: {
              flex: "1",
              paddingLeft: "6px"
            },
            alpha: {
              flex: "1",
              paddingLeft: "6px"
            },
            double: {
              flex: "2"
            },
            input: {
              width: "80%",
              padding: "4px 10% 3px",
              border: "none",
              boxShadow: "inset 0 0 0 1px #ccc",
              fontSize: "11px"
            },
            label: {
              display: "block",
              textAlign: "center",
              fontSize: "11px",
              color: "#222",
              paddingTop: "3px",
              paddingBottom: "4px",
              textTransform: "capitalize"
            }
          },
          "disableAlpha": {
            alpha: {
              display: "none"
            }
          }
        }, { disableAlpha });
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              a: rgb.a,
              source: "rgb"
            }, e2);
          } else if (data.a) {
            if (data.a < 0) {
              data.a = 0;
            } else if (data.a > 100) {
              data.a = 100;
            }
            data.a /= 100;
            onChange({
              h: hsl.h,
              s: hsl.s,
              l: hsl.l,
              a: data.a,
              source: "rgb"
            }, e2);
          }
        };
        return import_react372.default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, import_react372.default.createElement("div", { style: styles2.double }, import_react372.default.createElement(EditableInput_default, {
          style: { input: styles2.input, label: styles2.label },
          label: "hex",
          value: hex2.replace("#", ""),
          onChange: handleChange
        })), import_react372.default.createElement("div", { style: styles2.single }, import_react372.default.createElement(EditableInput_default, {
          style: { input: styles2.input, label: styles2.label },
          label: "r",
          value: rgb.r,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })), import_react372.default.createElement("div", { style: styles2.single }, import_react372.default.createElement(EditableInput_default, {
          style: { input: styles2.input, label: styles2.label },
          label: "g",
          value: rgb.g,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })), import_react372.default.createElement("div", { style: styles2.single }, import_react372.default.createElement(EditableInput_default, {
          style: { input: styles2.input, label: styles2.label },
          label: "b",
          value: rgb.b,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })), import_react372.default.createElement("div", { style: styles2.alpha }, import_react372.default.createElement(EditableInput_default, {
          style: { input: styles2.input, label: styles2.label },
          label: "a",
          value: Math.round(rgb.a * 100),
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "100"
        })));
      };
      var SketchFields_default = SketchFields;
      var import_react382 = __toESM3(require_react());
      var import_prop_types9 = __toESM3(require_prop_types());
      var import_reactcss33 = __toESM3(require_lib());
      var _extends8 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var SketchPresetColors = function SketchPresetColors2(_ref) {
        var colors2 = _ref.colors, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onSwatchHover = _ref.onSwatchHover;
        var styles2 = (0, import_reactcss33.default)({
          "default": {
            colors: {
              margin: "0 -10px",
              padding: "10px 0 0 10px",
              borderTop: "1px solid #eee",
              display: "flex",
              flexWrap: "wrap",
              position: "relative"
            },
            swatchWrap: {
              width: "16px",
              height: "16px",
              margin: "0 10px 10px 0"
            },
            swatch: {
              borderRadius: "3px",
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15)"
            }
          },
          "no-presets": {
            colors: {
              display: "none"
            }
          }
        }, {
          "no-presets": !colors2 || !colors2.length
        });
        var handleClick = function handleClick2(hex2, e2) {
          onClick({
            hex: hex2,
            source: "hex"
          }, e2);
        };
        return import_react382.default.createElement("div", { style: styles2.colors, className: "flexbox-fix" }, colors2.map(function(colorObjOrString) {
          var c2 = typeof colorObjOrString === "string" ? { color: colorObjOrString } : colorObjOrString;
          var key = "" + c2.color + (c2.title || "");
          return import_react382.default.createElement("div", { key, style: styles2.swatchWrap }, import_react382.default.createElement(Swatch_default, _extends8({}, c2, {
            style: styles2.swatch,
            onClick: handleClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px " + c2.color
            }
          })));
        }));
      };
      SketchPresetColors.propTypes = {
        colors: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.shape({
          color: import_prop_types9.default.string,
          title: import_prop_types9.default.string
        })])).isRequired
      };
      var SketchPresetColors_default = SketchPresetColors;
      var _extends9 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var Sketch = function Sketch2(_ref) {
        var width = _ref.width, rgb = _ref.rgb, hex2 = _ref.hex, hsv = _ref.hsv, hsl = _ref.hsl, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, disableAlpha = _ref.disableAlpha, presetColors = _ref.presetColors, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss34.default)(merge_default({
          "default": _extends9({
            picker: {
              width,
              padding: "10px 10px 0",
              boxSizing: "initial",
              background: "#fff",
              borderRadius: "4px",
              boxShadow: "0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"
            },
            saturation: {
              width: "100%",
              paddingBottom: "75%",
              position: "relative",
              overflow: "hidden"
            },
            Saturation: {
              radius: "3px",
              shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            },
            controls: {
              display: "flex"
            },
            sliders: {
              padding: "4px 0",
              flex: "1"
            },
            color: {
              width: "24px",
              height: "24px",
              position: "relative",
              marginTop: "4px",
              marginLeft: "4px",
              borderRadius: "3px"
            },
            activeColor: {
              absolute: "0px 0px 0px 0px",
              borderRadius: "2px",
              background: "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")",
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            },
            hue: {
              position: "relative",
              height: "10px",
              overflow: "hidden"
            },
            Hue: {
              radius: "2px",
              shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            },
            alpha: {
              position: "relative",
              height: "10px",
              marginTop: "4px",
              overflow: "hidden"
            },
            Alpha: {
              radius: "2px",
              shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            }
          }, passedStyles),
          "disableAlpha": {
            color: {
              height: "10px"
            },
            hue: {
              height: "10px"
            },
            alpha: {
              display: "none"
            }
          }
        }, passedStyles), { disableAlpha });
        return import_react392.default.createElement("div", { style: styles2.picker, className: "sketch-picker " + className }, import_react392.default.createElement("div", { style: styles2.saturation }, import_react392.default.createElement(Saturation_default, {
          style: styles2.Saturation,
          hsl,
          hsv,
          onChange
        })), import_react392.default.createElement("div", { style: styles2.controls, className: "flexbox-fix" }, import_react392.default.createElement("div", { style: styles2.sliders }, import_react392.default.createElement("div", { style: styles2.hue }, import_react392.default.createElement(Hue_default, {
          style: styles2.Hue,
          hsl,
          onChange
        })), import_react392.default.createElement("div", { style: styles2.alpha }, import_react392.default.createElement(Alpha_default, {
          style: styles2.Alpha,
          rgb,
          hsl,
          renderers,
          onChange
        }))), import_react392.default.createElement("div", { style: styles2.color }, import_react392.default.createElement(Checkboard_default, null), import_react392.default.createElement("div", { style: styles2.activeColor }))), import_react392.default.createElement(SketchFields_default, {
          rgb,
          hsl,
          hex: hex2,
          onChange,
          disableAlpha
        }), import_react392.default.createElement(SketchPresetColors_default, {
          colors: presetColors,
          onClick: onChange,
          onSwatchHover
        }));
      };
      Sketch.propTypes = {
        disableAlpha: import_prop_types10.default.bool,
        width: import_prop_types10.default.oneOfType([import_prop_types10.default.string, import_prop_types10.default.number]),
        styles: import_prop_types10.default.object
      };
      Sketch.defaultProps = {
        disableAlpha: false,
        width: 200,
        styles: {},
        presetColors: ["#D0021B", "#F5A623", "#F8E71C", "#8B572A", "#7ED321", "#417505", "#BD10E0", "#9013FE", "#4A90E2", "#50E3C2", "#B8E986", "#000000", "#4A4A4A", "#9B9B9B", "#FFFFFF"]
      };
      var Sketch_default = ColorWrap_default(Sketch);
      var import_react432 = __toESM3(require_react());
      var import_prop_types11 = __toESM3(require_prop_types());
      var import_reactcss38 = __toESM3(require_lib());
      var import_react412 = __toESM3(require_react());
      var import_reactcss36 = __toESM3(require_lib());
      var import_react402 = __toESM3(require_react());
      var import_reactcss35 = __toESM3(require_lib());
      var SliderSwatch = function SliderSwatch2(_ref) {
        var hsl = _ref.hsl, offset = _ref.offset, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, active = _ref.active, first = _ref.first, last = _ref.last;
        var styles2 = (0, import_reactcss35.default)({
          "default": {
            swatch: {
              height: "12px",
              background: "hsl(" + hsl.h + ", 50%, " + offset * 100 + "%)",
              cursor: "pointer"
            }
          },
          "first": {
            swatch: {
              borderRadius: "2px 0 0 2px"
            }
          },
          "last": {
            swatch: {
              borderRadius: "0 2px 2px 0"
            }
          },
          "active": {
            swatch: {
              transform: "scaleY(1.8)",
              borderRadius: "3.6px/2px"
            }
          }
        }, { active, first, last });
        var handleClick = function handleClick2(e2) {
          return onClick({
            h: hsl.h,
            s: 0.5,
            l: offset,
            source: "hsl"
          }, e2);
        };
        return import_react402.default.createElement("div", { style: styles2.swatch, onClick: handleClick });
      };
      var SliderSwatch_default = SliderSwatch;
      var SliderSwatches = function SliderSwatches2(_ref) {
        var onClick = _ref.onClick, hsl = _ref.hsl;
        var styles2 = (0, import_reactcss36.default)({
          "default": {
            swatches: {
              marginTop: "20px"
            },
            swatch: {
              boxSizing: "border-box",
              width: "20%",
              paddingRight: "1px",
              float: "left"
            },
            clear: {
              clear: "both"
            }
          }
        });
        var epsilon = 0.1;
        return import_react412.default.createElement("div", { style: styles2.swatches }, import_react412.default.createElement("div", { style: styles2.swatch }, import_react412.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".80",
          active: Math.abs(hsl.l - 0.8) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          first: true
        })), import_react412.default.createElement("div", { style: styles2.swatch }, import_react412.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".65",
          active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })), import_react412.default.createElement("div", { style: styles2.swatch }, import_react412.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".50",
          active: Math.abs(hsl.l - 0.5) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })), import_react412.default.createElement("div", { style: styles2.swatch }, import_react412.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".35",
          active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })), import_react412.default.createElement("div", { style: styles2.swatch }, import_react412.default.createElement(SliderSwatch_default, {
          hsl,
          offset: ".20",
          active: Math.abs(hsl.l - 0.2) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          last: true
        })), import_react412.default.createElement("div", { style: styles2.clear }));
      };
      var SliderSwatches_default = SliderSwatches;
      var import_react422 = __toESM3(require_react());
      var import_reactcss37 = __toESM3(require_lib());
      var SliderPointer3 = function SliderPointer4() {
        var styles2 = (0, import_reactcss37.default)({
          "default": {
            picker: {
              width: "14px",
              height: "14px",
              borderRadius: "6px",
              transform: "translate(-7px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          }
        });
        return import_react422.default.createElement("div", { style: styles2.picker });
      };
      var SliderPointer_default = SliderPointer3;
      var Slider = function Slider2(_ref) {
        var hsl = _ref.hsl, onChange = _ref.onChange, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss38.default)(merge_default({
          "default": {
            hue: {
              height: "12px",
              position: "relative"
            },
            Hue: {
              radius: "2px"
            }
          }
        }, passedStyles));
        return import_react432.default.createElement("div", { style: styles2.wrap || {}, className: "slider-picker " + className }, import_react432.default.createElement("div", { style: styles2.hue }, import_react432.default.createElement(Hue_default, {
          style: styles2.Hue,
          hsl,
          pointer,
          onChange
        })), import_react432.default.createElement("div", { style: styles2.swatches }, import_react432.default.createElement(SliderSwatches_default, { hsl, onClick: onChange })));
      };
      Slider.propTypes = {
        styles: import_prop_types11.default.object
      };
      Slider.defaultProps = {
        pointer: SliderPointer_default,
        styles: {}
      };
      var Slider_default = ColorWrap_default(Slider);
      var import_react462 = __toESM3(require_react());
      var import_prop_types12 = __toESM3(require_prop_types());
      var import_reactcss41 = __toESM3(require_lib());
      var import_react452 = __toESM3(require_react());
      var import_reactcss40 = __toESM3(require_lib());
      var import_react442 = __toESM3(require_react());
      var import_reactcss39 = __toESM3(require_lib());
      var import_CheckIcon = __toESM3(require_CheckIcon());
      var SwatchesColor = function SwatchesColor2(_ref) {
        var color3 = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, first = _ref.first, last = _ref.last, active = _ref.active;
        var styles2 = (0, import_reactcss39.default)({
          "default": {
            color: {
              width: "40px",
              height: "24px",
              cursor: "pointer",
              background: color3,
              marginBottom: "1px"
            },
            check: {
              color: getContrastingColor(color3),
              marginLeft: "8px",
              display: "none"
            }
          },
          "first": {
            color: {
              overflow: "hidden",
              borderRadius: "2px 2px 0 0"
            }
          },
          "last": {
            color: {
              overflow: "hidden",
              borderRadius: "0 0 2px 2px"
            }
          },
          "active": {
            check: {
              display: "block"
            }
          },
          "color-#FFFFFF": {
            color: {
              boxShadow: "inset 0 0 0 1px #ddd"
            },
            check: {
              color: "#333"
            }
          },
          "transparent": {
            check: {
              color: "#333"
            }
          }
        }, {
          first,
          last,
          active,
          "color-#FFFFFF": color3 === "#FFFFFF",
          "transparent": color3 === "transparent"
        });
        return import_react442.default.createElement(Swatch_default, {
          color: color3,
          style: styles2.color,
          onClick,
          onHover: onSwatchHover,
          focusStyle: { boxShadow: "0 0 4px " + color3 }
        }, import_react442.default.createElement("div", { style: styles2.check }, import_react442.default.createElement(import_CheckIcon.default, null)));
      };
      var SwatchesColor_default = SwatchesColor;
      var SwatchesGroup = function SwatchesGroup2(_ref) {
        var onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, group = _ref.group, active = _ref.active;
        var styles2 = (0, import_reactcss40.default)({
          "default": {
            group: {
              paddingBottom: "10px",
              width: "40px",
              float: "left",
              marginRight: "10px"
            }
          }
        });
        return import_react452.default.createElement("div", { style: styles2.group }, map_default(group, function(color3, i2) {
          return import_react452.default.createElement(SwatchesColor_default, {
            key: color3,
            color: color3,
            active: color3.toLowerCase() === active,
            first: i2 === 0,
            last: i2 === group.length - 1,
            onClick,
            onSwatchHover
          });
        }));
      };
      var SwatchesGroup_default = SwatchesGroup;
      var Swatches = function Swatches2(_ref) {
        var width = _ref.width, height = _ref.height, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors2 = _ref.colors, hex2 = _ref.hex, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss41.default)(merge_default({
          "default": {
            picker: {
              width,
              height
            },
            overflow: {
              height,
              overflowY: "scroll"
            },
            body: {
              padding: "16px 0 6px 16px"
            },
            clear: {
              clear: "both"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data, e2) {
          return onChange({ hex: data, source: "hex" }, e2);
        };
        return import_react462.default.createElement("div", { style: styles2.picker, className: "swatches-picker " + className }, import_react462.default.createElement(Raised_default, null, import_react462.default.createElement("div", { style: styles2.overflow }, import_react462.default.createElement("div", { style: styles2.body }, map_default(colors2, function(group) {
          return import_react462.default.createElement(SwatchesGroup_default, {
            key: group.toString(),
            group,
            active: hex2,
            onClick: handleChange,
            onSwatchHover
          });
        }), import_react462.default.createElement("div", { style: styles2.clear })))));
      };
      Swatches.propTypes = {
        width: import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.number]),
        height: import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.number]),
        colors: import_prop_types12.default.arrayOf(import_prop_types12.default.arrayOf(import_prop_types12.default.string)),
        styles: import_prop_types12.default.object
      };
      Swatches.defaultProps = {
        width: 320,
        height: 240,
        colors: [[red["900"], red["700"], red["500"], red["300"], red["100"]], [pink["900"], pink["700"], pink["500"], pink["300"], pink["100"]], [purple["900"], purple["700"], purple["500"], purple["300"], purple["100"]], [deepPurple["900"], deepPurple["700"], deepPurple["500"], deepPurple["300"], deepPurple["100"]], [indigo["900"], indigo["700"], indigo["500"], indigo["300"], indigo["100"]], [blue["900"], blue["700"], blue["500"], blue["300"], blue["100"]], [lightBlue["900"], lightBlue["700"], lightBlue["500"], lightBlue["300"], lightBlue["100"]], [cyan["900"], cyan["700"], cyan["500"], cyan["300"], cyan["100"]], [teal["900"], teal["700"], teal["500"], teal["300"], teal["100"]], ["#194D33", green["700"], green["500"], green["300"], green["100"]], [lightGreen["900"], lightGreen["700"], lightGreen["500"], lightGreen["300"], lightGreen["100"]], [lime["900"], lime["700"], lime["500"], lime["300"], lime["100"]], [yellow["900"], yellow["700"], yellow["500"], yellow["300"], yellow["100"]], [amber["900"], amber["700"], amber["500"], amber["300"], amber["100"]], [orange["900"], orange["700"], orange["500"], orange["300"], orange["100"]], [deepOrange["900"], deepOrange["700"], deepOrange["500"], deepOrange["300"], deepOrange["100"]], [brown["900"], brown["700"], brown["500"], brown["300"], brown["100"]], [blueGrey["900"], blueGrey["700"], blueGrey["500"], blueGrey["300"], blueGrey["100"]], ["#000000", "#525252", "#969696", "#D9D9D9", "#FFFFFF"]],
        styles: {}
      };
      var Swatches_default = ColorWrap_default(Swatches);
      var import_react472 = __toESM3(require_react());
      var import_prop_types13 = __toESM3(require_prop_types());
      var import_reactcss42 = __toESM3(require_lib());
      var Twitter = function Twitter2(_ref) {
        var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex2 = _ref.hex, colors2 = _ref.colors, width = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss42.default)(merge_default({
          "default": {
            card: {
              width,
              background: "#fff",
              border: "0 solid rgba(0,0,0,0.25)",
              boxShadow: "0 1px 4px rgba(0,0,0,0.25)",
              borderRadius: "4px",
              position: "relative"
            },
            body: {
              padding: "15px 9px 9px 15px"
            },
            label: {
              fontSize: "18px",
              color: "#fff"
            },
            triangle: {
              width: "0px",
              height: "0px",
              borderStyle: "solid",
              borderWidth: "0 9px 10px 9px",
              borderColor: "transparent transparent #fff transparent",
              position: "absolute"
            },
            triangleShadow: {
              width: "0px",
              height: "0px",
              borderStyle: "solid",
              borderWidth: "0 9px 10px 9px",
              borderColor: "transparent transparent rgba(0,0,0,.1) transparent",
              position: "absolute"
            },
            hash: {
              background: "#F0F0F0",
              height: "30px",
              width: "30px",
              borderRadius: "4px 0 0 4px",
              float: "left",
              color: "#98A1A4",
              display: "flex",
              alignItems: "center",
              justifyContent: "center"
            },
            input: {
              width: "100px",
              fontSize: "14px",
              color: "#666",
              border: "0px",
              outline: "none",
              height: "28px",
              boxShadow: "inset 0 0 0 1px #F0F0F0",
              boxSizing: "content-box",
              borderRadius: "0 4px 4px 0",
              float: "left",
              paddingLeft: "8px"
            },
            swatch: {
              width: "30px",
              height: "30px",
              float: "left",
              borderRadius: "4px",
              margin: "0 6px 6px 0"
            },
            clear: {
              clear: "both"
            }
          },
          "hide-triangle": {
            triangle: {
              display: "none"
            },
            triangleShadow: {
              display: "none"
            }
          },
          "top-left-triangle": {
            triangle: {
              top: "-10px",
              left: "12px"
            },
            triangleShadow: {
              top: "-11px",
              left: "12px"
            }
          },
          "top-right-triangle": {
            triangle: {
              top: "-10px",
              right: "12px"
            },
            triangleShadow: {
              top: "-11px",
              right: "12px"
            }
          }
        }, passedStyles), {
          "hide-triangle": triangle === "hide",
          "top-left-triangle": triangle === "top-left",
          "top-right-triangle": triangle === "top-right"
        });
        var handleChange = function handleChange2(hexcode, e2) {
          isValidHex(hexcode) && onChange({
            hex: hexcode,
            source: "hex"
          }, e2);
        };
        return import_react472.default.createElement("div", { style: styles2.card, className: "twitter-picker " + className }, import_react472.default.createElement("div", { style: styles2.triangleShadow }), import_react472.default.createElement("div", { style: styles2.triangle }), import_react472.default.createElement("div", { style: styles2.body }, map_default(colors2, function(c2, i2) {
          return import_react472.default.createElement(Swatch_default, {
            key: i2,
            color: c2,
            hex: c2,
            style: styles2.swatch,
            onClick: handleChange,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "0 0 4px " + c2
            }
          });
        }), import_react472.default.createElement("div", { style: styles2.hash }, "#"), import_react472.default.createElement(EditableInput_default, {
          label: null,
          style: { input: styles2.input },
          value: hex2.replace("#", ""),
          onChange: handleChange
        }), import_react472.default.createElement("div", { style: styles2.clear })));
      };
      Twitter.propTypes = {
        width: import_prop_types13.default.oneOfType([import_prop_types13.default.string, import_prop_types13.default.number]),
        triangle: import_prop_types13.default.oneOf(["hide", "top-left", "top-right"]),
        colors: import_prop_types13.default.arrayOf(import_prop_types13.default.string),
        styles: import_prop_types13.default.object
      };
      Twitter.defaultProps = {
        width: 276,
        colors: ["#FF6900", "#FCB900", "#7BDCB5", "#00D084", "#8ED1FC", "#0693E3", "#ABB8C3", "#EB144C", "#F78DA7", "#9900EF"],
        triangle: "top-left",
        styles: {}
      };
      var Twitter_default = ColorWrap_default(Twitter);
      var import_react512 = __toESM3(require_react());
      var import_prop_types16 = __toESM3(require_prop_types());
      var import_reactcss46 = __toESM3(require_lib());
      var import_react482 = __toESM3(require_react());
      var import_reactcss43 = __toESM3(require_lib());
      var import_prop_types14 = __toESM3(require_prop_types());
      var GooglePointerCircle = function GooglePointerCircle2(props) {
        var styles2 = (0, import_reactcss43.default)({
          "default": {
            picker: {
              width: "20px",
              height: "20px",
              borderRadius: "22px",
              border: "2px #fff solid",
              transform: "translate(-12px, -13px)",
              background: "hsl(" + Math.round(props.hsl.h) + ", " + Math.round(props.hsl.s * 100) + "%, " + Math.round(props.hsl.l * 100) + "%)"
            }
          }
        });
        return import_react482.default.createElement("div", { style: styles2.picker });
      };
      GooglePointerCircle.propTypes = {
        hsl: import_prop_types14.default.shape({
          h: import_prop_types14.default.number,
          s: import_prop_types14.default.number,
          l: import_prop_types14.default.number,
          a: import_prop_types14.default.number
        })
      };
      GooglePointerCircle.defaultProps = {
        hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
      };
      var GooglePointerCircle_default = GooglePointerCircle;
      var import_react492 = __toESM3(require_react());
      var import_reactcss44 = __toESM3(require_lib());
      var import_prop_types15 = __toESM3(require_prop_types());
      var GooglePointer = function GooglePointer2(props) {
        var styles2 = (0, import_reactcss44.default)({
          "default": {
            picker: {
              width: "20px",
              height: "20px",
              borderRadius: "22px",
              transform: "translate(-10px, -7px)",
              background: "hsl(" + Math.round(props.hsl.h) + ", 100%, 50%)",
              border: "2px white solid"
            }
          }
        });
        return import_react492.default.createElement("div", { style: styles2.picker });
      };
      GooglePointer.propTypes = {
        hsl: import_prop_types15.default.shape({
          h: import_prop_types15.default.number,
          s: import_prop_types15.default.number,
          l: import_prop_types15.default.number,
          a: import_prop_types15.default.number
        })
      };
      GooglePointer.defaultProps = {
        hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
      };
      var GooglePointer_default = GooglePointer;
      var import_react502 = __toESM3(require_react());
      var import_reactcss45 = __toESM3(require_lib());
      var GoogleFields = function GoogleFields2(_ref) {
        var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex2 = _ref.hex, hsv = _ref.hsv;
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else if (data.rgb) {
            var values = data.rgb.split(",");
            isvalidColorString(data.rgb, "rgb") && onChange({
              r: values[0],
              g: values[1],
              b: values[2],
              a: 1,
              source: "rgb"
            }, e2);
          } else if (data.hsv) {
            var _values = data.hsv.split(",");
            if (isvalidColorString(data.hsv, "hsv")) {
              _values[2] = _values[2].replace("%", "");
              _values[1] = _values[1].replace("%", "");
              _values[0] = _values[0].replace("\xB0", "");
              if (_values[1] == 1) {
                _values[1] = 0.01;
              } else if (_values[2] == 1) {
                _values[2] = 0.01;
              }
              onChange({
                h: Number(_values[0]),
                s: Number(_values[1]),
                v: Number(_values[2]),
                source: "hsv"
              }, e2);
            }
          } else if (data.hsl) {
            var _values2 = data.hsl.split(",");
            if (isvalidColorString(data.hsl, "hsl")) {
              _values2[2] = _values2[2].replace("%", "");
              _values2[1] = _values2[1].replace("%", "");
              _values2[0] = _values2[0].replace("\xB0", "");
              if (hsvValue[1] == 1) {
                hsvValue[1] = 0.01;
              } else if (hsvValue[2] == 1) {
                hsvValue[2] = 0.01;
              }
              onChange({
                h: Number(_values2[0]),
                s: Number(_values2[1]),
                v: Number(_values2[2]),
                source: "hsl"
              }, e2);
            }
          }
        };
        var styles2 = (0, import_reactcss45.default)({
          "default": {
            wrap: {
              display: "flex",
              height: "100px",
              marginTop: "4px"
            },
            fields: {
              width: "100%"
            },
            column: {
              paddingTop: "10px",
              display: "flex",
              justifyContent: "space-between"
            },
            double: {
              padding: "0px 4.4px",
              boxSizing: "border-box"
            },
            input: {
              width: "100%",
              height: "38px",
              boxSizing: "border-box",
              padding: "4px 10% 3px",
              textAlign: "center",
              border: "1px solid #dadce0",
              fontSize: "11px",
              textTransform: "lowercase",
              borderRadius: "5px",
              outline: "none",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            input2: {
              height: "38px",
              width: "100%",
              border: "1px solid #dadce0",
              boxSizing: "border-box",
              fontSize: "11px",
              textTransform: "lowercase",
              borderRadius: "5px",
              outline: "none",
              paddingLeft: "10px",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            label: {
              textAlign: "center",
              fontSize: "12px",
              background: "#fff",
              position: "absolute",
              textTransform: "uppercase",
              color: "#3c4043",
              width: "35px",
              top: "-6px",
              left: "0",
              right: "0",
              marginLeft: "auto",
              marginRight: "auto",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            label2: {
              left: "10px",
              textAlign: "center",
              fontSize: "12px",
              background: "#fff",
              position: "absolute",
              textTransform: "uppercase",
              color: "#3c4043",
              width: "32px",
              top: "-6px",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            single: {
              flexGrow: "1",
              margin: "0px 4.4px"
            }
          }
        });
        var rgbValue = rgb.r + ", " + rgb.g + ", " + rgb.b;
        var hslValue = Math.round(hsl.h) + "\xB0, " + Math.round(hsl.s * 100) + "%, " + Math.round(hsl.l * 100) + "%";
        var hsvValue = Math.round(hsv.h) + "\xB0, " + Math.round(hsv.s * 100) + "%, " + Math.round(hsv.v * 100) + "%";
        return import_react502.default.createElement("div", { style: styles2.wrap, className: "flexbox-fix" }, import_react502.default.createElement("div", { style: styles2.fields }, import_react502.default.createElement("div", { style: styles2.double }, import_react502.default.createElement(EditableInput_default, {
          style: { input: styles2.input, label: styles2.label },
          label: "hex",
          value: hex2,
          onChange: handleChange
        })), import_react502.default.createElement("div", { style: styles2.column }, import_react502.default.createElement("div", { style: styles2.single }, import_react502.default.createElement(EditableInput_default, {
          style: { input: styles2.input2, label: styles2.label2 },
          label: "rgb",
          value: rgbValue,
          onChange: handleChange
        })), import_react502.default.createElement("div", { style: styles2.single }, import_react502.default.createElement(EditableInput_default, {
          style: { input: styles2.input2, label: styles2.label2 },
          label: "hsv",
          value: hsvValue,
          onChange: handleChange
        })), import_react502.default.createElement("div", { style: styles2.single }, import_react502.default.createElement(EditableInput_default, {
          style: { input: styles2.input2, label: styles2.label2 },
          label: "hsl",
          value: hslValue,
          onChange: handleChange
        })))));
      };
      var GoogleFields_default = GoogleFields;
      var Google = function Google2(_ref) {
        var width = _ref.width, onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex2 = _ref.hex, header = _ref.header, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = (0, import_reactcss46.default)(merge_default({
          "default": {
            picker: {
              width,
              background: "#fff",
              border: "1px solid #dfe1e5",
              boxSizing: "initial",
              display: "flex",
              flexWrap: "wrap",
              borderRadius: "8px 8px 0px 0px"
            },
            head: {
              height: "57px",
              width: "100%",
              paddingTop: "16px",
              paddingBottom: "16px",
              paddingLeft: "16px",
              fontSize: "20px",
              boxSizing: "border-box",
              fontFamily: "Roboto-Regular,HelveticaNeue,Arial,sans-serif"
            },
            saturation: {
              width: "70%",
              padding: "0px",
              position: "relative",
              overflow: "hidden"
            },
            swatch: {
              width: "30%",
              height: "228px",
              padding: "0px",
              background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", 1)",
              position: "relative",
              overflow: "hidden"
            },
            body: {
              margin: "auto",
              width: "95%"
            },
            controls: {
              display: "flex",
              boxSizing: "border-box",
              height: "52px",
              paddingTop: "22px"
            },
            color: {
              width: "32px"
            },
            hue: {
              height: "8px",
              position: "relative",
              margin: "0px 16px 0px 16px",
              width: "100%"
            },
            Hue: {
              radius: "2px"
            }
          }
        }, passedStyles));
        return import_react512.default.createElement("div", { style: styles2.picker, className: "google-picker " + className }, import_react512.default.createElement("div", { style: styles2.head }, header), import_react512.default.createElement("div", { style: styles2.swatch }), import_react512.default.createElement("div", { style: styles2.saturation }, import_react512.default.createElement(Saturation_default, {
          hsl,
          hsv,
          pointer: GooglePointerCircle_default,
          onChange
        })), import_react512.default.createElement("div", { style: styles2.body }, import_react512.default.createElement("div", { style: styles2.controls, className: "flexbox-fix" }, import_react512.default.createElement("div", { style: styles2.hue }, import_react512.default.createElement(Hue_default, {
          style: styles2.Hue,
          hsl,
          radius: "4px",
          pointer: GooglePointer_default,
          onChange
        }))), import_react512.default.createElement(GoogleFields_default, {
          rgb,
          hsl,
          hex: hex2,
          hsv,
          onChange
        })));
      };
      Google.propTypes = {
        width: import_prop_types16.default.oneOfType([import_prop_types16.default.string, import_prop_types16.default.number]),
        styles: import_prop_types16.default.object,
        header: import_prop_types16.default.string
      };
      Google.defaultProps = {
        width: 652,
        styles: {},
        header: "Color picker"
      };
      var Google_default = ColorWrap_default(Google);
      var import_react_outside_click_handler = __toESM3(require_react_outside_click_handler());
      var import_react_is = __toESM3(require_react_is2());
      var import_react522 = __toESM3(require_react());
      var import_shallowequal = __toESM3(require_shallowequal());
      function stylis_min(W2) {
        function M2(d2, c2, e2, h2, a2) {
          for (var m2 = 0, b22 = 0, v2 = 0, n2 = 0, q2, g2, x2 = 0, K2 = 0, k2, u2 = k2 = q2 = 0, l2 = 0, r2 = 0, I2 = 0, t2 = 0, B3 = e2.length, J2 = B3 - 1, y2, f = "", p = "", F3 = "", G3 = "", C; l2 < B3; ) {
            g2 = e2.charCodeAt(l2);
            l2 === J2 && b22 + n2 + v2 + m2 !== 0 && (b22 !== 0 && (g2 = b22 === 47 ? 10 : 47), n2 = v2 = m2 = 0, B3++, J2++);
            if (b22 + n2 + v2 + m2 === 0) {
              if (l2 === J2 && (0 < r2 && (f = f.replace(N2, "")), 0 < f.trim().length)) {
                switch (g2) {
                  case 32:
                  case 9:
                  case 59:
                  case 13:
                  case 10:
                    break;
                  default:
                    f += e2.charAt(l2);
                }
                g2 = 59;
              }
              switch (g2) {
                case 123:
                  f = f.trim();
                  q2 = f.charCodeAt(0);
                  k2 = 1;
                  for (t2 = ++l2; l2 < B3; ) {
                    switch (g2 = e2.charCodeAt(l2)) {
                      case 123:
                        k2++;
                        break;
                      case 125:
                        k2--;
                        break;
                      case 47:
                        switch (g2 = e2.charCodeAt(l2 + 1)) {
                          case 42:
                          case 47:
                            a: {
                              for (u2 = l2 + 1; u2 < J2; ++u2) {
                                switch (e2.charCodeAt(u2)) {
                                  case 47:
                                    if (g2 === 42 && e2.charCodeAt(u2 - 1) === 42 && l2 + 2 !== u2) {
                                      l2 = u2 + 1;
                                      break a;
                                    }
                                    break;
                                  case 10:
                                    if (g2 === 47) {
                                      l2 = u2 + 1;
                                      break a;
                                    }
                                }
                              }
                              l2 = u2;
                            }
                        }
                        break;
                      case 91:
                        g2++;
                      case 40:
                        g2++;
                      case 34:
                      case 39:
                        for (; l2++ < J2 && e2.charCodeAt(l2) !== g2; ) {
                        }
                    }
                    if (k2 === 0)
                      break;
                    l2++;
                  }
                  k2 = e2.substring(t2, l2);
                  q2 === 0 && (q2 = (f = f.replace(ca2, "").trim()).charCodeAt(0));
                  switch (q2) {
                    case 64:
                      0 < r2 && (f = f.replace(N2, ""));
                      g2 = f.charCodeAt(1);
                      switch (g2) {
                        case 100:
                        case 109:
                        case 115:
                        case 45:
                          r2 = c2;
                          break;
                        default:
                          r2 = O;
                      }
                      k2 = M2(c2, r2, k2, g2, a2 + 1);
                      t2 = k2.length;
                      0 < A2 && (r2 = X2(O, f, I2), C = H2(3, k2, r2, c2, D2, z2, t2, g2, a2, h2), f = r2.join(""), C !== void 0 && (t2 = (k2 = C.trim()).length) === 0 && (g2 = 0, k2 = ""));
                      if (0 < t2)
                        switch (g2) {
                          case 115:
                            f = f.replace(da, ea);
                          case 100:
                          case 109:
                          case 45:
                            k2 = f + "{" + k2 + "}";
                            break;
                          case 107:
                            f = f.replace(fa, "$1 $2");
                            k2 = f + "{" + k2 + "}";
                            k2 = w2 === 1 || w2 === 2 && L2("@" + k2, 3) ? "@-webkit-" + k2 + "@" + k2 : "@" + k2;
                            break;
                          default:
                            k2 = f + k2, h2 === 112 && (k2 = (p += k2, ""));
                        }
                      else
                        k2 = "";
                      break;
                    default:
                      k2 = M2(c2, X2(c2, f, I2), k2, h2, a2 + 1);
                  }
                  F3 += k2;
                  k2 = I2 = r2 = u2 = q2 = 0;
                  f = "";
                  g2 = e2.charCodeAt(++l2);
                  break;
                case 125:
                case 59:
                  f = (0 < r2 ? f.replace(N2, "") : f).trim();
                  if (1 < (t2 = f.length))
                    switch (u2 === 0 && (q2 = f.charCodeAt(0), q2 === 45 || 96 < q2 && 123 > q2) && (t2 = (f = f.replace(" ", ":")).length), 0 < A2 && (C = H2(1, f, c2, d2, D2, z2, p.length, h2, a2, h2)) !== void 0 && (t2 = (f = C.trim()).length) === 0 && (f = "\0\0"), q2 = f.charCodeAt(0), g2 = f.charCodeAt(1), q2) {
                      case 0:
                        break;
                      case 64:
                        if (g2 === 105 || g2 === 99) {
                          G3 += f + e2.charAt(l2);
                          break;
                        }
                      default:
                        f.charCodeAt(t2 - 1) !== 58 && (p += P2(f, q2, g2, f.charCodeAt(2)));
                    }
                  I2 = r2 = u2 = q2 = 0;
                  f = "";
                  g2 = e2.charCodeAt(++l2);
              }
            }
            switch (g2) {
              case 13:
              case 10:
                b22 === 47 ? b22 = 0 : 1 + q2 === 0 && h2 !== 107 && 0 < f.length && (r2 = 1, f += "\0");
                0 < A2 * Y2 && H2(0, f, c2, d2, D2, z2, p.length, h2, a2, h2);
                z2 = 1;
                D2++;
                break;
              case 59:
              case 125:
                if (b22 + n2 + v2 + m2 === 0) {
                  z2++;
                  break;
                }
              default:
                z2++;
                y2 = e2.charAt(l2);
                switch (g2) {
                  case 9:
                  case 32:
                    if (n2 + m2 + b22 === 0)
                      switch (x2) {
                        case 44:
                        case 58:
                        case 9:
                        case 32:
                          y2 = "";
                          break;
                        default:
                          g2 !== 32 && (y2 = " ");
                      }
                    break;
                  case 0:
                    y2 = "\\0";
                    break;
                  case 12:
                    y2 = "\\f";
                    break;
                  case 11:
                    y2 = "\\v";
                    break;
                  case 38:
                    n2 + b22 + m2 === 0 && (r2 = I2 = 1, y2 = "\f" + y2);
                    break;
                  case 108:
                    if (n2 + b22 + m2 + E2 === 0 && 0 < u2)
                      switch (l2 - u2) {
                        case 2:
                          x2 === 112 && e2.charCodeAt(l2 - 3) === 58 && (E2 = x2);
                        case 8:
                          K2 === 111 && (E2 = K2);
                      }
                    break;
                  case 58:
                    n2 + b22 + m2 === 0 && (u2 = l2);
                    break;
                  case 44:
                    b22 + v2 + n2 + m2 === 0 && (r2 = 1, y2 += "\r");
                    break;
                  case 34:
                  case 39:
                    b22 === 0 && (n2 = n2 === g2 ? 0 : n2 === 0 ? g2 : n2);
                    break;
                  case 91:
                    n2 + b22 + v2 === 0 && m2++;
                    break;
                  case 93:
                    n2 + b22 + v2 === 0 && m2--;
                    break;
                  case 41:
                    n2 + b22 + m2 === 0 && v2--;
                    break;
                  case 40:
                    if (n2 + b22 + m2 === 0) {
                      if (q2 === 0)
                        switch (2 * x2 + 3 * K2) {
                          case 533:
                            break;
                          default:
                            q2 = 1;
                        }
                      v2++;
                    }
                    break;
                  case 64:
                    b22 + v2 + n2 + m2 + u2 + k2 === 0 && (k2 = 1);
                    break;
                  case 42:
                  case 47:
                    if (!(0 < n2 + m2 + v2))
                      switch (b22) {
                        case 0:
                          switch (2 * g2 + 3 * e2.charCodeAt(l2 + 1)) {
                            case 235:
                              b22 = 47;
                              break;
                            case 220:
                              t2 = l2, b22 = 42;
                          }
                          break;
                        case 42:
                          g2 === 47 && x2 === 42 && t2 + 2 !== l2 && (e2.charCodeAt(t2 + 2) === 33 && (p += e2.substring(t2, l2 + 1)), y2 = "", b22 = 0);
                      }
                }
                b22 === 0 && (f += y2);
            }
            K2 = x2;
            x2 = g2;
            l2++;
          }
          t2 = p.length;
          if (0 < t2) {
            r2 = c2;
            if (0 < A2 && (C = H2(2, p, r2, d2, D2, z2, t2, h2, a2, h2), C !== void 0 && (p = C).length === 0))
              return G3 + p + F3;
            p = r2.join(",") + "{" + p + "}";
            if (w2 * E2 !== 0) {
              w2 !== 2 || L2(p, 2) || (E2 = 0);
              switch (E2) {
                case 111:
                  p = p.replace(ha, ":-moz-$1") + p;
                  break;
                case 112:
                  p = p.replace(Q2, "::-webkit-input-$1") + p.replace(Q2, "::-moz-$1") + p.replace(Q2, ":-ms-input-$1") + p;
              }
              E2 = 0;
            }
          }
          return G3 + p + F3;
        }
        function X2(d2, c2, e2) {
          var h2 = c2.trim().split(ia);
          c2 = h2;
          var a2 = h2.length, m2 = d2.length;
          switch (m2) {
            case 0:
            case 1:
              var b22 = 0;
              for (d2 = m2 === 0 ? "" : d2[0] + " "; b22 < a2; ++b22) {
                c2[b22] = Z2(d2, c2[b22], e2).trim();
              }
              break;
            default:
              var v2 = b22 = 0;
              for (c2 = []; b22 < a2; ++b22) {
                for (var n2 = 0; n2 < m2; ++n2) {
                  c2[v2++] = Z2(d2[n2] + " ", h2[b22], e2).trim();
                }
              }
          }
          return c2;
        }
        function Z2(d2, c2, e2) {
          var h2 = c2.charCodeAt(0);
          33 > h2 && (h2 = (c2 = c2.trim()).charCodeAt(0));
          switch (h2) {
            case 38:
              return c2.replace(F2, "$1" + d2.trim());
            case 58:
              return d2.trim() + c2.replace(F2, "$1" + d2.trim());
            default:
              if (0 < 1 * e2 && 0 < c2.indexOf("\f"))
                return c2.replace(F2, (d2.charCodeAt(0) === 58 ? "" : "$1") + d2.trim());
          }
          return d2 + c2;
        }
        function P2(d2, c2, e2, h2) {
          var a2 = d2 + ";", m2 = 2 * c2 + 3 * e2 + 4 * h2;
          if (m2 === 944) {
            d2 = a2.indexOf(":", 9) + 1;
            var b22 = a2.substring(d2, a2.length - 1).trim();
            b22 = a2.substring(0, d2).trim() + b22 + ";";
            return w2 === 1 || w2 === 2 && L2(b22, 1) ? "-webkit-" + b22 + b22 : b22;
          }
          if (w2 === 0 || w2 === 2 && !L2(a2, 1))
            return a2;
          switch (m2) {
            case 1015:
              return a2.charCodeAt(10) === 97 ? "-webkit-" + a2 + a2 : a2;
            case 951:
              return a2.charCodeAt(3) === 116 ? "-webkit-" + a2 + a2 : a2;
            case 963:
              return a2.charCodeAt(5) === 110 ? "-webkit-" + a2 + a2 : a2;
            case 1009:
              if (a2.charCodeAt(4) !== 100)
                break;
            case 969:
            case 942:
              return "-webkit-" + a2 + a2;
            case 978:
              return "-webkit-" + a2 + "-moz-" + a2 + a2;
            case 1019:
            case 983:
              return "-webkit-" + a2 + "-moz-" + a2 + "-ms-" + a2 + a2;
            case 883:
              if (a2.charCodeAt(8) === 45)
                return "-webkit-" + a2 + a2;
              if (0 < a2.indexOf("image-set(", 11))
                return a2.replace(ja, "$1-webkit-$2") + a2;
              break;
            case 932:
              if (a2.charCodeAt(4) === 45)
                switch (a2.charCodeAt(5)) {
                  case 103:
                    return "-webkit-box-" + a2.replace("-grow", "") + "-webkit-" + a2 + "-ms-" + a2.replace("grow", "positive") + a2;
                  case 115:
                    return "-webkit-" + a2 + "-ms-" + a2.replace("shrink", "negative") + a2;
                  case 98:
                    return "-webkit-" + a2 + "-ms-" + a2.replace("basis", "preferred-size") + a2;
                }
              return "-webkit-" + a2 + "-ms-" + a2 + a2;
            case 964:
              return "-webkit-" + a2 + "-ms-flex-" + a2 + a2;
            case 1023:
              if (a2.charCodeAt(8) !== 99)
                break;
              b22 = a2.substring(a2.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
              return "-webkit-box-pack" + b22 + "-webkit-" + a2 + "-ms-flex-pack" + b22 + a2;
            case 1005:
              return ka.test(a2) ? a2.replace(aa, ":-webkit-") + a2.replace(aa, ":-moz-") + a2 : a2;
            case 1e3:
              b22 = a2.substring(13).trim();
              c2 = b22.indexOf("-") + 1;
              switch (b22.charCodeAt(0) + b22.charCodeAt(c2)) {
                case 226:
                  b22 = a2.replace(G2, "tb");
                  break;
                case 232:
                  b22 = a2.replace(G2, "tb-rl");
                  break;
                case 220:
                  b22 = a2.replace(G2, "lr");
                  break;
                default:
                  return a2;
              }
              return "-webkit-" + a2 + "-ms-" + b22 + a2;
            case 1017:
              if (a2.indexOf("sticky", 9) === -1)
                break;
            case 975:
              c2 = (a2 = d2).length - 10;
              b22 = (a2.charCodeAt(c2) === 33 ? a2.substring(0, c2) : a2).substring(d2.indexOf(":", 7) + 1).trim();
              switch (m2 = b22.charCodeAt(0) + (b22.charCodeAt(7) | 0)) {
                case 203:
                  if (111 > b22.charCodeAt(8))
                    break;
                case 115:
                  a2 = a2.replace(b22, "-webkit-" + b22) + ";" + a2;
                  break;
                case 207:
                case 102:
                  a2 = a2.replace(b22, "-webkit-" + (102 < m2 ? "inline-" : "") + "box") + ";" + a2.replace(b22, "-webkit-" + b22) + ";" + a2.replace(b22, "-ms-" + b22 + "box") + ";" + a2;
              }
              return a2 + ";";
            case 938:
              if (a2.charCodeAt(5) === 45)
                switch (a2.charCodeAt(6)) {
                  case 105:
                    return b22 = a2.replace("-items", ""), "-webkit-" + a2 + "-webkit-box-" + b22 + "-ms-flex-" + b22 + a2;
                  case 115:
                    return "-webkit-" + a2 + "-ms-flex-item-" + a2.replace(ba, "") + a2;
                  default:
                    return "-webkit-" + a2 + "-ms-flex-line-pack" + a2.replace("align-content", "").replace(ba, "") + a2;
                }
              break;
            case 973:
            case 989:
              if (a2.charCodeAt(3) !== 45 || a2.charCodeAt(4) === 122)
                break;
            case 931:
            case 953:
              if (la.test(d2) === true)
                return (b22 = d2.substring(d2.indexOf(":") + 1)).charCodeAt(0) === 115 ? P2(d2.replace("stretch", "fill-available"), c2, e2, h2).replace(":fill-available", ":stretch") : a2.replace(b22, "-webkit-" + b22) + a2.replace(b22, "-moz-" + b22.replace("fill-", "")) + a2;
              break;
            case 962:
              if (a2 = "-webkit-" + a2 + (a2.charCodeAt(5) === 102 ? "-ms-" + a2 : "") + a2, e2 + h2 === 211 && a2.charCodeAt(13) === 105 && 0 < a2.indexOf("transform", 10))
                return a2.substring(0, a2.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a2;
          }
          return a2;
        }
        function L2(d2, c2) {
          var e2 = d2.indexOf(c2 === 1 ? ":" : "{"), h2 = d2.substring(0, c2 !== 3 ? e2 : 10);
          e2 = d2.substring(e2 + 1, d2.length - 1);
          return R2(c2 !== 2 ? h2 : h2.replace(na, "$1"), e2, c2);
        }
        function ea(d2, c2) {
          var e2 = P2(c2, c2.charCodeAt(0), c2.charCodeAt(1), c2.charCodeAt(2));
          return e2 !== c2 + ";" ? e2.replace(oa, " or ($1)").substring(4) : "(" + c2 + ")";
        }
        function H2(d2, c2, e2, h2, a2, m2, b22, v2, n2, q2) {
          for (var g2 = 0, x2 = c2, w3; g2 < A2; ++g2) {
            switch (w3 = S2[g2].call(B2, d2, x2, e2, h2, a2, m2, b22, v2, n2, q2)) {
              case void 0:
              case false:
              case true:
              case null:
                break;
              default:
                x2 = w3;
            }
          }
          if (x2 !== c2)
            return x2;
        }
        function T2(d2) {
          switch (d2) {
            case void 0:
            case null:
              A2 = S2.length = 0;
              break;
            default:
              if (typeof d2 === "function")
                S2[A2++] = d2;
              else if (typeof d2 === "object")
                for (var c2 = 0, e2 = d2.length; c2 < e2; ++c2) {
                  T2(d2[c2]);
                }
              else
                Y2 = !!d2 | 0;
          }
          return T2;
        }
        function U2(d2) {
          d2 = d2.prefix;
          d2 !== void 0 && (R2 = null, d2 ? typeof d2 !== "function" ? w2 = 1 : (w2 = 2, R2 = d2) : w2 = 0);
          return U2;
        }
        function B2(d2, c2) {
          var e2 = d2;
          33 > e2.charCodeAt(0) && (e2 = e2.trim());
          V2 = e2;
          e2 = [V2];
          if (0 < A2) {
            var h2 = H2(-1, c2, e2, e2, D2, z2, 0, 0, 0, 0);
            h2 !== void 0 && typeof h2 === "string" && (c2 = h2);
          }
          var a2 = M2(O, e2, c2, 0, 0);
          0 < A2 && (h2 = H2(-2, a2, e2, e2, D2, z2, a2.length, 0, 0, 0), h2 !== void 0 && (a2 = h2));
          V2 = "";
          E2 = 0;
          z2 = D2 = 1;
          return a2;
        }
        var ca2 = /^\0+/g, N2 = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F2 = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q2 = /::(place)/g, ha = /:(read-only)/g, G2 = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z2 = 1, D2 = 1, E2 = 0, w2 = 1, O = [], S2 = [], A2 = 0, R2 = null, Y2 = 0, V2 = "";
        B2.use = T2;
        B2.set = U2;
        W2 !== void 0 && U2(W2);
        return B2;
      }
      var stylis_browser_esm_default = stylis_min;
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      var unitless_browser_esm_default = unitlessKeys;
      var import_is_prop_valid = __toESM3(require_emotion_is_prop_valid_cjs2());
      var import_hoist_non_react_statics = __toESM3(require_hoist_non_react_statics_cjs2());
      function v() {
        return (v = Object.assign || function(e2) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var n2 = arguments[t2];
            for (var r2 in n2)
              Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
          }
          return e2;
        }).apply(this, arguments);
      }
      var g = function(e2, t2) {
        for (var n2 = [e2[0]], r2 = 0, o2 = t2.length; r2 < o2; r2 += 1)
          n2.push(t2[r2], e2[r2 + 1]);
        return n2;
      };
      var S = function(t2) {
        return t2 !== null && typeof t2 == "object" && (t2.toString ? t2.toString() : Object.prototype.toString.call(t2)) === "[object Object]" && !(0, import_react_is.typeOf)(t2);
      };
      var w = Object.freeze([]);
      var E = Object.freeze({});
      function b2(e2) {
        return typeof e2 == "function";
      }
      function _(e2) {
        return typeof e2 == "string" && e2 || e2.displayName || e2.name || "Component";
      }
      function N(e2) {
        return e2 && typeof e2.styledComponentId == "string";
      }
      var A = typeof process != "undefined" && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
      var I = typeof window != "undefined" && "HTMLElement" in window;
      var P = Boolean(typeof SC_DISABLE_SPEEDY == "boolean" ? SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env.REACT_APP_SC_DISABLE_SPEEDY !== void 0 && process.env.REACT_APP_SC_DISABLE_SPEEDY !== "" ? process.env.REACT_APP_SC_DISABLE_SPEEDY !== "false" && process.env.REACT_APP_SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env.SC_DISABLE_SPEEDY !== void 0 && process.env.SC_DISABLE_SPEEDY !== "" ? process.env.SC_DISABLE_SPEEDY !== "false" && process.env.SC_DISABLE_SPEEDY : true);
      var R = true ? { 1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n" } : {};
      function D() {
        for (var e2 = arguments.length <= 0 ? void 0 : arguments[0], t2 = [], n2 = 1, r2 = arguments.length; n2 < r2; n2 += 1)
          t2.push(n2 < 0 || arguments.length <= n2 ? void 0 : arguments[n2]);
        return t2.forEach(function(t3) {
          e2 = e2.replace(/%[a-z]/, t3);
        }), e2;
      }
      function j(e2) {
        for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
          n2[r2 - 1] = arguments[r2];
        throw false ? new Error("An error occurred. See https://git.io/JUIaE#" + e2 + " for more information." + (n2.length > 0 ? " Args: " + n2.join(", ") : "")) : new Error(D.apply(void 0, [R[e2]].concat(n2)).trim());
      }
      var T = function() {
        function e2(e3) {
          this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e3;
        }
        var t2 = e2.prototype;
        return t2.indexOfGroup = function(e3) {
          for (var t3 = 0, n2 = 0; n2 < e3; n2++)
            t3 += this.groupSizes[n2];
          return t3;
        }, t2.insertRules = function(e3, t3) {
          if (e3 >= this.groupSizes.length) {
            for (var n2 = this.groupSizes, r2 = n2.length, o2 = r2; e3 >= o2; )
              (o2 <<= 1) < 0 && j(16, "" + e3);
            this.groupSizes = new Uint32Array(o2), this.groupSizes.set(n2), this.length = o2;
            for (var s2 = r2; s2 < o2; s2++)
              this.groupSizes[s2] = 0;
          }
          for (var i2 = this.indexOfGroup(e3 + 1), a2 = 0, c2 = t3.length; a2 < c2; a2++)
            this.tag.insertRule(i2, t3[a2]) && (this.groupSizes[e3]++, i2++);
        }, t2.clearGroup = function(e3) {
          if (e3 < this.length) {
            var t3 = this.groupSizes[e3], n2 = this.indexOfGroup(e3), r2 = n2 + t3;
            this.groupSizes[e3] = 0;
            for (var o2 = n2; o2 < r2; o2++)
              this.tag.deleteRule(n2);
          }
        }, t2.getGroup = function(e3) {
          var t3 = "";
          if (e3 >= this.length || this.groupSizes[e3] === 0)
            return t3;
          for (var n2 = this.groupSizes[e3], r2 = this.indexOfGroup(e3), o2 = r2 + n2, s2 = r2; s2 < o2; s2++)
            t3 += this.tag.getRule(s2) + "/*!sc*/\n";
          return t3;
        }, e2;
      }();
      var x = /* @__PURE__ */ new Map();
      var k = /* @__PURE__ */ new Map();
      var V = 1;
      var B = function(e2) {
        if (x.has(e2))
          return x.get(e2);
        for (; k.has(V); )
          V++;
        var t2 = V++;
        return ((0 | t2) < 0 || t2 > 1 << 30) && j(16, "" + t2), x.set(e2, t2), k.set(t2, e2), t2;
      };
      var z = function(e2) {
        return k.get(e2);
      };
      var M = function(e2, t2) {
        t2 >= V && (V = t2 + 1), x.set(e2, t2), k.set(t2, e2);
      };
      var G = "style[" + A + '][data-styled-version="5.3.6"]';
      var L = new RegExp("^" + A + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
      var F = function(e2, t2, n2) {
        for (var r2, o2 = n2.split(","), s2 = 0, i2 = o2.length; s2 < i2; s2++)
          (r2 = o2[s2]) && e2.registerName(t2, r2);
      };
      var Y = function(e2, t2) {
        for (var n2 = (t2.textContent || "").split("/*!sc*/\n"), r2 = [], o2 = 0, s2 = n2.length; o2 < s2; o2++) {
          var i2 = n2[o2].trim();
          if (i2) {
            var a2 = i2.match(L);
            if (a2) {
              var c2 = 0 | parseInt(a2[1], 10), u2 = a2[2];
              c2 !== 0 && (M(u2, c2), F(e2, u2, a2[3]), e2.getTag().insertRules(c2, r2)), r2.length = 0;
            } else
              r2.push(i2);
          }
        }
      };
      var q = function() {
        return typeof __webpack_nonce__ != "undefined" ? __webpack_nonce__ : null;
      };
      var H = function(e2) {
        var t2 = document.head, n2 = e2 || t2, r2 = document.createElement("style"), o2 = function(e3) {
          for (var t3 = e3.childNodes, n3 = t3.length; n3 >= 0; n3--) {
            var r3 = t3[n3];
            if (r3 && r3.nodeType === 1 && r3.hasAttribute(A))
              return r3;
          }
        }(n2), s2 = o2 !== void 0 ? o2.nextSibling : null;
        r2.setAttribute(A, "active"), r2.setAttribute("data-styled-version", "5.3.6");
        var i2 = q();
        return i2 && r2.setAttribute("nonce", i2), n2.insertBefore(r2, s2), r2;
      };
      var $ = function() {
        function e2(e3) {
          var t3 = this.element = H(e3);
          t3.appendChild(document.createTextNode("")), this.sheet = function(e4) {
            if (e4.sheet)
              return e4.sheet;
            for (var t4 = document.styleSheets, n2 = 0, r2 = t4.length; n2 < r2; n2++) {
              var o2 = t4[n2];
              if (o2.ownerNode === e4)
                return o2;
            }
            j(17);
          }(t3), this.length = 0;
        }
        var t2 = e2.prototype;
        return t2.insertRule = function(e3, t3) {
          try {
            return this.sheet.insertRule(t3, e3), this.length++, true;
          } catch (e4) {
            return false;
          }
        }, t2.deleteRule = function(e3) {
          this.sheet.deleteRule(e3), this.length--;
        }, t2.getRule = function(e3) {
          var t3 = this.sheet.cssRules[e3];
          return t3 !== void 0 && typeof t3.cssText == "string" ? t3.cssText : "";
        }, e2;
      }();
      var W = function() {
        function e2(e3) {
          var t3 = this.element = H(e3);
          this.nodes = t3.childNodes, this.length = 0;
        }
        var t2 = e2.prototype;
        return t2.insertRule = function(e3, t3) {
          if (e3 <= this.length && e3 >= 0) {
            var n2 = document.createTextNode(t3), r2 = this.nodes[e3];
            return this.element.insertBefore(n2, r2 || null), this.length++, true;
          }
          return false;
        }, t2.deleteRule = function(e3) {
          this.element.removeChild(this.nodes[e3]), this.length--;
        }, t2.getRule = function(e3) {
          return e3 < this.length ? this.nodes[e3].textContent : "";
        }, e2;
      }();
      var U = function() {
        function e2(e3) {
          this.rules = [], this.length = 0;
        }
        var t2 = e2.prototype;
        return t2.insertRule = function(e3, t3) {
          return e3 <= this.length && (this.rules.splice(e3, 0, t3), this.length++, true);
        }, t2.deleteRule = function(e3) {
          this.rules.splice(e3, 1), this.length--;
        }, t2.getRule = function(e3) {
          return e3 < this.length ? this.rules[e3] : "";
        }, e2;
      }();
      var J = I;
      var X = { isServer: !I, useCSSOMInjection: !P };
      var Z = function() {
        function e2(e3, t3, n2) {
          e3 === void 0 && (e3 = E), t3 === void 0 && (t3 = {}), this.options = v({}, X, {}, e3), this.gs = t3, this.names = new Map(n2), this.server = !!e3.isServer, !this.server && I && J && (J = false, function(e4) {
            for (var t4 = document.querySelectorAll(G), n3 = 0, r2 = t4.length; n3 < r2; n3++) {
              var o2 = t4[n3];
              o2 && o2.getAttribute(A) !== "active" && (Y(e4, o2), o2.parentNode && o2.parentNode.removeChild(o2));
            }
          }(this));
        }
        e2.registerId = function(e3) {
          return B(e3);
        };
        var t2 = e2.prototype;
        return t2.reconstructWithOptions = function(t3, n2) {
          return n2 === void 0 && (n2 = true), new e2(v({}, this.options, {}, t3), this.gs, n2 && this.names || void 0);
        }, t2.allocateGSInstance = function(e3) {
          return this.gs[e3] = (this.gs[e3] || 0) + 1;
        }, t2.getTag = function() {
          return this.tag || (this.tag = (n2 = (t3 = this.options).isServer, r2 = t3.useCSSOMInjection, o2 = t3.target, e3 = n2 ? new U(o2) : r2 ? new $(o2) : new W(o2), new T(e3)));
          var e3, t3, n2, r2, o2;
        }, t2.hasNameForId = function(e3, t3) {
          return this.names.has(e3) && this.names.get(e3).has(t3);
        }, t2.registerName = function(e3, t3) {
          if (B(e3), this.names.has(e3))
            this.names.get(e3).add(t3);
          else {
            var n2 = /* @__PURE__ */ new Set();
            n2.add(t3), this.names.set(e3, n2);
          }
        }, t2.insertRules = function(e3, t3, n2) {
          this.registerName(e3, t3), this.getTag().insertRules(B(e3), n2);
        }, t2.clearNames = function(e3) {
          this.names.has(e3) && this.names.get(e3).clear();
        }, t2.clearRules = function(e3) {
          this.getTag().clearGroup(B(e3)), this.clearNames(e3);
        }, t2.clearTag = function() {
          this.tag = void 0;
        }, t2.toString = function() {
          return function(e3) {
            for (var t3 = e3.getTag(), n2 = t3.length, r2 = "", o2 = 0; o2 < n2; o2++) {
              var s2 = z(o2);
              if (s2 !== void 0) {
                var i2 = e3.names.get(s2), a2 = t3.getGroup(o2);
                if (i2 && a2 && i2.size) {
                  var c2 = A + ".g" + o2 + '[id="' + s2 + '"]', u2 = "";
                  i2 !== void 0 && i2.forEach(function(e4) {
                    e4.length > 0 && (u2 += e4 + ",");
                  }), r2 += "" + a2 + c2 + '{content:"' + u2 + '"}/*!sc*/\n';
                }
              }
            }
            return r2;
          }(this);
        }, e2;
      }();
      var K = /(a)(d)/gi;
      var Q = function(e2) {
        return String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
      };
      function ee(e2) {
        var t2, n2 = "";
        for (t2 = Math.abs(e2); t2 > 52; t2 = t2 / 52 | 0)
          n2 = Q(t2 % 52) + n2;
        return (Q(t2 % 52) + n2).replace(K, "$1-$2");
      }
      var te = function(e2, t2) {
        for (var n2 = t2.length; n2; )
          e2 = 33 * e2 ^ t2.charCodeAt(--n2);
        return e2;
      };
      var ne = function(e2) {
        return te(5381, e2);
      };
      function re(e2) {
        for (var t2 = 0; t2 < e2.length; t2 += 1) {
          var n2 = e2[t2];
          if (b2(n2) && !N(n2))
            return false;
        }
        return true;
      }
      var oe = ne("5.3.6");
      var se = function() {
        function e2(e3, t2, n2) {
          this.rules = e3, this.staticRulesId = "", this.isStatic = false, this.componentId = t2, this.baseHash = te(oe, t2), this.baseStyle = n2, Z.registerId(t2);
        }
        return e2.prototype.generateAndInjectStyles = function(e3, t2, n2) {
          var r2 = this.componentId, o2 = [];
          if (this.baseStyle && o2.push(this.baseStyle.generateAndInjectStyles(e3, t2, n2)), this.isStatic && !n2.hash)
            if (this.staticRulesId && t2.hasNameForId(r2, this.staticRulesId))
              o2.push(this.staticRulesId);
            else {
              var s2 = Ne(this.rules, e3, t2, n2).join(""), i2 = ee(te(this.baseHash, s2) >>> 0);
              if (!t2.hasNameForId(r2, i2)) {
                var a2 = n2(s2, "." + i2, void 0, r2);
                t2.insertRules(r2, i2, a2);
              }
              o2.push(i2), this.staticRulesId = i2;
            }
          else {
            for (var c2 = this.rules.length, u2 = te(this.baseHash, n2.hash), l2 = "", d2 = 0; d2 < c2; d2++) {
              var h2 = this.rules[d2];
              if (typeof h2 == "string")
                l2 += h2, u2 = te(u2, h2 + d2);
              else if (h2) {
                var p = Ne(h2, e3, t2, n2), f = Array.isArray(p) ? p.join("") : p;
                u2 = te(u2, f + d2), l2 += f;
              }
            }
            if (l2) {
              var m2 = ee(u2 >>> 0);
              if (!t2.hasNameForId(r2, m2)) {
                var y2 = n2(l2, "." + m2, void 0, r2);
                t2.insertRules(r2, m2, y2);
              }
              o2.push(m2);
            }
          }
          return o2.join(" ");
        }, e2;
      }();
      var ie = /^\s*\/\/.*$/gm;
      var ae = [":", "[", ".", "#"];
      function ce(e2) {
        var t2, n2, r2, o2, s2 = e2 === void 0 ? E : e2, i2 = s2.options, a2 = i2 === void 0 ? E : i2, c2 = s2.plugins, u2 = c2 === void 0 ? w : c2, l2 = new stylis_browser_esm_default(a2), d2 = [], h2 = function(e3) {
          function t3(t4) {
            if (t4)
              try {
                e3(t4 + "}");
              } catch (e4) {
              }
          }
          return function(n3, r3, o3, s3, i3, a3, c3, u3, l3, d3) {
            switch (n3) {
              case 1:
                if (l3 === 0 && r3.charCodeAt(0) === 64)
                  return e3(r3 + ";"), "";
                break;
              case 2:
                if (u3 === 0)
                  return r3 + "/*|*/";
                break;
              case 3:
                switch (u3) {
                  case 102:
                  case 112:
                    return e3(o3[0] + r3), "";
                  default:
                    return r3 + (d3 === 0 ? "/*|*/" : "");
                }
              case -2:
                r3.split("/*|*/}").forEach(t3);
            }
          };
        }(function(e3) {
          d2.push(e3);
        }), f = function(e3, r3, s3) {
          return r3 === 0 && ae.indexOf(s3[n2.length]) !== -1 || s3.match(o2) ? e3 : "." + t2;
        };
        function m2(e3, s3, i3, a3) {
          a3 === void 0 && (a3 = "&");
          var c3 = e3.replace(ie, ""), u3 = s3 && i3 ? i3 + " " + s3 + " { " + c3 + " }" : c3;
          return t2 = a3, n2 = s3, r2 = new RegExp("\\" + n2 + "\\b", "g"), o2 = new RegExp("(\\" + n2 + "\\b){2,}"), l2(i3 || !s3 ? "" : s3, u3);
        }
        return l2.use([].concat(u2, [function(e3, t3, o3) {
          e3 === 2 && o3.length && o3[0].lastIndexOf(n2) > 0 && (o3[0] = o3[0].replace(r2, f));
        }, h2, function(e3) {
          if (e3 === -2) {
            var t3 = d2;
            return d2 = [], t3;
          }
        }])), m2.hash = u2.length ? u2.reduce(function(e3, t3) {
          return t3.name || j(15), te(e3, t3.name);
        }, 5381).toString() : "", m2;
      }
      var ue = import_react522.default.createContext();
      var le = ue.Consumer;
      var de = import_react522.default.createContext();
      var he = (de.Consumer, new Z());
      var pe = ce();
      function fe() {
        return (0, import_react522.useContext)(ue) || he;
      }
      function me() {
        return (0, import_react522.useContext)(de) || pe;
      }
      function ye(e2) {
        var t2 = (0, import_react522.useState)(e2.stylisPlugins), n2 = t2[0], s2 = t2[1], c2 = fe(), u2 = (0, import_react522.useMemo)(function() {
          var t3 = c2;
          return e2.sheet ? t3 = e2.sheet : e2.target && (t3 = t3.reconstructWithOptions({ target: e2.target }, false)), e2.disableCSSOMInjection && (t3 = t3.reconstructWithOptions({ useCSSOMInjection: false })), t3;
        }, [e2.disableCSSOMInjection, e2.sheet, e2.target]), l2 = (0, import_react522.useMemo)(function() {
          return ce({ options: { prefix: !e2.disableVendorPrefixes }, plugins: n2 });
        }, [e2.disableVendorPrefixes, n2]);
        return (0, import_react522.useEffect)(function() {
          (0, import_shallowequal.default)(n2, e2.stylisPlugins) || s2(e2.stylisPlugins);
        }, [e2.stylisPlugins]), import_react522.default.createElement(ue.Provider, { value: u2 }, import_react522.default.createElement(de.Provider, { value: l2 }, true ? import_react522.default.Children.only(e2.children) : e2.children));
      }
      var ve = function() {
        function e2(e3, t2) {
          var n2 = this;
          this.inject = function(e4, t3) {
            t3 === void 0 && (t3 = pe);
            var r2 = n2.name + t3.hash;
            e4.hasNameForId(n2.id, r2) || e4.insertRules(n2.id, r2, t3(n2.rules, r2, "@keyframes"));
          }, this.toString = function() {
            return j(12, String(n2.name));
          }, this.name = e3, this.id = "sc-keyframes-" + e3, this.rules = t2;
        }
        return e2.prototype.getName = function(e3) {
          return e3 === void 0 && (e3 = pe), this.name + e3.hash;
        }, e2;
      }();
      var ge = /([A-Z])/;
      var Se = /([A-Z])/g;
      var we = /^ms-/;
      var Ee = function(e2) {
        return "-" + e2.toLowerCase();
      };
      function be(e2) {
        return ge.test(e2) ? e2.replace(Se, Ee).replace(we, "-ms-") : e2;
      }
      var _e2 = function(e2) {
        return e2 == null || e2 === false || e2 === "";
      };
      function Ne(e2, n2, r2, o2) {
        if (Array.isArray(e2)) {
          for (var s2, i2 = [], a2 = 0, c2 = e2.length; a2 < c2; a2 += 1)
            (s2 = Ne(e2[a2], n2, r2, o2)) !== "" && (Array.isArray(s2) ? i2.push.apply(i2, s2) : i2.push(s2));
          return i2;
        }
        if (_e2(e2))
          return "";
        if (N(e2))
          return "." + e2.styledComponentId;
        if (b2(e2)) {
          if (typeof (l2 = e2) != "function" || l2.prototype && l2.prototype.isReactComponent || !n2)
            return e2;
          var u2 = e2(n2);
          return (0, import_react_is.isElement)(u2) && console.warn(_(e2) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), Ne(u2, n2, r2, o2);
        }
        var l2;
        return e2 instanceof ve ? r2 ? (e2.inject(r2, o2), e2.getName(o2)) : e2 : S(e2) ? function e3(t2, n3) {
          var r3, o3, s3 = [];
          for (var i3 in t2)
            t2.hasOwnProperty(i3) && !_e2(t2[i3]) && (Array.isArray(t2[i3]) && t2[i3].isCss || b2(t2[i3]) ? s3.push(be(i3) + ":", t2[i3], ";") : S(t2[i3]) ? s3.push.apply(s3, e3(t2[i3], i3)) : s3.push(be(i3) + ": " + (r3 = i3, (o3 = t2[i3]) == null || typeof o3 == "boolean" || o3 === "" ? "" : typeof o3 != "number" || o3 === 0 || r3 in unitless_browser_esm_default ? String(o3).trim() : o3 + "px") + ";"));
          return n3 ? [n3 + " {"].concat(s3, ["}"]) : s3;
        }(e2) : e2.toString();
      }
      var Ae = function(e2) {
        return Array.isArray(e2) && (e2.isCss = true), e2;
      };
      function Ce(e2) {
        for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
          n2[r2 - 1] = arguments[r2];
        return b2(e2) || S(e2) ? Ae(Ne(g(w, [e2].concat(n2)))) : n2.length === 0 && e2.length === 1 && typeof e2[0] == "string" ? e2 : Ae(Ne(g(e2, n2)));
      }
      var Ie = /invalid hook call/i;
      var Pe = /* @__PURE__ */ new Set();
      var Oe = function(e2, t2) {
        if (true) {
          var n2 = "The component " + e2 + (t2 ? ' with the id of "' + t2 + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", r2 = console.error;
          try {
            var o2 = true;
            console.error = function(e3) {
              if (Ie.test(e3))
                o2 = false, Pe.delete(n2);
              else {
                for (var t3 = arguments.length, s2 = new Array(t3 > 1 ? t3 - 1 : 0), i2 = 1; i2 < t3; i2++)
                  s2[i2 - 1] = arguments[i2];
                r2.apply(void 0, [e3].concat(s2));
              }
            }, (0, import_react522.useRef)(), o2 && !Pe.has(n2) && (console.warn(n2), Pe.add(n2));
          } catch (e3) {
            Ie.test(e3.message) && Pe.delete(n2);
          } finally {
            console.error = r2;
          }
        }
      };
      var Re = function(e2, t2, n2) {
        return n2 === void 0 && (n2 = E), e2.theme !== n2.theme && e2.theme || t2 || n2.theme;
      };
      var De = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
      var je = /(^-|-$)/g;
      function Te(e2) {
        return e2.replace(De, "-").replace(je, "");
      }
      var xe = function(e2) {
        return ee(ne(e2) >>> 0);
      };
      function ke(e2) {
        return typeof e2 == "string" && e2.charAt(0) === e2.charAt(0).toLowerCase();
      }
      var Ve = function(e2) {
        return typeof e2 == "function" || typeof e2 == "object" && e2 !== null && !Array.isArray(e2);
      };
      var Be = function(e2) {
        return e2 !== "__proto__" && e2 !== "constructor" && e2 !== "prototype";
      };
      function ze(e2, t2, n2) {
        var r2 = e2[n2];
        Ve(t2) && Ve(r2) ? Me(r2, t2) : e2[n2] = t2;
      }
      function Me(e2) {
        for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
          n2[r2 - 1] = arguments[r2];
        for (var o2 = 0, s2 = n2; o2 < s2.length; o2++) {
          var i2 = s2[o2];
          if (Ve(i2))
            for (var a2 in i2)
              Be(a2) && ze(e2, i2[a2], a2);
        }
        return e2;
      }
      var Ge = import_react522.default.createContext();
      var Le = Ge.Consumer;
      var Ye = {};
      function qe(e2, t2, n2) {
        var o2 = N(e2), i2 = !ke(e2), a2 = t2.attrs, c2 = a2 === void 0 ? w : a2, d2 = t2.componentId, h2 = d2 === void 0 ? function(e3, t3) {
          var n3 = typeof e3 != "string" ? "sc" : Te(e3);
          Ye[n3] = (Ye[n3] || 0) + 1;
          var r2 = n3 + "-" + xe("5.3.6" + n3 + Ye[n3]);
          return t3 ? t3 + "-" + r2 : r2;
        }(t2.displayName, t2.parentComponentId) : d2, p = t2.displayName, f = p === void 0 ? function(e3) {
          return ke(e3) ? "styled." + e3 : "Styled(" + _(e3) + ")";
        }(e2) : p, g2 = t2.displayName && t2.componentId ? Te(t2.displayName) + "-" + t2.componentId : t2.componentId || h2, S2 = o2 && e2.attrs ? Array.prototype.concat(e2.attrs, c2).filter(Boolean) : c2, A2 = t2.shouldForwardProp;
        o2 && e2.shouldForwardProp && (A2 = t2.shouldForwardProp ? function(n3, r2, o3) {
          return e2.shouldForwardProp(n3, r2, o3) && t2.shouldForwardProp(n3, r2, o3);
        } : e2.shouldForwardProp);
        var C, I2 = new se(n2, g2, o2 ? e2.componentStyle : void 0), P2 = I2.isStatic && c2.length === 0, O = function(e3, t3) {
          return function(e4, t4, n3, r2) {
            var o3 = e4.attrs, i3 = e4.componentStyle, a3 = e4.defaultProps, c3 = e4.foldedComponentIds, d3 = e4.shouldForwardProp, h3 = e4.styledComponentId, p2 = e4.target;
            (0, import_react522.useDebugValue)(h3);
            var f2 = function(e5, t5, n4) {
              e5 === void 0 && (e5 = E);
              var r3 = v({}, t5, { theme: e5 }), o4 = {};
              return n4.forEach(function(e6) {
                var t6, n5, s2, i4 = e6;
                for (t6 in b2(i4) && (i4 = i4(r3)), i4)
                  r3[t6] = o4[t6] = t6 === "className" ? (n5 = o4[t6], s2 = i4[t6], n5 && s2 ? n5 + " " + s2 : n5 || s2) : i4[t6];
              }), [r3, o4];
            }(Re(t4, (0, import_react522.useContext)(Ge), a3) || E, t4, o3), y2 = f2[0], g3 = f2[1], S3 = function(e5, t5, n4, r3) {
              var o4 = fe(), s2 = me(), i4 = t5 ? e5.generateAndInjectStyles(E, o4, s2) : e5.generateAndInjectStyles(n4, o4, s2);
              return (0, import_react522.useDebugValue)(i4), !t5 && r3 && r3(i4), i4;
            }(i3, r2, y2, true ? e4.warnTooManyClasses : void 0), w2 = n3, _2 = g3.$as || t4.$as || g3.as || t4.as || p2, N2 = ke(_2), A3 = g3 !== t4 ? v({}, t4, {}, g3) : t4, C2 = {};
            for (var I3 in A3)
              I3[0] !== "$" && I3 !== "as" && (I3 === "forwardedAs" ? C2.as = A3[I3] : (d3 ? d3(I3, import_is_prop_valid.default, _2) : !N2 || (0, import_is_prop_valid.default)(I3)) && (C2[I3] = A3[I3]));
            return t4.style && g3.style !== t4.style && (C2.style = v({}, t4.style, {}, g3.style)), C2.className = Array.prototype.concat(c3, h3, S3 !== h3 ? S3 : null, t4.className, g3.className).filter(Boolean).join(" "), C2.ref = w2, (0, import_react522.createElement)(_2, C2);
          }(C, e3, t3, P2);
        };
        return O.displayName = f, (C = import_react522.default.forwardRef(O)).attrs = S2, C.componentStyle = I2, C.displayName = f, C.shouldForwardProp = A2, C.foldedComponentIds = o2 ? Array.prototype.concat(e2.foldedComponentIds, e2.styledComponentId) : w, C.styledComponentId = g2, C.target = o2 ? e2.target : e2, C.withComponent = function(e3) {
          var r2 = t2.componentId, o3 = function(e4, t3) {
            if (e4 == null)
              return {};
            var n3, r3, o4 = {}, s3 = Object.keys(e4);
            for (r3 = 0; r3 < s3.length; r3++)
              n3 = s3[r3], t3.indexOf(n3) >= 0 || (o4[n3] = e4[n3]);
            return o4;
          }(t2, ["componentId"]), s2 = r2 && r2 + "-" + (ke(e3) ? e3 : Te(_(e3)));
          return qe(e3, v({}, o3, { attrs: S2, componentId: s2 }), n2);
        }, Object.defineProperty(C, "defaultProps", { get: function() {
          return this._foldedDefaultProps;
        }, set: function(t3) {
          this._foldedDefaultProps = o2 ? Me({}, e2.defaultProps, t3) : t3;
        } }), Oe(f, g2), C.warnTooManyClasses = function(e3, t3) {
          var n3 = {}, r2 = false;
          return function(o3) {
            if (!r2 && (n3[o3] = true, Object.keys(n3).length >= 200)) {
              var s2 = t3 ? ' with the id of "' + t3 + '"' : "";
              console.warn("Over 200 classes were generated for component " + e3 + s2 + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r2 = true, n3 = {};
            }
          };
        }(f, g2), C.toString = function() {
          return "." + C.styledComponentId;
        }, i2 && (0, import_hoist_non_react_statics.default)(C, e2, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), C;
      }
      var He = function(e2) {
        return function e3(t2, r2, o2) {
          if (o2 === void 0 && (o2 = E), !(0, import_react_is.isValidElementType)(r2))
            return j(1, String(r2));
          var s2 = function() {
            return t2(r2, o2, Ce.apply(void 0, arguments));
          };
          return s2.withConfig = function(n2) {
            return e3(t2, r2, v({}, o2, {}, n2));
          }, s2.attrs = function(n2) {
            return e3(t2, r2, v({}, o2, { attrs: Array.prototype.concat(o2.attrs, n2).filter(Boolean) }));
          }, s2;
        }(qe, e2);
      };
      ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(e2) {
        He[e2] = He(e2);
      });
      var $e = function() {
        function e2(e3, t3) {
          this.rules = e3, this.componentId = t3, this.isStatic = re(e3), Z.registerId(this.componentId + 1);
        }
        var t2 = e2.prototype;
        return t2.createStyles = function(e3, t3, n2, r2) {
          var o2 = r2(Ne(this.rules, t3, n2, r2).join(""), ""), s2 = this.componentId + e3;
          n2.insertRules(s2, s2, o2);
        }, t2.removeStyles = function(e3, t3) {
          t3.clearRules(this.componentId + e3);
        }, t2.renderStyles = function(e3, t3, n2, r2) {
          e3 > 2 && Z.registerId(this.componentId + e3), this.removeStyles(e3, n2), this.createStyles(e3, t3, n2, r2);
        }, e2;
      }();
      var Je = function() {
        function e2() {
          var e3 = this;
          this._emitSheetCSS = function() {
            var t3 = e3.instance.toString();
            if (!t3)
              return "";
            var n2 = q();
            return "<style " + [n2 && 'nonce="' + n2 + '"', A + '="true"', 'data-styled-version="5.3.6"'].filter(Boolean).join(" ") + ">" + t3 + "</style>";
          }, this.getStyleTags = function() {
            return e3.sealed ? j(2) : e3._emitSheetCSS();
          }, this.getStyleElement = function() {
            var t3;
            if (e3.sealed)
              return j(2);
            var n2 = ((t3 = {})[A] = "", t3["data-styled-version"] = "5.3.6", t3.dangerouslySetInnerHTML = { __html: e3.instance.toString() }, t3), o2 = q();
            return o2 && (n2.nonce = o2), [import_react522.default.createElement("style", v({}, n2, { key: "sc-0-0" }))];
          }, this.seal = function() {
            e3.sealed = true;
          }, this.instance = new Z({ isServer: true }), this.sealed = false;
        }
        var t2 = e2.prototype;
        return t2.collectStyles = function(e3) {
          return this.sealed ? j(2) : import_react522.default.createElement(ye, { sheet: this.instance }, e3);
        }, t2.interleaveWithNodeStream = function(e3) {
          return j(3);
        }, e2;
      }();
      typeof navigator != "undefined" && navigator.product === "ReactNative" && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), typeof window != "undefined" && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, window["__styled-components-init__"] === 1 && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);
      var styled_components_browser_esm_default = He;
      var Box2 = styled_components_browser_esm_default.div`
  ${(props) => props.padding && `padding: ${props.padding}px;`}
  ${(props) => props.width && `width: ${props.width};`}
`;
      var Flex3 = styled_components_browser_esm_default(Box2)`
  display: flex;
  flex-direction: ${(props) => props.flexDir || "row"};
  ${(props) => props.position && `position: ${props.position};`}
  ${(props) => props.align && `align-items: ${props.align};`}
  ${(props) => props.justify && `justify-content: ${props.justify};`}
`;
      var Palette = styled_components_browser_esm_default(Box2)`
  width: 64px;
  height: 54px;
`;
      var PositionBox = styled_components_browser_esm_default(Box2)`
  position: absolute;
  top: ${(props) => props.top}px;
  left: ${(props) => props.left}px;
`;
      var ColorBox = styled_components_browser_esm_default(PositionBox)`
  width: ${(props) => props.size}px;
  height: ${(props) => props.size}px;
  background-color: ${(props) => props.color};
  border: 1px solid black;
`;
      var InvertButton = styled_components_browser_esm_default(PositionBox)`
  padding: 5px;
`;
      function Colors({ color: color3, setColor }) {
        const [showPicker, setShowPicker] = (0, import_react532.useState)(false);
        const [secondaryColor, setSecondaryColor] = (0, import_react532.useState)("#fff");
        function handleChange(c2) {
          setColor(c2.hex);
          setShowPicker(false);
        }
        function flipColors() {
          setColor(secondaryColor);
          setSecondaryColor(color3);
        }
        return /* @__PURE__ */ import_react532.default.createElement(Flex3, {
          align: "center"
        }, /* @__PURE__ */ import_react532.default.createElement(import_react_outside_click_handler.default, {
          onOutsideClick: () => setShowPicker(false)
        }, /* @__PURE__ */ import_react532.default.createElement(Palette, {
          position: "relative"
        }, /* @__PURE__ */ import_react532.default.createElement(ColorBox, {
          size: 24,
          color: secondaryColor,
          top: 8,
          left: 32,
          onClick: flipColors
        }), /* @__PURE__ */ import_react532.default.createElement(ColorBox, {
          size: 32,
          color: color3,
          top: 16,
          left: 8,
          onClick: () => setShowPicker(true)
        })), showPicker && /* @__PURE__ */ import_react532.default.createElement(Flex3, {
          position: "absolute"
        }, /* @__PURE__ */ import_react532.default.createElement(Compact_default, {
          color: color3,
          onChange: handleChange
        }))));
      }
      var import_react542 = require_react();
      function reducer(state2, action) {
        switch (action.type) {
          case "add":
            const offset = state2.offset + 1;
            const history = [...state2.history.slice(0, offset), action.newState];
            return { history, offset };
          case "back":
            return { ...state2, offset: state2.offset - 1 };
          case "forward":
            return { ...state2, offset: state2.offset + 1 };
        }
      }
      function useHistory(initial, callback = () => {
      }) {
        const [{ history, offset }, dispatch] = (0, import_react542.useReducer)(reducer, { history: [initial], offset: 0 });
        const state2 = history[offset];
        (0, import_react542.useEffect)(() => callback(state2), [state2, callback]);
        return {
          state: state2,
          add: (newState) => dispatch({ type: "add", newState }),
          back: () => dispatch({ type: "back" }),
          forward: () => dispatch({ type: "forward" }),
          canForward: history.length - 1 > offset,
          canBack: offset > 0
        };
      }
      var noop4 = () => {
      };
      var Wrapper = styled_components_browser_esm_default(Flex3)`
  border-width: 1px;
  border-color: #ccc;
`;
      var UndoRedo = styled_components_browser_esm_default(Flex3)`
  font-size: 32px;
  opacity: ${(props) => props.disabled ? 0.5 : 1};
`;
      var SubPalette = styled_components_browser_esm_default(Flex3)`
  margin-right: 8px;
  gap: 8px;
`;
      var Controls = ({ color: color3, setColor, back, forward, canBack, canForward }) => {
        return /* @__PURE__ */ import_react552.default.createElement(Flex3, {
          position: "relative",
          align: "center",
          justify: "space-between",
          width: "100%"
        }, /* @__PURE__ */ import_react552.default.createElement(Colors, {
          color: color3,
          setColor
        }), /* @__PURE__ */ import_react552.default.createElement(SubPalette, null, /* @__PURE__ */ import_react552.default.createElement(UndoRedo, {
          onClick: canBack ? back : noop4,
          disabled: !canBack
        }, /* @__PURE__ */ import_react552.default.createElement(FaUndo, null)), /* @__PURE__ */ import_react552.default.createElement(UndoRedo, {
          onClick: canForward ? forward : noop4,
          disabled: !canForward
        }, /* @__PURE__ */ import_react552.default.createElement(FaRedo, null))));
      };
      var editor_default = ({ callback = noop4 }) => {
        const [color3, setColor] = (0, import_react552.useState)("#000");
        const [stroke, setStroke] = (0, import_react552.useState)({});
        const {
          state: state2,
          add: add3,
          back,
          forward,
          canBack,
          canForward
        } = useHistory({}, callback);
        const draw = (coords) => {
          const newPixels = Object.fromEntries(coords.map((coord) => [coord, color3]));
          setStroke({ ...stroke, ...newPixels });
        };
        const commit = () => {
          add3({ ...state2, ...stroke });
          setStroke({});
        };
        const pixels = { ...state2, ...stroke };
        return /* @__PURE__ */ import_react552.default.createElement(Flex3, {
          padding: 8
        }, /* @__PURE__ */ import_react552.default.createElement(Flex3, {
          flexDir: "column"
        }, /* @__PURE__ */ import_react552.default.createElement(Flex3, null, /* @__PURE__ */ import_react552.default.createElement(Controls, {
          color: color3,
          setColor,
          back,
          forward,
          canBack,
          canForward
        })), /* @__PURE__ */ import_react552.default.createElement(Wrapper, null, /* @__PURE__ */ import_react552.default.createElement(Canvas, {
          width: 16,
          height: 16,
          pixels,
          draw,
          commit
        }))));
      };
      module.exports = __toCommonJS(src_exports);
    }
  });

  // ../../node_modules/@babel/polyfill/lib/index.js
  require_noConflict();
  var _global = _interopRequireDefault(require_global3());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
    console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning.");
  }
  _global["default"]._babelPolyfill = true;

  // src/index.jsx
  var import_react71 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // ../../node_modules/@chakra-ui/react/dist/index.esm.js
  var import_react70 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/system/dist/index.esm.js
  var import_react7 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/color-mode/dist/index.esm.js
  var import_react2 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/react-use-safe-layout-effect/dist/index.esm.js
  var import_react = __toESM(require_react());
  var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react.useLayoutEffect : import_react.useEffect;

  // ../../node_modules/@chakra-ui/color-mode/dist/index.esm.js
  var import_react3 = __toESM(require_react());
  var import_react4 = __toESM(require_react());
  var ColorModeContext = (0, import_react4.createContext)({});
  ColorModeContext.displayName = "ColorModeContext";
  function useColorMode() {
    const context = (0, import_react4.useContext)(ColorModeContext);
    if (context === void 0) {
      throw new Error("useColorMode must be used within a ColorModeProvider");
    }
    return context;
  }
  var classNames = {
    light: "chakra-ui-light",
    dark: "chakra-ui-dark"
  };
  function getColorModeUtils(options = {}) {
    const { preventTransition = true } = options;
    const utils = {
      setDataset: (value) => {
        const cleanup = preventTransition ? utils.preventTransition() : void 0;
        document.documentElement.dataset.theme = value;
        document.documentElement.style.colorScheme = value;
        cleanup == null ? void 0 : cleanup();
      },
      setClassName(dark) {
        document.body.classList.add(dark ? classNames.dark : classNames.light);
        document.body.classList.remove(dark ? classNames.light : classNames.dark);
      },
      query() {
        return window.matchMedia("(prefers-color-scheme: dark)");
      },
      getSystemTheme(fallback) {
        const dark = utils.query().matches ?? fallback === "dark";
        return dark ? "dark" : "light";
      },
      addListener(fn) {
        const mql = utils.query();
        const listener = (e) => {
          fn(e.matches ? "dark" : "light");
        };
        if (typeof mql.addListener === "function")
          mql.addListener(listener);
        else
          mql.addEventListener("change", listener);
        return () => {
          if (typeof mql.removeListener === "function")
            mql.removeListener(listener);
          else
            mql.removeEventListener("change", listener);
        };
      },
      preventTransition() {
        const css2 = document.createElement("style");
        css2.appendChild(document.createTextNode(`*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`));
        document.head.appendChild(css2);
        return () => {
          ;
          (() => window.getComputedStyle(document.body))();
          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              document.head.removeChild(css2);
            });
          });
        };
      }
    };
    return utils;
  }
  var STORAGE_KEY = "chakra-ui-color-mode";
  function createLocalStorageManager(key) {
    return {
      ssr: false,
      type: "localStorage",
      get(init) {
        if (!(globalThis == null ? void 0 : globalThis.document))
          return init;
        let value;
        try {
          value = localStorage.getItem(key) || init;
        } catch (e) {
        }
        return value || init;
      },
      set(value) {
        try {
          localStorage.setItem(key, value);
        } catch (e) {
        }
      }
    };
  }
  var localStorageManager = createLocalStorageManager(STORAGE_KEY);
  function parseCookie(cookie, key) {
    const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));
    return match == null ? void 0 : match[2];
  }
  function createCookieStorageManager(key, cookie) {
    return {
      ssr: !!cookie,
      type: "cookie",
      get(init) {
        if (cookie)
          return parseCookie(cookie, key);
        if (!(globalThis == null ? void 0 : globalThis.document))
          return init;
        return parseCookie(document.cookie, key) || init;
      },
      set(value) {
        document.cookie = `${key}=${value}; max-age=31536000; path=/`;
      }
    };
  }
  var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);
  var noop = () => {
  };
  function getTheme(manager, fallback) {
    return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
  }
  function ColorModeProvider(props) {
    const {
      value,
      children,
      options: {
        useSystemColorMode,
        initialColorMode,
        disableTransitionOnChange
      } = {},
      colorModeManager = localStorageManager
    } = props;
    const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
    const [colorMode, rawSetColorMode] = (0, import_react3.useState)(() => getTheme(colorModeManager, defaultColorMode));
    const [resolvedColorMode, setResolvedColorMode] = (0, import_react3.useState)(() => getTheme(colorModeManager));
    const { getSystemTheme, setClassName, setDataset, addListener } = (0, import_react3.useMemo)(() => getColorModeUtils({ preventTransition: disableTransitionOnChange }), [disableTransitionOnChange]);
    const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
    const setColorMode = (0, import_react3.useCallback)((value2) => {
      const resolved = value2 === "system" ? getSystemTheme() : value2;
      rawSetColorMode(resolved);
      setClassName(resolved === "dark");
      setDataset(resolved);
      colorModeManager.set(resolved);
    }, [colorModeManager, getSystemTheme, setClassName, setDataset]);
    useSafeLayoutEffect(() => {
      if (initialColorMode === "system") {
        setResolvedColorMode(getSystemTheme());
      }
    }, []);
    (0, import_react3.useEffect)(() => {
      const managerValue = colorModeManager.get();
      if (managerValue) {
        setColorMode(managerValue);
        return;
      }
      if (initialColorMode === "system") {
        setColorMode("system");
        return;
      }
      setColorMode(defaultColorMode);
    }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
    const toggleColorMode = (0, import_react3.useCallback)(() => {
      setColorMode(resolvedValue === "dark" ? "light" : "dark");
    }, [resolvedValue, setColorMode]);
    (0, import_react3.useEffect)(() => {
      if (!useSystemColorMode)
        return;
      return addListener(setColorMode);
    }, [useSystemColorMode, addListener, setColorMode]);
    const context = (0, import_react3.useMemo)(() => ({
      colorMode: value ?? resolvedValue,
      toggleColorMode: value ? noop : toggleColorMode,
      setColorMode: value ? noop : setColorMode,
      forced: value !== void 0
    }), [resolvedValue, toggleColorMode, setColorMode, value]);
    return /* @__PURE__ */ import_react2.default.createElement(ColorModeContext.Provider, {
      value: context
    }, children);
  }
  ColorModeProvider.displayName = "ColorModeProvider";
  function DarkMode(props) {
    const context = (0, import_react3.useMemo)(() => ({
      colorMode: "dark",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }), []);
    return /* @__PURE__ */ import_react2.default.createElement(ColorModeContext.Provider, {
      value: context,
      ...props
    });
  }
  DarkMode.displayName = "DarkMode";
  function LightMode(props) {
    const context = (0, import_react3.useMemo)(() => ({
      colorMode: "light",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }), []);
    return /* @__PURE__ */ import_react2.default.createElement(ColorModeContext.Provider, {
      value: context,
      ...props
    });
  }
  LightMode.displayName = "LightMode";

  // ../../node_modules/@chakra-ui/styled-system/dist/index.esm.js
  var import_lodash = __toESM(require_lodash());
  var import_lodash2 = __toESM(require_lodash());
  var import_lodash3 = __toESM(require_lodash());
  var import_lodash4 = __toESM(require_lodash());
  function isObject(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !Array.isArray(value);
  }
  function runIfFn(valueOrFn, ...args) {
    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }
  var isFunction = (value) => typeof value === "function";
  var isImportant = (value) => /!(important)?$/.test(value);
  var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
  var tokenToCSSVar = (scale2, value) => (theme2) => {
    const valueStr = String(value);
    const important = isImportant(valueStr);
    const valueWithoutImportant = withoutImportant(valueStr);
    const key = scale2 ? `${scale2}.${valueWithoutImportant}` : valueWithoutImportant;
    let transformed = isObject(theme2.__cssMap) && key in theme2.__cssMap ? theme2.__cssMap[key].varRef : value;
    transformed = withoutImportant(transformed);
    return important ? `${transformed} !important` : transformed;
  };
  function createTransform(options) {
    const { scale: scale2, transform: transform2, compose } = options;
    const fn = (value, theme2) => {
      const _value = tokenToCSSVar(scale2, value)(theme2);
      let result = (transform2 == null ? void 0 : transform2(_value, theme2)) ?? _value;
      if (compose) {
        result = compose(result, theme2);
      }
      return result;
    };
    return fn;
  }
  var pipe = (...fns) => (v) => fns.reduce((a2, b2) => b2(a2), v);
  function toConfig(scale2, transform2) {
    return (property) => {
      const result = { property, scale: scale2 };
      result.transform = createTransform({
        scale: scale2,
        transform: transform2
      });
      return result;
    };
  }
  var getRtl = ({ rtl, ltr }) => (theme2) => theme2.direction === "rtl" ? rtl : ltr;
  function logical(options) {
    const { property, scale: scale2, transform: transform2 } = options;
    return {
      scale: scale2,
      property: getRtl(property),
      transform: scale2 ? createTransform({
        scale: scale2,
        compose: transform2
      }) : transform2
    };
  }
  var transformTemplate = [
    "rotate(var(--chakra-rotate, 0))",
    "scaleX(var(--chakra-scale-x, 1))",
    "scaleY(var(--chakra-scale-y, 1))",
    "skewX(var(--chakra-skew-x, 0))",
    "skewY(var(--chakra-skew-y, 0))"
  ];
  function getTransformTemplate() {
    return [
      "translateX(var(--chakra-translate-x, 0))",
      "translateY(var(--chakra-translate-y, 0))",
      ...transformTemplate
    ].join(" ");
  }
  function getTransformGpuTemplate() {
    return [
      "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
      ...transformTemplate
    ].join(" ");
  }
  var filterTemplate = {
    "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
    filter: [
      "var(--chakra-blur)",
      "var(--chakra-brightness)",
      "var(--chakra-contrast)",
      "var(--chakra-grayscale)",
      "var(--chakra-hue-rotate)",
      "var(--chakra-invert)",
      "var(--chakra-saturate)",
      "var(--chakra-sepia)",
      "var(--chakra-drop-shadow)"
    ].join(" ")
  };
  var backdropFilterTemplate = {
    backdropFilter: [
      "var(--chakra-backdrop-blur)",
      "var(--chakra-backdrop-brightness)",
      "var(--chakra-backdrop-contrast)",
      "var(--chakra-backdrop-grayscale)",
      "var(--chakra-backdrop-hue-rotate)",
      "var(--chakra-backdrop-invert)",
      "var(--chakra-backdrop-opacity)",
      "var(--chakra-backdrop-saturate)",
      "var(--chakra-backdrop-sepia)"
    ].join(" "),
    "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
  };
  function getRingTemplate(value) {
    return {
      "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
      "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
      "--chakra-ring-width": value,
      boxShadow: [
        `var(--chakra-ring-offset-shadow)`,
        `var(--chakra-ring-shadow)`,
        `var(--chakra-shadow, 0 0 #0000)`
      ].join(", ")
    };
  }
  var flexDirectionTemplate = {
    "row-reverse": {
      space: "--chakra-space-x-reverse",
      divide: "--chakra-divide-x-reverse"
    },
    "column-reverse": {
      space: "--chakra-space-y-reverse",
      divide: "--chakra-divide-y-reverse"
    }
  };
  var owlSelector = "& > :not(style) ~ :not(style)";
  var spaceXTemplate = {
    [owlSelector]: {
      marginInlineStart: "calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))",
      marginInlineEnd: "calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))"
    }
  };
  var spaceYTemplate = {
    [owlSelector]: {
      marginTop: "calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))",
      marginBottom: "calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))"
    }
  };
  var directionMap = {
    "to-t": "to top",
    "to-tr": "to top right",
    "to-r": "to right",
    "to-br": "to bottom right",
    "to-b": "to bottom",
    "to-bl": "to bottom left",
    "to-l": "to left",
    "to-tl": "to top left"
  };
  var valueSet = new Set(Object.values(directionMap));
  var globalSet = /* @__PURE__ */ new Set([
    "none",
    "-moz-initial",
    "inherit",
    "initial",
    "revert",
    "unset"
  ]);
  var trimSpace = (str) => str.trim();
  function parseGradient(value, theme2) {
    var _a7;
    if (value == null || globalSet.has(value))
      return value;
    const regex = /(?<type>^[a-z-A-Z]+)\((?<values>(.*))\)/g;
    const { type, values } = ((_a7 = regex.exec(value)) == null ? void 0 : _a7.groups) ?? {};
    if (!type || !values)
      return value;
    const _type = type.includes("-gradient") ? type : `${type}-gradient`;
    const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
    if ((stops == null ? void 0 : stops.length) === 0)
      return value;
    const direction2 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
    stops.unshift(direction2);
    const _values = stops.map((stop) => {
      if (valueSet.has(stop))
        return stop;
      const firstStop = stop.indexOf(" ");
      const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
      const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
      const key = `colors.${_color}`;
      const color22 = key in theme2.__cssMap ? theme2.__cssMap[key].varRef : _color;
      return _stopOrFunc ? [
        color22,
        ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
      ].join(" ") : color22;
    });
    return `${_type}(${_values.join(", ")})`;
  }
  var isCSSFunction = (value) => {
    return typeof value === "string" && value.includes("(") && value.includes(")");
  };
  var gradientTransform = (value, theme2) => parseGradient(value, theme2 ?? {});
  function isCssVar(value) {
    return /^var\(--.+\)$/.test(value);
  }
  var analyzeCSSValue = (value) => {
    const num = parseFloat(value.toString());
    const unit = value.toString().replace(String(num), "");
    return { unitless: !unit, value: num, unit };
  };
  var wrap = (str) => (value) => `${str}(${value})`;
  var transformFunctions = {
    filter(value) {
      return value !== "auto" ? value : filterTemplate;
    },
    backdropFilter(value) {
      return value !== "auto" ? value : backdropFilterTemplate;
    },
    ring(value) {
      return getRingTemplate(transformFunctions.px(value));
    },
    bgClip(value) {
      return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
    },
    transform(value) {
      if (value === "auto")
        return getTransformTemplate();
      if (value === "auto-gpu")
        return getTransformGpuTemplate();
      return value;
    },
    vh(value) {
      return value === "$100vh" ? "var(--chakra-vh)" : value;
    },
    px(value) {
      if (value == null)
        return value;
      const { unitless } = analyzeCSSValue(value);
      return unitless || typeof value === "number" ? `${value}px` : value;
    },
    fraction(value) {
      return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
    },
    float(value, theme2) {
      const map = { left: "right", right: "left" };
      return theme2.direction === "rtl" ? map[value] : value;
    },
    degree(value) {
      if (isCssVar(value) || value == null)
        return value;
      const unitless = typeof value === "string" && !value.endsWith("deg");
      return typeof value === "number" || unitless ? `${value}deg` : value;
    },
    gradient: gradientTransform,
    blur: wrap("blur"),
    opacity: wrap("opacity"),
    brightness: wrap("brightness"),
    contrast: wrap("contrast"),
    dropShadow: wrap("drop-shadow"),
    grayscale: wrap("grayscale"),
    hueRotate: wrap("hue-rotate"),
    invert: wrap("invert"),
    saturate: wrap("saturate"),
    sepia: wrap("sepia"),
    bgImage(value) {
      if (value == null)
        return value;
      const prevent = isCSSFunction(value) || globalSet.has(value);
      return !prevent ? `url(${value})` : value;
    },
    outline(value) {
      const isNoneOrZero = String(value) === "0" || String(value) === "none";
      return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
    },
    flexDirection(value) {
      const { space: space2, divide: divide22 } = flexDirectionTemplate[value] ?? {};
      const result = { flexDirection: value };
      if (space2)
        result[space2] = 1;
      if (divide22)
        result[divide22] = 1;
      return result;
    }
  };
  var t = {
    borderWidths: toConfig("borderWidths"),
    borderStyles: toConfig("borderStyles"),
    colors: toConfig("colors"),
    borders: toConfig("borders"),
    radii: toConfig("radii", transformFunctions.px),
    space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
    spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
    degreeT(property) {
      return { property, transform: transformFunctions.degree };
    },
    prop(property, scale2, transform2) {
      return {
        property,
        scale: scale2,
        ...scale2 && {
          transform: createTransform({ scale: scale2, transform: transform2 })
        }
      };
    },
    propT(property, transform2) {
      return { property, transform: transform2 };
    },
    sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
    sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
    shadows: toConfig("shadows"),
    logical,
    blur: toConfig("blur", transformFunctions.blur)
  };
  var background = {
    background: t.colors("background"),
    backgroundColor: t.colors("backgroundColor"),
    backgroundImage: t.propT("backgroundImage", transformFunctions.bgImage),
    backgroundSize: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundAttachment: true,
    backgroundClip: { transform: transformFunctions.bgClip },
    bgSize: t.prop("backgroundSize"),
    bgPosition: t.prop("backgroundPosition"),
    bg: t.colors("background"),
    bgColor: t.colors("backgroundColor"),
    bgPos: t.prop("backgroundPosition"),
    bgRepeat: t.prop("backgroundRepeat"),
    bgAttachment: t.prop("backgroundAttachment"),
    bgGradient: t.propT("backgroundImage", transformFunctions.gradient),
    bgClip: { transform: transformFunctions.bgClip }
  };
  Object.assign(background, {
    bgImage: background.backgroundImage,
    bgImg: background.backgroundImage
  });
  var border = {
    border: t.borders("border"),
    borderWidth: t.borderWidths("borderWidth"),
    borderStyle: t.borderStyles("borderStyle"),
    borderColor: t.colors("borderColor"),
    borderRadius: t.radii("borderRadius"),
    borderTop: t.borders("borderTop"),
    borderBlockStart: t.borders("borderBlockStart"),
    borderTopLeftRadius: t.radii("borderTopLeftRadius"),
    borderStartStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderTopLeftRadius",
        rtl: "borderTopRightRadius"
      }
    }),
    borderEndStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderBottomLeftRadius",
        rtl: "borderBottomRightRadius"
      }
    }),
    borderTopRightRadius: t.radii("borderTopRightRadius"),
    borderStartEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderTopRightRadius",
        rtl: "borderTopLeftRadius"
      }
    }),
    borderEndEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderBottomRightRadius",
        rtl: "borderBottomLeftRadius"
      }
    }),
    borderRight: t.borders("borderRight"),
    borderInlineEnd: t.borders("borderInlineEnd"),
    borderBottom: t.borders("borderBottom"),
    borderBlockEnd: t.borders("borderBlockEnd"),
    borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
    borderBottomRightRadius: t.radii("borderBottomRightRadius"),
    borderLeft: t.borders("borderLeft"),
    borderInlineStart: {
      property: "borderInlineStart",
      scale: "borders"
    },
    borderInlineStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
        rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
      }
    }),
    borderInlineEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
        rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
      }
    }),
    borderX: t.borders(["borderLeft", "borderRight"]),
    borderInline: t.borders("borderInline"),
    borderY: t.borders(["borderTop", "borderBottom"]),
    borderBlock: t.borders("borderBlock"),
    borderTopWidth: t.borderWidths("borderTopWidth"),
    borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
    borderTopColor: t.colors("borderTopColor"),
    borderBlockStartColor: t.colors("borderBlockStartColor"),
    borderTopStyle: t.borderStyles("borderTopStyle"),
    borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
    borderBottomWidth: t.borderWidths("borderBottomWidth"),
    borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
    borderBottomColor: t.colors("borderBottomColor"),
    borderBlockEndColor: t.colors("borderBlockEndColor"),
    borderBottomStyle: t.borderStyles("borderBottomStyle"),
    borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
    borderLeftWidth: t.borderWidths("borderLeftWidth"),
    borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
    borderLeftColor: t.colors("borderLeftColor"),
    borderInlineStartColor: t.colors("borderInlineStartColor"),
    borderLeftStyle: t.borderStyles("borderLeftStyle"),
    borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
    borderRightWidth: t.borderWidths("borderRightWidth"),
    borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
    borderRightColor: t.colors("borderRightColor"),
    borderInlineEndColor: t.colors("borderInlineEndColor"),
    borderRightStyle: t.borderStyles("borderRightStyle"),
    borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
    borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
    borderBottomRadius: t.radii([
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]),
    borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
    borderRightRadius: t.radii([
      "borderTopRightRadius",
      "borderBottomRightRadius"
    ])
  };
  Object.assign(border, {
    rounded: border.borderRadius,
    roundedTop: border.borderTopRadius,
    roundedTopLeft: border.borderTopLeftRadius,
    roundedTopRight: border.borderTopRightRadius,
    roundedTopStart: border.borderStartStartRadius,
    roundedTopEnd: border.borderStartEndRadius,
    roundedBottom: border.borderBottomRadius,
    roundedBottomLeft: border.borderBottomLeftRadius,
    roundedBottomRight: border.borderBottomRightRadius,
    roundedBottomStart: border.borderEndStartRadius,
    roundedBottomEnd: border.borderEndEndRadius,
    roundedLeft: border.borderLeftRadius,
    roundedRight: border.borderRightRadius,
    roundedStart: border.borderInlineStartRadius,
    roundedEnd: border.borderInlineEndRadius,
    borderStart: border.borderInlineStart,
    borderEnd: border.borderInlineEnd,
    borderTopStartRadius: border.borderStartStartRadius,
    borderTopEndRadius: border.borderStartEndRadius,
    borderBottomStartRadius: border.borderEndStartRadius,
    borderBottomEndRadius: border.borderEndEndRadius,
    borderStartRadius: border.borderInlineStartRadius,
    borderEndRadius: border.borderInlineEndRadius,
    borderStartWidth: border.borderInlineStartWidth,
    borderEndWidth: border.borderInlineEndWidth,
    borderStartColor: border.borderInlineStartColor,
    borderEndColor: border.borderInlineEndColor,
    borderStartStyle: border.borderInlineStartStyle,
    borderEndStyle: border.borderInlineEndStyle
  });
  var color = {
    color: t.colors("color"),
    textColor: t.colors("color"),
    fill: t.colors("fill"),
    stroke: t.colors("stroke")
  };
  var effect = {
    boxShadow: t.shadows("boxShadow"),
    mixBlendMode: true,
    blendMode: t.prop("mixBlendMode"),
    backgroundBlendMode: true,
    bgBlendMode: t.prop("backgroundBlendMode"),
    opacity: true
  };
  Object.assign(effect, {
    shadow: effect.boxShadow
  });
  var filter = {
    filter: { transform: transformFunctions.filter },
    blur: t.blur("--chakra-blur"),
    brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
    contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
    hueRotate: t.degreeT("--chakra-hue-rotate"),
    invert: t.propT("--chakra-invert", transformFunctions.invert),
    saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
    dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
    backdropFilter: { transform: transformFunctions.backdropFilter },
    backdropBlur: t.blur("--chakra-backdrop-blur"),
    backdropBrightness: t.propT("--chakra-backdrop-brightness", transformFunctions.brightness),
    backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
    backdropHueRotate: t.degreeT("--chakra-backdrop-hue-rotate"),
    backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
    backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
  };
  var flexbox = {
    alignItems: true,
    alignContent: true,
    justifyItems: true,
    justifyContent: true,
    flexWrap: true,
    flexDirection: { transform: transformFunctions.flexDirection },
    experimental_spaceX: {
      static: spaceXTemplate,
      transform: createTransform({
        scale: "space",
        transform: (value) => value !== null ? { "--chakra-space-x": value } : null
      })
    },
    experimental_spaceY: {
      static: spaceYTemplate,
      transform: createTransform({
        scale: "space",
        transform: (value) => value != null ? { "--chakra-space-y": value } : null
      })
    },
    flex: true,
    flexFlow: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: t.sizes("flexBasis"),
    justifySelf: true,
    alignSelf: true,
    order: true,
    placeItems: true,
    placeContent: true,
    placeSelf: true,
    gap: t.space("gap"),
    rowGap: t.space("rowGap"),
    columnGap: t.space("columnGap")
  };
  Object.assign(flexbox, {
    flexDir: flexbox.flexDirection
  });
  var grid = {
    gridGap: t.space("gridGap"),
    gridColumnGap: t.space("gridColumnGap"),
    gridRowGap: t.space("gridRowGap"),
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    gridRowStart: true,
    gridRowEnd: true,
    gridAutoRows: true,
    gridTemplate: true,
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridTemplateAreas: true,
    gridArea: true
  };
  var interactivity = {
    appearance: true,
    cursor: true,
    resize: true,
    userSelect: true,
    pointerEvents: true,
    outline: { transform: transformFunctions.outline },
    outlineOffset: true,
    outlineColor: t.colors("outlineColor")
  };
  var layout = {
    width: t.sizesT("width"),
    inlineSize: t.sizesT("inlineSize"),
    height: t.sizes("height"),
    blockSize: t.sizes("blockSize"),
    boxSize: t.sizes(["width", "height"]),
    minWidth: t.sizes("minWidth"),
    minInlineSize: t.sizes("minInlineSize"),
    minHeight: t.sizes("minHeight"),
    minBlockSize: t.sizes("minBlockSize"),
    maxWidth: t.sizes("maxWidth"),
    maxInlineSize: t.sizes("maxInlineSize"),
    maxHeight: t.sizes("maxHeight"),
    maxBlockSize: t.sizes("maxBlockSize"),
    overflow: true,
    overflowX: true,
    overflowY: true,
    overscrollBehavior: true,
    overscrollBehaviorX: true,
    overscrollBehaviorY: true,
    display: true,
    verticalAlign: true,
    boxSizing: true,
    boxDecorationBreak: true,
    float: t.propT("float", transformFunctions.float),
    objectFit: true,
    objectPosition: true,
    visibility: true,
    isolation: true
  };
  Object.assign(layout, {
    w: layout.width,
    h: layout.height,
    minW: layout.minWidth,
    maxW: layout.maxWidth,
    minH: layout.minHeight,
    maxH: layout.maxHeight,
    overscroll: layout.overscrollBehavior,
    overscrollX: layout.overscrollBehaviorX,
    overscrollY: layout.overscrollBehaviorY
  });
  var list = {
    listStyleType: true,
    listStylePosition: true,
    listStylePos: t.prop("listStylePosition"),
    listStyleImage: true,
    listStyleImg: t.prop("listStyleImage")
  };
  function get(obj, path, fallback, index) {
    const key = typeof path === "string" ? path.split(".") : [path];
    for (index = 0; index < key.length; index += 1) {
      if (!obj)
        break;
      obj = obj[key[index]];
    }
    return obj === void 0 ? fallback : obj;
  }
  var memoize = (fn) => {
    const cache = /* @__PURE__ */ new WeakMap();
    const memoizedFn = (obj, path, fallback, index) => {
      if (typeof obj === "undefined") {
        return fn(obj, path, fallback);
      }
      if (!cache.has(obj)) {
        cache.set(obj, /* @__PURE__ */ new Map());
      }
      const map = cache.get(obj);
      if (map.has(path)) {
        return map.get(path);
      }
      const value = fn(obj, path, fallback, index);
      map.set(path, value);
      return value;
    };
    return memoizedFn;
  };
  var memoizedGet = memoize(get);
  var srOnly = {
    border: "0px",
    clip: "rect(0, 0, 0, 0)",
    width: "1px",
    height: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
  };
  var srFocusable = {
    position: "static",
    width: "auto",
    height: "auto",
    clip: "auto",
    padding: "0",
    margin: "0",
    overflow: "visible",
    whiteSpace: "normal"
  };
  var getWithPriority = (theme2, key, styles2) => {
    const result = {};
    const obj = memoizedGet(theme2, key, {});
    for (const prop in obj) {
      const isInStyles = prop in styles2 && styles2[prop] != null;
      if (!isInStyles)
        result[prop] = obj[prop];
    }
    return result;
  };
  var others = {
    srOnly: {
      transform(value) {
        if (value === true)
          return srOnly;
        if (value === "focusable")
          return srFocusable;
        return {};
      }
    },
    layerStyle: {
      processResult: true,
      transform: (value, theme2, styles2) => getWithPriority(theme2, `layerStyles.${value}`, styles2)
    },
    textStyle: {
      processResult: true,
      transform: (value, theme2, styles2) => getWithPriority(theme2, `textStyles.${value}`, styles2)
    },
    apply: {
      processResult: true,
      transform: (value, theme2, styles2) => getWithPriority(theme2, value, styles2)
    }
  };
  var position = {
    position: true,
    pos: t.prop("position"),
    zIndex: t.prop("zIndex", "zIndices"),
    inset: t.spaceT("inset"),
    insetX: t.spaceT(["left", "right"]),
    insetInline: t.spaceT("insetInline"),
    insetY: t.spaceT(["top", "bottom"]),
    insetBlock: t.spaceT("insetBlock"),
    top: t.spaceT("top"),
    insetBlockStart: t.spaceT("insetBlockStart"),
    bottom: t.spaceT("bottom"),
    insetBlockEnd: t.spaceT("insetBlockEnd"),
    left: t.spaceT("left"),
    insetInlineStart: t.logical({
      scale: "space",
      property: { ltr: "left", rtl: "right" }
    }),
    right: t.spaceT("right"),
    insetInlineEnd: t.logical({
      scale: "space",
      property: { ltr: "right", rtl: "left" }
    })
  };
  Object.assign(position, {
    insetStart: position.insetInlineStart,
    insetEnd: position.insetInlineEnd
  });
  var ring = {
    ring: { transform: transformFunctions.ring },
    ringColor: t.colors("--chakra-ring-color"),
    ringOffset: t.prop("--chakra-ring-offset-width"),
    ringOffsetColor: t.colors("--chakra-ring-offset-color"),
    ringInset: t.prop("--chakra-ring-inset")
  };
  var space = {
    margin: t.spaceT("margin"),
    marginTop: t.spaceT("marginTop"),
    marginBlockStart: t.spaceT("marginBlockStart"),
    marginRight: t.spaceT("marginRight"),
    marginInlineEnd: t.spaceT("marginInlineEnd"),
    marginBottom: t.spaceT("marginBottom"),
    marginBlockEnd: t.spaceT("marginBlockEnd"),
    marginLeft: t.spaceT("marginLeft"),
    marginInlineStart: t.spaceT("marginInlineStart"),
    marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
    marginInline: t.spaceT("marginInline"),
    marginY: t.spaceT(["marginTop", "marginBottom"]),
    marginBlock: t.spaceT("marginBlock"),
    padding: t.space("padding"),
    paddingTop: t.space("paddingTop"),
    paddingBlockStart: t.space("paddingBlockStart"),
    paddingRight: t.space("paddingRight"),
    paddingBottom: t.space("paddingBottom"),
    paddingBlockEnd: t.space("paddingBlockEnd"),
    paddingLeft: t.space("paddingLeft"),
    paddingInlineStart: t.space("paddingInlineStart"),
    paddingInlineEnd: t.space("paddingInlineEnd"),
    paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
    paddingInline: t.space("paddingInline"),
    paddingY: t.space(["paddingTop", "paddingBottom"]),
    paddingBlock: t.space("paddingBlock")
  };
  Object.assign(space, {
    m: space.margin,
    mt: space.marginTop,
    mr: space.marginRight,
    me: space.marginInlineEnd,
    marginEnd: space.marginInlineEnd,
    mb: space.marginBottom,
    ml: space.marginLeft,
    ms: space.marginInlineStart,
    marginStart: space.marginInlineStart,
    mx: space.marginX,
    my: space.marginY,
    p: space.padding,
    pt: space.paddingTop,
    py: space.paddingY,
    px: space.paddingX,
    pb: space.paddingBottom,
    pl: space.paddingLeft,
    ps: space.paddingInlineStart,
    paddingStart: space.paddingInlineStart,
    pr: space.paddingRight,
    pe: space.paddingInlineEnd,
    paddingEnd: space.paddingInlineEnd
  });
  var textDecoration = {
    textDecorationColor: t.colors("textDecorationColor"),
    textDecoration: true,
    textDecor: { property: "textDecoration" },
    textDecorationLine: true,
    textDecorationStyle: true,
    textDecorationThickness: true,
    textUnderlineOffset: true,
    textShadow: t.shadows("textShadow")
  };
  var transform = {
    clipPath: true,
    transform: t.propT("transform", transformFunctions.transform),
    transformOrigin: true,
    translateX: t.spaceT("--chakra-translate-x"),
    translateY: t.spaceT("--chakra-translate-y"),
    skewX: t.degreeT("--chakra-skew-x"),
    skewY: t.degreeT("--chakra-skew-y"),
    scaleX: t.prop("--chakra-scale-x"),
    scaleY: t.prop("--chakra-scale-y"),
    scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
    rotate: t.degreeT("--chakra-rotate")
  };
  var transition = {
    transition: true,
    transitionDelay: true,
    animation: true,
    willChange: true,
    transitionDuration: t.prop("transitionDuration", "transition.duration"),
    transitionProperty: t.prop("transitionProperty", "transition.property"),
    transitionTimingFunction: t.prop("transitionTimingFunction", "transition.easing")
  };
  var typography = {
    fontFamily: t.prop("fontFamily", "fonts"),
    fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
    fontWeight: t.prop("fontWeight", "fontWeights"),
    lineHeight: t.prop("lineHeight", "lineHeights"),
    letterSpacing: t.prop("letterSpacing", "letterSpacings"),
    textAlign: true,
    fontStyle: true,
    wordBreak: true,
    overflowWrap: true,
    textOverflow: true,
    textTransform: true,
    whiteSpace: true,
    noOfLines: {
      static: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        display: "-webkit-box",
        WebkitBoxOrient: "vertical",
        WebkitLineClamp: "var(--chakra-line-clamp)"
      },
      property: "--chakra-line-clamp"
    }
  };
  var scroll = {
    scrollBehavior: true,
    scrollSnapAlign: true,
    scrollSnapStop: true,
    scrollSnapType: true,
    scrollMargin: t.spaceT("scrollMargin"),
    scrollMarginTop: t.spaceT("scrollMarginTop"),
    scrollMarginBottom: t.spaceT("scrollMarginBottom"),
    scrollMarginLeft: t.spaceT("scrollMarginLeft"),
    scrollMarginRight: t.spaceT("scrollMarginRight"),
    scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
    scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
    scrollPadding: t.spaceT("scrollPadding"),
    scrollPaddingTop: t.spaceT("scrollPaddingTop"),
    scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
    scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
    scrollPaddingRight: t.spaceT("scrollPaddingRight"),
    scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
    scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
  };
  function resolveReference(operand) {
    if (isObject(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
  var add = (...operands) => `calc(${toExpression("+", ...operands)})`;
  var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
  var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
  var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
  var negate = (x) => {
    const value = resolveReference(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    }
    return multiply(value, -1);
  };
  var calc = Object.assign((x) => ({
    add: (...operands) => calc(add(x, ...operands)),
    subtract: (...operands) => calc(subtract(x, ...operands)),
    multiply: (...operands) => calc(multiply(x, ...operands)),
    divide: (...operands) => calc(divide(x, ...operands)),
    negate: () => calc(negate(x)),
    toString: () => x.toString()
  }), {
    add,
    subtract,
    multiply,
    divide,
    negate
  });
  function replaceWhiteSpace(value, replaceValue = "-") {
    return value.replace(/\s+/g, replaceValue);
  }
  function escape(value) {
    const valueStr = replaceWhiteSpace(value.toString());
    return escapeSymbol(escapeDot(valueStr));
  }
  function escapeDot(value) {
    if (value.includes("\\."))
      return value;
    const isDecimal2 = !Number.isInteger(parseFloat(value.toString()));
    return isDecimal2 ? value.replace(".", `\\.`) : value;
  }
  function escapeSymbol(value) {
    return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
  }
  function addPrefix(value, prefix = "") {
    return [prefix, value].filter(Boolean).join("-");
  }
  function toVarReference(name, fallback) {
    return `var(${name}${fallback ? `, ${fallback}` : ""})`;
  }
  function toVarDefinition(value, prefix = "") {
    return escape(`--${addPrefix(value, prefix)}`);
  }
  function cssVar(name, fallback, cssVarPrefix) {
    const cssVariable = toVarDefinition(name, cssVarPrefix);
    return {
      variable: cssVariable,
      reference: toVarReference(cssVariable, fallback)
    };
  }
  function isObject2(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !Array.isArray(value);
  }
  var breakpoints = Object.freeze([
    "base",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl"
  ]);
  function getLastItem(array) {
    const length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
  }
  function analyzeCSSValue2(value) {
    const num = parseFloat(value.toString());
    const unit = value.toString().replace(String(num), "");
    return { unitless: !unit, value: num, unit };
  }
  function px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue2(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  }
  var sortByBreakpointValue = (a2, b2) => parseInt(a2[1], 10) > parseInt(b2[1], 10) ? 1 : -1;
  var sortBps = (breakpoints22) => Object.fromEntries(Object.entries(breakpoints22).sort(sortByBreakpointValue));
  function normalize(breakpoints22) {
    const sorted = sortBps(breakpoints22);
    return Object.assign(Object.values(sorted), sorted);
  }
  function keys(breakpoints22) {
    const value = Object.keys(sortBps(breakpoints22));
    return new Set(value);
  }
  function subtract2(value) {
    if (!value)
      return value;
    value = px(value) ?? value;
    const factor = value.endsWith("px") ? -1 : -0.0625;
    return typeof value === "number" ? `${value + factor}` : value.replace(/(\d+\.?\d*)/u, (m) => `${parseFloat(m) + factor}`);
  }
  function toMediaQueryString(min, max) {
    const query = ["@media screen"];
    if (min)
      query.push("and", `(min-width: ${px(min)})`);
    if (max)
      query.push("and", `(max-width: ${px(max)})`);
    return query.join(" ");
  }
  function analyzeBreakpoints(breakpoints22) {
    if (!breakpoints22)
      return null;
    breakpoints22.base = breakpoints22.base ?? "0px";
    const normalized = normalize(breakpoints22);
    const queries = Object.entries(breakpoints22).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {
      let [, maxW] = entry[index + 1] ?? [];
      maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
      return {
        _minW: subtract2(minW),
        breakpoint,
        minW,
        maxW,
        maxWQuery: toMediaQueryString(null, maxW),
        minWQuery: toMediaQueryString(minW),
        minMaxQuery: toMediaQueryString(minW, maxW)
      };
    });
    const _keys = keys(breakpoints22);
    const _keysArr = Array.from(_keys.values());
    return {
      keys: _keys,
      normalized,
      isResponsive(test2) {
        const keys2 = Object.keys(test2);
        return keys2.length > 0 && keys2.every((key) => _keys.has(key));
      },
      asObject: sortBps(breakpoints22),
      asArray: normalize(breakpoints22),
      details: queries,
      media: [
        null,
        ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
      ],
      toArrayValue(test2) {
        if (!isObject2(test2)) {
          throw new Error("toArrayValue: value must be an object");
        }
        const result = _keysArr.map((bp) => test2[bp] ?? null);
        while (getLastItem(result) === null) {
          result.pop();
        }
        return result;
      },
      toObjectValue(test2) {
        if (!Array.isArray(test2)) {
          throw new Error("toObjectValue: value must be an array");
        }
        return test2.reduce((acc, value, index) => {
          const key = _keysArr[index];
          if (key != null && value != null)
            acc[key] = value;
          return acc;
        }, {});
      }
    };
  }
  var state = {
    hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
    focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
    focusVisible: (str, post) => `${str}:focus-visible ${post}`,
    focusWithin: (str, post) => `${str}:focus-within ${post}`,
    active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
    disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
    invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
    checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
    indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
    readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
    expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
    placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
  };
  var toGroup = (fn) => merge((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
  var toPeer = (fn) => merge((v) => fn(v, "~ &"), "[data-peer]", ".peer");
  var merge = (fn, ...selectors) => selectors.map(fn).join(", ");
  var pseudoSelectors = {
    _hover: "&:hover, &[data-hover]",
    _active: "&:active, &[data-active]",
    _focus: "&:focus, &[data-focus]",
    _highlighted: "&[data-highlighted]",
    _focusWithin: "&:focus-within",
    _focusVisible: "&:focus-visible, &[data-focus-visible]",
    _disabled: "&:disabled, &[aria-disabled=true], &[data-disabled]",
    _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
    _before: "&::before",
    _after: "&::after",
    _empty: "&:empty",
    _expanded: "&[aria-expanded=true], &[data-expanded]",
    _checked: "&[aria-checked=true], &[data-checked]",
    _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
    _pressed: "&[aria-pressed=true], &[data-pressed]",
    _invalid: "&[aria-invalid=true], &[data-invalid]",
    _valid: "&[data-valid], &[data-state=valid]",
    _loading: "&[data-loading], &[aria-busy=true]",
    _selected: "&[aria-selected=true], &[data-selected]",
    _hidden: "&[hidden], &[data-hidden]",
    _autofill: "&:-webkit-autofill",
    _even: "&:nth-of-type(even)",
    _odd: "&:nth-of-type(odd)",
    _first: "&:first-of-type",
    _last: "&:last-of-type",
    _notFirst: "&:not(:first-of-type)",
    _notLast: "&:not(:last-of-type)",
    _visited: "&:visited",
    _activeLink: "&[aria-current=page]",
    _activeStep: "&[aria-current=step]",
    _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
    _groupHover: toGroup(state.hover),
    _peerHover: toPeer(state.hover),
    _groupFocus: toGroup(state.focus),
    _peerFocus: toPeer(state.focus),
    _groupFocusVisible: toGroup(state.focusVisible),
    _peerFocusVisible: toPeer(state.focusVisible),
    _groupActive: toGroup(state.active),
    _peerActive: toPeer(state.active),
    _groupDisabled: toGroup(state.disabled),
    _peerDisabled: toPeer(state.disabled),
    _groupInvalid: toGroup(state.invalid),
    _peerInvalid: toPeer(state.invalid),
    _groupChecked: toGroup(state.checked),
    _peerChecked: toPeer(state.checked),
    _groupFocusWithin: toGroup(state.focusWithin),
    _peerFocusWithin: toPeer(state.focusWithin),
    _peerPlaceholderShown: toPeer(state.placeholderShown),
    _placeholder: "&::placeholder",
    _placeholderShown: "&:placeholder-shown",
    _fullScreen: "&:fullscreen",
    _selection: "&::selection",
    _rtl: "[dir=rtl] &, &[dir=rtl]",
    _ltr: "[dir=ltr] &, &[dir=ltr]",
    _mediaDark: "@media (prefers-color-scheme: dark)",
    _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
    _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
    _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]"
  };
  var pseudoPropNames = Object.keys(pseudoSelectors);
  function tokenToCssVar(token, prefix) {
    return cssVar(String(token).replace(/\./g, "-"), void 0, prefix);
  }
  function createThemeVars(flatTokens, options) {
    let cssVars = {};
    const cssMap = {};
    for (const [token, tokenValue] of Object.entries(flatTokens)) {
      const { isSemantic, value } = tokenValue;
      const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);
      if (!isSemantic) {
        if (token.startsWith("space")) {
          const keys2 = token.split(".");
          const [firstKey, ...referenceKeys] = keys2;
          const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
          const negativeValue = calc.negate(value);
          const negatedReference = calc.negate(reference);
          cssMap[negativeLookupKey] = {
            value: negativeValue,
            var: variable,
            varRef: negatedReference
          };
        }
        cssVars[variable] = value;
        cssMap[token] = {
          value,
          var: variable,
          varRef: reference
        };
        continue;
      }
      const lookupToken = (maybeToken) => {
        const scale2 = String(token).split(".")[0];
        const withScale = [scale2, maybeToken].join(".");
        const resolvedTokenValue = flatTokens[withScale];
        if (!resolvedTokenValue)
          return maybeToken;
        const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);
        return reference2;
      };
      const normalizedValue = isObject(value) ? value : { default: value };
      cssVars = (0, import_lodash.default)(cssVars, Object.entries(normalizedValue).reduce((acc, [conditionAlias, conditionValue]) => {
        var _a7;
        const maybeReference = lookupToken(conditionValue);
        if (conditionAlias === "default") {
          acc[variable] = maybeReference;
          return acc;
        }
        const conditionSelector = ((_a7 = pseudoSelectors) == null ? void 0 : _a7[conditionAlias]) ?? conditionAlias;
        acc[conditionSelector] = { [variable]: maybeReference };
        return acc;
      }, {}));
      cssMap[token] = {
        value: reference,
        var: variable,
        varRef: reference
      };
    }
    return {
      cssVars,
      cssMap
    };
  }
  function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit) {
      if (key in clone)
        delete clone[key];
    }
    return clone;
  }
  function pick(object, keysToPick) {
    const result = {};
    for (const key of keysToPick) {
      if (key in object) {
        result[key] = object[key];
      }
    }
    return result;
  }
  var tokens = [
    "colors",
    "borders",
    "borderWidths",
    "borderStyles",
    "fonts",
    "fontSizes",
    "fontWeights",
    "letterSpacings",
    "lineHeights",
    "radii",
    "space",
    "shadows",
    "sizes",
    "zIndices",
    "transition",
    "blur"
  ];
  function extractTokens(theme2) {
    const _tokens = tokens;
    return pick(theme2, _tokens);
  }
  function extractSemanticTokens(theme2) {
    return theme2.semanticTokens;
  }
  function omitVars(rawTheme) {
    const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
    return cleanTheme;
  }
  function flattenTokens({
    tokens: tokens2,
    semanticTokens: semanticTokens2
  }) {
    const tokenEntries = Object.entries(flatten(tokens2) ?? {}).map(([token, value]) => {
      const enhancedToken = { isSemantic: false, value };
      return [token, enhancedToken];
    });
    const semanticTokenEntries = Object.entries(flatten(semanticTokens2, 1) ?? {}).map(([token, value]) => {
      const enhancedToken = { isSemantic: true, value };
      return [token, enhancedToken];
    });
    return Object.fromEntries([
      ...tokenEntries,
      ...semanticTokenEntries
    ]);
  }
  function flatten(target, maxDepth2 = Infinity) {
    if (!isObject(target) && !Array.isArray(target) || !maxDepth2) {
      return target;
    }
    return Object.entries(target).reduce((result, [key, value]) => {
      if (isObject(value) || Array.isArray(value)) {
        Object.entries(flatten(value, maxDepth2 - 1)).forEach(([childKey, childValue]) => {
          result[`${key}.${childKey}`] = childValue;
        });
      } else {
        result[key] = value;
      }
      return result;
    }, {});
  }
  function toCSSVar(rawTheme) {
    var _a7;
    const theme2 = omitVars(rawTheme);
    const tokens2 = extractTokens(theme2);
    const semanticTokens2 = extractSemanticTokens(theme2);
    const flatTokens = flattenTokens({ tokens: tokens2, semanticTokens: semanticTokens2 });
    const cssVarPrefix = (_a7 = theme2.config) == null ? void 0 : _a7.cssVarPrefix;
    const {
      cssMap,
      cssVars
    } = createThemeVars(flatTokens, { cssVarPrefix });
    const defaultCssVars = {
      "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
      "--chakra-ring-offset-width": "0px",
      "--chakra-ring-offset-color": "#fff",
      "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
      "--chakra-ring-offset-shadow": "0 0 #0000",
      "--chakra-ring-shadow": "0 0 #0000",
      "--chakra-space-x-reverse": "0",
      "--chakra-space-y-reverse": "0"
    };
    Object.assign(theme2, {
      __cssVars: { ...defaultCssVars, ...cssVars },
      __cssMap: cssMap,
      __breakpoints: analyzeBreakpoints(theme2.breakpoints)
    });
    return theme2;
  }
  var systemProps = (0, import_lodash3.default)({}, background, border, color, flexbox, layout, filter, ring, interactivity, grid, others, position, effect, space, scroll, typography, textDecoration, transform, list, transition);
  var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);
  var layoutPropNames = Object.keys(layoutSystem);
  var propNames = [...Object.keys(systemProps), ...pseudoPropNames];
  var styleProps = { ...systemProps, ...pseudoSelectors };
  var isStyleProp = (prop) => prop in styleProps;
  var expandResponsive = (styles2) => (theme2) => {
    if (!theme2.__breakpoints)
      return styles2;
    const { isResponsive, toArrayValue, media: medias } = theme2.__breakpoints;
    const computedStyles = {};
    for (const key in styles2) {
      let value = runIfFn(styles2[key], theme2);
      if (value == null)
        continue;
      value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
      if (!Array.isArray(value)) {
        computedStyles[key] = value;
        continue;
      }
      const queries = value.slice(0, medias.length).length;
      for (let index = 0; index < queries; index += 1) {
        const media = medias == null ? void 0 : medias[index];
        if (!media) {
          computedStyles[key] = value[index];
          continue;
        }
        computedStyles[media] = computedStyles[media] || {};
        if (value[index] == null) {
          continue;
        }
        computedStyles[media][key] = value[index];
      }
    }
    return computedStyles;
  };
  function splitByComma(value) {
    const chunks = [];
    let chunk = "";
    let inParens = false;
    for (let i = 0; i < value.length; i++) {
      const char = value[i];
      if (char === "(") {
        inParens = true;
        chunk += char;
      } else if (char === ")") {
        inParens = false;
        chunk += char;
      } else if (char === "," && !inParens) {
        chunks.push(chunk);
        chunk = "";
      } else {
        chunk += char;
      }
    }
    chunk = chunk.trim();
    if (chunk) {
      chunks.push(chunk);
    }
    return chunks;
  }
  function isCssVar2(value) {
    return /^var\(--.+\)$/.test(value);
  }
  var isCSSVariableTokenValue = (key, value) => key.startsWith("--") && typeof value === "string" && !isCssVar2(value);
  var resolveTokenValue = (theme2, value) => {
    if (value == null)
      return value;
    const getVar = (val) => {
      var _a7, _b3;
      return (_b3 = (_a7 = theme2.__cssMap) == null ? void 0 : _a7[val]) == null ? void 0 : _b3.varRef;
    };
    const getValue = (val) => getVar(val) ?? val;
    const [tokenValue, fallbackValue] = splitByComma(value);
    value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value);
    return value;
  };
  function getCss(options) {
    const { configs = {}, pseudos = {}, theme: theme2 } = options;
    const css2 = (stylesOrFn, nested = false) => {
      var _a7;
      const _styles = runIfFn(stylesOrFn, theme2);
      const styles2 = expandResponsive(_styles)(theme2);
      let computedStyles = {};
      for (let key in styles2) {
        const valueOrFn = styles2[key];
        let value = runIfFn(valueOrFn, theme2);
        if (key in pseudos) {
          key = pseudos[key];
        }
        if (isCSSVariableTokenValue(key, value)) {
          value = resolveTokenValue(theme2, value);
        }
        let config2 = configs[key];
        if (config2 === true) {
          config2 = { property: key };
        }
        if (isObject(value)) {
          computedStyles[key] = computedStyles[key] ?? {};
          computedStyles[key] = (0, import_lodash2.default)({}, computedStyles[key], css2(value, true));
          continue;
        }
        let rawValue = ((_a7 = config2 == null ? void 0 : config2.transform) == null ? void 0 : _a7.call(config2, value, theme2, _styles)) ?? value;
        rawValue = (config2 == null ? void 0 : config2.processResult) ? css2(rawValue, true) : rawValue;
        const configProperty = runIfFn(config2 == null ? void 0 : config2.property, theme2);
        if (!nested && (config2 == null ? void 0 : config2.static)) {
          const staticStyles = runIfFn(config2.static, theme2);
          computedStyles = (0, import_lodash2.default)({}, computedStyles, staticStyles);
        }
        if (configProperty && Array.isArray(configProperty)) {
          for (const property of configProperty) {
            computedStyles[property] = rawValue;
          }
          continue;
        }
        if (configProperty) {
          if (configProperty === "&" && isObject(rawValue)) {
            computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
          } else {
            computedStyles[configProperty] = rawValue;
          }
          continue;
        }
        if (isObject(rawValue)) {
          computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
          continue;
        }
        computedStyles[key] = rawValue;
      }
      return computedStyles;
    };
    return css2;
  }
  var css = (styles2) => (theme2) => {
    const cssFn = getCss({
      theme: theme2,
      pseudos: pseudoSelectors,
      configs: systemProps
    });
    return cssFn(styles2);
  };
  function defineStyle(styles2) {
    return styles2;
  }
  function defineStyleConfig(config2) {
    return config2;
  }
  function createMultiStyleConfigHelpers(parts) {
    return {
      definePartsStyle(config2) {
        return config2;
      },
      defineMultiStyleConfig(config2) {
        return { parts, ...config2 };
      }
    };
  }
  function normalize2(value, toArray) {
    if (Array.isArray(value))
      return value;
    if (isObject(value))
      return toArray(value);
    if (value != null)
      return [value];
  }
  function getNextIndex(values, i) {
    for (let j = i + 1; j < values.length; j++) {
      if (values[j] != null)
        return j;
    }
    return -1;
  }
  function createResolver(theme2) {
    const breakpointUtil = theme2.__breakpoints;
    return function resolver(config2, prop, value, props) {
      var _a7, _b3;
      if (!breakpointUtil)
        return;
      const result = {};
      const normalized = normalize2(value, breakpointUtil.toArrayValue);
      if (!normalized)
        return result;
      const len = normalized.length;
      const isSingle = len === 1;
      const isMultipart = !!config2.parts;
      for (let i = 0; i < len; i++) {
        const key = breakpointUtil.details[i];
        const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
        const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);
        const styles2 = runIfFn((_a7 = config2[prop]) == null ? void 0 : _a7[normalized[i]], props);
        if (!styles2)
          continue;
        if (isMultipart) {
          (_b3 = config2.parts) == null ? void 0 : _b3.forEach((part) => {
            (0, import_lodash4.default)(result, {
              [part]: isSingle ? styles2[part] : { [query]: styles2[part] }
            });
          });
          continue;
        }
        if (!isMultipart) {
          if (isSingle)
            (0, import_lodash4.default)(result, styles2);
          else
            result[query] = styles2;
          continue;
        }
        result[query] = styles2;
      }
      return result;
    };
  }
  function resolveStyleConfig(config2) {
    return (props) => {
      const { variant, size: size2, theme: theme2 } = props;
      const recipe = createResolver(theme2);
      return (0, import_lodash4.default)({}, runIfFn(config2.baseStyle ?? {}, props), recipe(config2, "sizes", size2, props), recipe(config2, "variants", variant, props));
    };
  }
  function omitThemingProps(props) {
    return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
  }

  // ../../node_modules/@chakra-ui/system/dist/index.esm.js
  var import_react8 = __toESM(require_emotion_react_cjs());
  var import_react9 = __toESM(require_emotion_react_cjs());
  var import_react10 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/utils/dist/index.esm.js
  var import_lodash5 = __toESM(require_lodash());

  // ../../node_modules/framesync/dist/es/on-next-frame.js
  var defaultTimestep = 1 / 60 * 1e3;
  var getCurrentTime = typeof performance !== "undefined" ? function() {
    return performance.now();
  } : function() {
    return Date.now();
  };
  var onNextFrame = typeof window !== "undefined" ? function(callback) {
    return window.requestAnimationFrame(callback);
  } : function(callback) {
    return setTimeout(function() {
      return callback(getCurrentTime());
    }, defaultTimestep);
  };

  // ../../node_modules/framesync/dist/es/create-render-step.js
  function createRenderStep(runNextFrame2) {
    var toRun = [];
    var toRunNextFrame = [];
    var numToRun = 0;
    var isProcessing2 = false;
    var toKeepAlive = /* @__PURE__ */ new WeakSet();
    var step = {
      schedule: function(callback, keepAlive, immediate) {
        if (keepAlive === void 0) {
          keepAlive = false;
        }
        if (immediate === void 0) {
          immediate = false;
        }
        var addToCurrentFrame = immediate && isProcessing2;
        var buffer = addToCurrentFrame ? toRun : toRunNextFrame;
        if (keepAlive)
          toKeepAlive.add(callback);
        if (buffer.indexOf(callback) === -1) {
          buffer.push(callback);
          if (addToCurrentFrame && isProcessing2)
            numToRun = toRun.length;
        }
        return callback;
      },
      cancel: function(callback) {
        var index = toRunNextFrame.indexOf(callback);
        if (index !== -1)
          toRunNextFrame.splice(index, 1);
        toKeepAlive.delete(callback);
      },
      process: function(frameData) {
        var _a7;
        isProcessing2 = true;
        _a7 = [toRunNextFrame, toRun], toRun = _a7[0], toRunNextFrame = _a7[1];
        toRunNextFrame.length = 0;
        numToRun = toRun.length;
        if (numToRun) {
          for (var i = 0; i < numToRun; i++) {
            var callback = toRun[i];
            callback(frameData);
            if (toKeepAlive.has(callback)) {
              step.schedule(callback);
              runNextFrame2();
            }
          }
        }
        isProcessing2 = false;
      }
    };
    return step;
  }

  // ../../node_modules/framesync/dist/es/index.js
  var maxElapsed = 40;
  var useDefaultElapsed = true;
  var runNextFrame = false;
  var isProcessing = false;
  var frame = {
    delta: 0,
    timestamp: 0
  };
  var stepsOrder = ["read", "update", "preRender", "render", "postRender"];
  var steps = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
    acc[key] = createRenderStep(function() {
      return runNextFrame = true;
    });
    return acc;
  }, {});
  var sync = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
    var step = steps[key];
    acc[key] = function(process2, keepAlive, immediate) {
      if (keepAlive === void 0) {
        keepAlive = false;
      }
      if (immediate === void 0) {
        immediate = false;
      }
      if (!runNextFrame)
        startLoop();
      return step.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  var cancelSync = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
    acc[key] = steps[key].cancel;
    return acc;
  }, {});
  var flushSync = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
    acc[key] = function() {
      return steps[key].process(frame);
    };
    return acc;
  }, {});
  var processStep = function(stepId) {
    return steps[stepId].process(frame);
  };
  var processFrame = function(timestamp) {
    runNextFrame = false;
    frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (runNextFrame) {
      useDefaultElapsed = false;
      onNextFrame(processFrame);
    }
  };
  var startLoop = function() {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing)
      onNextFrame(processFrame);
  };
  var getFrameData = function() {
    return frame;
  };
  var es_default = sync;

  // ../../node_modules/@chakra-ui/utils/dist/index.esm.js
  function isFunction2(value) {
    return typeof value === "function";
  }
  function omit2(object, keys2) {
    const result = {};
    Object.keys(object).forEach((key) => {
      if (keys2.includes(key))
        return;
      result[key] = object[key];
    });
    return result;
  }
  function get2(obj, path, fallback, index) {
    const key = typeof path === "string" ? path.split(".") : [path];
    for (index = 0; index < key.length; index += 1) {
      if (!obj)
        break;
      obj = obj[key[index]];
    }
    return obj === void 0 ? fallback : obj;
  }
  var memoize2 = (fn) => {
    const cache = /* @__PURE__ */ new WeakMap();
    const memoizedFn = (obj, path, fallback, index) => {
      if (typeof obj === "undefined") {
        return fn(obj, path, fallback);
      }
      if (!cache.has(obj)) {
        cache.set(obj, /* @__PURE__ */ new Map());
      }
      const map = cache.get(obj);
      if (map.has(path)) {
        return map.get(path);
      }
      const value = fn(obj, path, fallback, index);
      map.set(path, value);
      return value;
    };
    return memoizedFn;
  };
  var memoizedGet2 = memoize2(get2);
  function objectFilter(object, fn) {
    const result = {};
    Object.keys(object).forEach((key) => {
      const value = object[key];
      const shouldPass = fn(value, key, object);
      if (shouldPass) {
        result[key] = value;
      }
    });
    return result;
  }
  var filterUndefined = (object) => objectFilter(object, (val) => val !== null && val !== void 0);
  var focusableElList = [
    "input:not(:disabled)",
    "select:not(:disabled)",
    "textarea:not(:disabled)",
    "embed",
    "iframe",
    "object",
    "a[href]",
    "area[href]",
    "button:not(:disabled)",
    "[tabindex]",
    "audio[controls]",
    "video[controls]",
    "*[tabindex]:not([aria-disabled])",
    "*[contenteditable]"
  ];
  var focusableElSelector = focusableElList.join();
  function runIfFn2(valueOrFn, ...args) {
    return isFunction2(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }
  var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
  var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var breakpoints2 = Object.freeze([
    "base",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl"
  ]);

  // ../../node_modules/@chakra-ui/react-utils/dist/index.esm.js
  var import_react5 = __toESM(require_react());
  var import_react6 = __toESM(require_react());
  function createContext2(options = {}) {
    const {
      strict = true,
      errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
      name
    } = options;
    const Context = (0, import_react5.createContext)(void 0);
    Context.displayName = name;
    function useContext16() {
      var _a7;
      const context = (0, import_react5.useContext)(Context);
      if (!context && strict) {
        const error = new Error(errorMessage);
        error.name = "ContextError";
        (_a7 = Error.captureStackTrace) == null ? void 0 : _a7.call(Error, error, useContext16);
        throw error;
      }
      return context;
    }
    return [
      Context.Provider,
      useContext16,
      Context
    ];
  }

  // ../../node_modules/@chakra-ui/system/dist/index.esm.js
  var import_react11 = __toESM(require_emotion_react_cjs());
  var import_react12 = __toESM(require_react());
  var import_styled = __toESM(require_emotion_styled_cjs());
  var import_react13 = __toESM(require_react());
  var import_react14 = __toESM(require_react());
  var import_react15 = __toESM(require_react());
  var import_react_fast_compare = __toESM(require_react_fast_compare());
  function useTheme() {
    const theme2 = (0, import_react10.useContext)(import_react9.ThemeContext);
    if (!theme2) {
      throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`");
    }
    return theme2;
  }
  function useChakra() {
    const colorModeResult = useColorMode();
    const theme2 = useTheme();
    return { ...colorModeResult, theme: theme2 };
  }
  function getBreakpointValue(theme2, value, fallback) {
    if (value == null)
      return value;
    const getValue = (val) => {
      var _a7, _b3;
      return (_b3 = (_a7 = theme2.__breakpoints) == null ? void 0 : _a7.asArray) == null ? void 0 : _b3[val];
    };
    return getValue(value) ?? getValue(fallback) ?? fallback;
  }
  function getTokenValue(theme2, value, fallback) {
    if (value == null)
      return value;
    const getValue = (val) => {
      var _a7, _b3;
      return (_b3 = (_a7 = theme2.__cssMap) == null ? void 0 : _a7[val]) == null ? void 0 : _b3.value;
    };
    return getValue(value) ?? getValue(fallback) ?? fallback;
  }
  function getToken(scale2, token, fallback) {
    const _token = Array.isArray(token) ? token : [token];
    const _fallback = Array.isArray(fallback) ? fallback : [fallback];
    return (theme2) => {
      const fallbackArr = _fallback.filter(Boolean);
      const result = _token.map((token2, index) => {
        if (scale2 === "breakpoints") {
          return getBreakpointValue(theme2, token2, fallbackArr[index] ?? token2);
        }
        const path = `${scale2}.${token2}`;
        return getTokenValue(theme2, path, fallbackArr[index] ?? token2);
      });
      return Array.isArray(token) ? result : result[0];
    };
  }
  function ThemeProvider(props) {
    const { cssVarsRoot, theme: theme2, children } = props;
    const computedTheme = (0, import_react12.useMemo)(() => toCSSVar(theme2), [theme2]);
    return /* @__PURE__ */ import_react7.default.createElement(import_react11.ThemeProvider, {
      theme: computedTheme
    }, /* @__PURE__ */ import_react7.default.createElement(CSSVars, {
      root: cssVarsRoot
    }), children);
  }
  function CSSVars({ root = ":host, :root" }) {
    const selector2 = [root, `[data-theme]`].join(",");
    return /* @__PURE__ */ import_react7.default.createElement(import_react11.Global, {
      styles: (theme2) => ({ [selector2]: theme2.__cssVars })
    });
  }
  var [StylesProvider, useStyles] = createContext2({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
  });
  function GlobalStyle() {
    const { colorMode } = useColorMode();
    return /* @__PURE__ */ import_react7.default.createElement(import_react11.Global, {
      styles: (theme2) => {
        const styleObjectOrFn = memoizedGet2(theme2, "styles.global");
        const globalStyles = runIfFn2(styleObjectOrFn, { theme: theme2, colorMode });
        if (!globalStyles)
          return void 0;
        const styles2 = css(globalStyles)(theme2);
        return styles2;
      }
    });
  }
  var allPropNames = /* @__PURE__ */ new Set([
    ...propNames,
    "textStyle",
    "layerStyle",
    "apply",
    "noOfLines",
    "focusBorderColor",
    "errorBorderColor",
    "as",
    "__css",
    "css",
    "sx"
  ]);
  var validHTMLProps = /* @__PURE__ */ new Set(["htmlWidth", "htmlHeight", "htmlSize"]);
  function shouldForwardProp(prop) {
    return validHTMLProps.has(prop) || !allPropNames.has(prop);
  }
  var toCSSObject = ({ baseStyle: baseStyle41 }) => (props) => {
    const { theme: theme2, css: cssProp, __css, sx, ...rest } = props;
    const styleProps2 = objectFilter(rest, (_, prop) => isStyleProp(prop));
    const finalBaseStyle = runIfFn2(baseStyle41, props);
    const finalStyles = Object.assign({}, __css, finalBaseStyle, filterUndefined(styleProps2), sx);
    const computedCSS = css(finalStyles)(props.theme);
    return cssProp ? [computedCSS, cssProp] : computedCSS;
  };
  function styled(component, options) {
    const { baseStyle: baseStyle41, ...styledOptions } = options ?? {};
    if (!styledOptions.shouldForwardProp) {
      styledOptions.shouldForwardProp = shouldForwardProp;
    }
    const styleObject = toCSSObject({ baseStyle: baseStyle41 });
    const Component2 = (0, import_styled.default)(component, styledOptions)(styleObject);
    const chakraComponent = import_react13.default.forwardRef(function ChakraComponent(props, ref) {
      const { colorMode, forced } = useColorMode();
      return import_react13.default.createElement(Component2, {
        ref,
        "data-theme": forced ? colorMode : void 0,
        ...props
      });
    });
    return chakraComponent;
  }
  function forwardRef(component) {
    return (0, import_react14.forwardRef)(component);
  }
  function useStyleConfigImpl(themeKey, props = {}) {
    const { styleConfig: styleConfigProp, ...rest } = props;
    const { theme: theme2, colorMode } = useChakra();
    const themeStyleConfig = memoizedGet2(theme2, `components.${themeKey}`);
    const styleConfig = styleConfigProp || themeStyleConfig;
    const mergedProps = (0, import_lodash5.default)({ theme: theme2, colorMode }, (styleConfig == null ? void 0 : styleConfig.defaultProps) ?? {}, filterUndefined(omit2(rest, ["children"])));
    const stylesRef = (0, import_react15.useRef)({});
    if (styleConfig) {
      const getStyles = resolveStyleConfig(styleConfig);
      const styles2 = getStyles(mergedProps);
      const isStyleEqual = (0, import_react_fast_compare.default)(stylesRef.current, styles2);
      if (!isStyleEqual) {
        stylesRef.current = styles2;
      }
    }
    return stylesRef.current;
  }
  function useStyleConfig(themeKey, props = {}) {
    return useStyleConfigImpl(themeKey, props);
  }
  function useMultiStyleConfig(themeKey, props = {}) {
    return useStyleConfigImpl(themeKey, props);
  }
  function factory() {
    const cache = /* @__PURE__ */ new Map();
    return new Proxy(styled, {
      apply(target, thisArg, argArray) {
        return styled(...argArray);
      },
      get(_, element) {
        if (!cache.has(element)) {
          cache.set(element, styled(element));
        }
        return cache.get(element);
      }
    });
  }
  var chakra = factory();

  // ../../node_modules/@chakra-ui/react-context/dist/index.esm.js
  var import_react16 = __toESM(require_react());
  function getErrorMessage(hook, provider) {
    return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
  }
  function createContext3(options = {}) {
    const {
      name,
      strict = true,
      hookName = "useContext",
      providerName = "Provider",
      errorMessage
    } = options;
    const Context = (0, import_react16.createContext)(void 0);
    Context.displayName = name;
    function useContext16() {
      var _a7;
      const context = (0, import_react16.useContext)(Context);
      if (!context && strict) {
        const error = new Error(errorMessage ?? getErrorMessage(hookName, providerName));
        error.name = "ContextError";
        (_a7 = Error.captureStackTrace) == null ? void 0 : _a7.call(Error, error, useContext16);
        throw error;
      }
      return context;
    }
    return [Context.Provider, useContext16, Context];
  }

  // ../../node_modules/@chakra-ui/icon/dist/index.esm.js
  var import_react17 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/shared-utils/dist/index.esm.js
  var cx = (...classNames2) => classNames2.filter(Boolean).join(" ");

  // ../../node_modules/@chakra-ui/icon/dist/index.esm.js
  var import_react18 = __toESM(require_react());
  var fallbackIcon = {
    path: /* @__PURE__ */ import_react17.default.createElement("g", {
      stroke: "currentColor",
      strokeWidth: "1.5"
    }, /* @__PURE__ */ import_react17.default.createElement("path", {
      strokeLinecap: "round",
      fill: "none",
      d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
    }), /* @__PURE__ */ import_react17.default.createElement("path", {
      fill: "currentColor",
      strokeLinecap: "round",
      d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
    }), /* @__PURE__ */ import_react17.default.createElement("circle", {
      fill: "none",
      strokeMiterlimit: "10",
      cx: "12",
      cy: "12",
      r: "11.25"
    })),
    viewBox: "0 0 24 24"
  };
  var Icon = forwardRef((props, ref) => {
    const {
      as: element,
      viewBox,
      color: color3 = "currentColor",
      focusable = false,
      children,
      className,
      __css,
      ...rest
    } = props;
    const _className = cx("chakra-icon", className);
    const styles2 = {
      w: "1em",
      h: "1em",
      display: "inline-block",
      lineHeight: "1em",
      flexShrink: 0,
      color: color3,
      ...__css
    };
    const shared = {
      ref,
      focusable,
      className: _className,
      __css: styles2
    };
    const _viewBox = viewBox ?? fallbackIcon.viewBox;
    if (element && typeof element !== "string") {
      return /* @__PURE__ */ import_react17.default.createElement(chakra.svg, {
        as: element,
        ...shared,
        ...rest
      });
    }
    const _path = children ?? fallbackIcon.path;
    return /* @__PURE__ */ import_react17.default.createElement(chakra.svg, {
      verticalAlign: "middle",
      viewBox: _viewBox,
      ...shared,
      ...rest
    }, _path);
  });
  Icon.displayName = "Icon";

  // ../../node_modules/@chakra-ui/react-use-callback-ref/dist/index.esm.js
  var import_react19 = __toESM(require_react());
  function useCallbackRef(callback, deps = []) {
    const callbackRef = (0, import_react19.useRef)(callback);
    (0, import_react19.useEffect)(() => {
      callbackRef.current = callback;
    });
    return (0, import_react19.useCallback)((...args) => {
      var _a7;
      return (_a7 = callbackRef.current) == null ? void 0 : _a7.call(callbackRef, ...args);
    }, deps);
  }

  // ../../node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
  } = import_tslib.default;

  // ../../node_modules/framer-motion/dist/es/motion/index.js
  var React5 = __toESM(require_react());
  var import_react32 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/motion/features/use-features.js
  var React4 = __toESM(require_react());
  var import_react21 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/motion/features/definitions.js
  var createDefinition = function(propNames2) {
    return {
      isEnabled: function(props) {
        return propNames2.some(function(name) {
          return !!props[name];
        });
      }
    };
  };
  var featureDefinitions = {
    measureLayout: createDefinition([
      "layout",
      "layoutId",
      "drag",
      "_layoutResetTransform"
    ]),
    animation: createDefinition([
      "animate",
      "exit",
      "variants",
      "whileHover",
      "whileTap",
      "whileFocus",
      "whileDrag"
    ]),
    exit: createDefinition(["exit"]),
    drag: createDefinition(["drag", "dragControls"]),
    focus: createDefinition(["whileFocus"]),
    hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
    tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
    pan: createDefinition([
      "onPan",
      "onPanStart",
      "onPanSessionStart",
      "onPanEnd"
    ]),
    layoutAnimation: createDefinition(["layout", "layoutId"])
  };
  function loadFeatures(features) {
    for (var key in features) {
      var Component2 = features[key];
      if (Component2 !== null)
        featureDefinitions[key].Component = Component2;
    }
  }

  // ../../node_modules/hey-listen/dist/hey-listen.es.js
  var warning = function() {
  };
  var invariant = function() {
  };
  if (true) {
    warning = function(check, message) {
      if (!check && typeof console !== "undefined") {
        console.warn(message);
      }
    };
    invariant = function(check, message) {
      if (!check) {
        throw new Error(message);
      }
    };
  }

  // ../../node_modules/framer-motion/dist/es/context/LazyContext.js
  var import_react20 = __toESM(require_react());
  var LazyContext = (0, import_react20.createContext)({ strict: false });

  // ../../node_modules/framer-motion/dist/es/motion/features/use-features.js
  var featureNames = Object.keys(featureDefinitions);
  var numFeatures = featureNames.length;
  function useFeatures(props, visualElement2, preloadedFeatures) {
    var features = [];
    var lazyContext = (0, import_react21.useContext)(LazyContext);
    if (!visualElement2)
      return null;
    if (preloadedFeatures && lazyContext.strict) {
      invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
    }
    for (var i = 0; i < numFeatures; i++) {
      var name_1 = featureNames[i];
      var _a7 = featureDefinitions[name_1], isEnabled = _a7.isEnabled, Component2 = _a7.Component;
      if (isEnabled(props) && Component2) {
        features.push(React4.createElement(Component2, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
      }
    }
    return features;
  }

  // ../../node_modules/framer-motion/dist/es/context/MotionConfigContext.js
  var import_react22 = __toESM(require_react());
  var MotionConfigContext = (0, import_react22.createContext)({
    transformPagePoint: function(p) {
      return p;
    },
    isStatic: false
  });

  // ../../node_modules/framer-motion/dist/es/context/MotionContext/index.js
  var import_react23 = __toESM(require_react());
  var MotionContext = (0, import_react23.createContext)({});
  function useVisualElementContext() {
    return (0, import_react23.useContext)(MotionContext).visualElement;
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
  var import_react29 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/context/PresenceContext.js
  var import_react24 = __toESM(require_react());
  var PresenceContext = (0, import_react24.createContext)(null);

  // ../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
  var import_react26 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/utils/use-constant.js
  var import_react25 = __toESM(require_react());
  function useConstant(init) {
    var ref = (0, import_react25.useRef)(null);
    if (ref.current === null) {
      ref.current = init();
    }
    return ref.current;
  }

  // ../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
  function usePresence() {
    var context = (0, import_react26.useContext)(PresenceContext);
    if (context === null)
      return [true, null];
    var isPresent2 = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
    var id = useUniqueId();
    (0, import_react26.useEffect)(function() {
      return register(id);
    }, []);
    var safeToRemove = function() {
      return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);
    };
    return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
  }
  function useIsPresent() {
    return isPresent((0, import_react26.useContext)(PresenceContext));
  }
  function isPresent(context) {
    return context === null ? true : context.isPresent;
  }
  var counter = 0;
  var incrementId = function() {
    return counter++;
  };
  var useUniqueId = function() {
    return useConstant(incrementId);
  };

  // ../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.js
  var import_react27 = __toESM(require_react());
  var LayoutGroupContext = (0, import_react27.createContext)(null);

  // ../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
  var import_react28 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/utils/is-browser.js
  var isBrowser = typeof window !== "undefined";

  // ../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
  var useIsomorphicLayoutEffect = isBrowser ? import_react28.useLayoutEffect : import_react28.useEffect;

  // ../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
  function useLayoutId(_a7) {
    var layoutId = _a7.layoutId;
    var layoutGroupId = (0, import_react29.useContext)(LayoutGroupContext);
    return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
  }
  function useVisualElement(Component2, visualState, props, createVisualElement) {
    var config2 = (0, import_react29.useContext)(MotionConfigContext);
    var lazyContext = (0, import_react29.useContext)(LazyContext);
    var parent = useVisualElementContext();
    var presenceContext = (0, import_react29.useContext)(PresenceContext);
    var layoutId = useLayoutId(props);
    var visualElementRef = (0, import_react29.useRef)(void 0);
    if (!createVisualElement)
      createVisualElement = lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) {
      visualElementRef.current = createVisualElement(Component2, {
        visualState,
        parent,
        props: __assign(__assign({}, props), { layoutId }),
        presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
        blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false
      });
    }
    var visualElement2 = visualElementRef.current;
    useIsomorphicLayoutEffect(function() {
      if (!visualElement2)
        return;
      visualElement2.setProps(__assign(__assign(__assign({}, config2), props), { layoutId }));
      visualElement2.isPresent = isPresent(presenceContext);
      visualElement2.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);
      visualElement2.syncRender();
    });
    (0, import_react29.useEffect)(function() {
      var _a7;
      if (!visualElement2)
        return;
      (_a7 = visualElement2.animationState) === null || _a7 === void 0 ? void 0 : _a7.animateChanges();
    });
    useIsomorphicLayoutEffect(function() {
      return function() {
        return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
      };
    }, []);
    return visualElement2;
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
  var import_react30 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/utils/is-ref-object.js
  function isRefObject(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
  function useMotionRef(visualState, visualElement2, externalRef) {
    return (0, import_react30.useCallback)(function(instance) {
      var _a7;
      instance && ((_a7 = visualState.mount) === null || _a7 === void 0 ? void 0 : _a7.call(visualState, instance));
      if (visualElement2) {
        instance ? visualElement2.mount(instance) : visualElement2.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    }, [visualElement2]);
  }

  // ../../node_modules/framer-motion/dist/es/context/MotionContext/create.js
  var import_react31 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/render/utils/variants.js
  function isVariantLabels(v) {
    return Array.isArray(v);
  }
  function isVariantLabel(v) {
    return typeof v === "string" || isVariantLabels(v);
  }
  function getCurrent(visualElement2) {
    var current = {};
    visualElement2.forEachValue(function(value, key) {
      return current[key] = value.get();
    });
    return current;
  }
  function getVelocity(visualElement2) {
    var velocity = {};
    visualElement2.forEachValue(function(value, key) {
      return velocity[key] = value.getVelocity();
    });
    return velocity;
  }
  function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
    var _a7;
    if (currentValues === void 0) {
      currentValues = {};
    }
    if (currentVelocity === void 0) {
      currentVelocity = {};
    }
    if (typeof definition === "string") {
      definition = (_a7 = props.variants) === null || _a7 === void 0 ? void 0 : _a7[definition];
    }
    return typeof definition === "function" ? definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity) : definition;
  }
  function resolveVariant(visualElement2, definition, custom) {
    var props = visualElement2.getProps();
    return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
  }
  function checkIfControllingVariants(props) {
    var _a7;
    return typeof ((_a7 = props.animate) === null || _a7 === void 0 ? void 0 : _a7.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
  }
  function checkIfVariantNode(props) {
    return Boolean(checkIfControllingVariants(props) || props.variants);
  }

  // ../../node_modules/framer-motion/dist/es/context/MotionContext/utils.js
  function getCurrentTreeVariants(props, context) {
    if (checkIfControllingVariants(props)) {
      var initial = props.initial, animate2 = props.animate;
      return {
        initial: initial === false || isVariantLabel(initial) ? initial : void 0,
        animate: isVariantLabel(animate2) ? animate2 : void 0
      };
    }
    return props.inherit !== false ? context : {};
  }

  // ../../node_modules/framer-motion/dist/es/context/MotionContext/create.js
  function useCreateMotionContext(props, isStatic) {
    var _a7 = getCurrentTreeVariants(props, (0, import_react31.useContext)(MotionContext)), initial = _a7.initial, animate2 = _a7.animate;
    return (0, import_react31.useMemo)(function() {
      return { initial, animate: animate2 };
    }, isStatic ? [
      variantLabelsAsDependency(initial),
      variantLabelsAsDependency(animate2)
    ] : []);
  }
  function variantLabelsAsDependency(prop) {
    return Array.isArray(prop) ? prop.join(" ") : prop;
  }

  // ../../node_modules/framer-motion/dist/es/motion/index.js
  function createMotionComponent(_a7) {
    var preloadedFeatures = _a7.preloadedFeatures, createVisualElement = _a7.createVisualElement, useRender = _a7.useRender, useVisualState = _a7.useVisualState, Component2 = _a7.Component;
    preloadedFeatures && loadFeatures(preloadedFeatures);
    function MotionComponent(props, externalRef) {
      var isStatic = (0, import_react32.useContext)(MotionConfigContext).isStatic;
      var features = null;
      var context = useCreateMotionContext(props, isStatic);
      var visualState = useVisualState(props, isStatic);
      if (!isStatic && isBrowser) {
        context.visualElement = useVisualElement(Component2, visualState, props, createVisualElement);
        features = useFeatures(props, context.visualElement, preloadedFeatures);
      }
      return React5.createElement(React5.Fragment, null, React5.createElement(MotionContext.Provider, { value: context }, useRender(Component2, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic)), features);
    }
    return (0, import_react32.forwardRef)(MotionComponent);
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/motion-proxy.js
  function createMotionProxy(createConfig) {
    function custom(Component2, customMotionComponentConfig) {
      if (customMotionComponentConfig === void 0) {
        customMotionComponentConfig = {};
      }
      return createMotionComponent(createConfig(Component2, customMotionComponentConfig));
    }
    var componentCache = /* @__PURE__ */ new Map();
    return new Proxy(custom, {
      get: function(_target, key) {
        if (!componentCache.has(key)) {
          componentCache.set(key, custom(key));
        }
        return componentCache.get(key);
      }
    });
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js
  var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "tspan",
    "use",
    "view"
  ];

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js
  function isSVGComponent(Component2) {
    if (typeof Component2 !== "string" || Component2.includes("-")) {
      return false;
    } else if (lowercaseSVGElements.indexOf(Component2) > -1 || /[A-Z]/.test(Component2)) {
      return true;
    }
    return false;
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/use-render.js
  var import_react35 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/render/html/use-props.js
  var import_react33 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/render/dom/projection/scale-correction.js
  var valueScaleCorrection = {};
  function addScaleCorrection(correctors) {
    for (var key in correctors) {
      valueScaleCorrection[key] = correctors[key];
    }
  }

  // ../../node_modules/framer-motion/dist/es/render/html/utils/transform.js
  var transformAxes = ["", "X", "Y", "Z"];
  var order = ["translate", "scale", "rotate", "skew"];
  var transformProps = ["transformPerspective", "x", "y", "z"];
  order.forEach(function(operationKey) {
    return transformAxes.forEach(function(axesKey) {
      return transformProps.push(operationKey + axesKey);
    });
  });
  function sortTransformProps(a2, b2) {
    return transformProps.indexOf(a2) - transformProps.indexOf(b2);
  }
  var transformPropSet = new Set(transformProps);
  function isTransformProp(key) {
    return transformPropSet.has(key);
  }
  var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
  function isTransformOriginProp(key) {
    return transformOriginProps.has(key);
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js
  function isForcedMotionValue(key, _a7) {
    var layout2 = _a7.layout, layoutId = _a7.layoutId;
    return isTransformProp(key) || isTransformOriginProp(key) || (layout2 || layoutId !== void 0) && (!!valueScaleCorrection[key] || key === "opacity");
  }

  // ../../node_modules/framer-motion/dist/es/value/utils/is-motion-value.js
  var isMotionValue = function(value) {
    return value !== null && typeof value === "object" && value.getVelocity;
  };

  // ../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.js
  var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
  };
  function buildTransform(_a7, _b3, transformIsDefault, transformTemplate2) {
    var transform2 = _a7.transform, transformKeys2 = _a7.transformKeys;
    var _c3 = _b3.enableHardwareAcceleration, enableHardwareAcceleration = _c3 === void 0 ? true : _c3, _d3 = _b3.allowTransformNone, allowTransformNone = _d3 === void 0 ? true : _d3;
    var transformString = "";
    transformKeys2.sort(sortTransformProps);
    var transformHasZ = false;
    var numTransformKeys = transformKeys2.length;
    for (var i = 0; i < numTransformKeys; i++) {
      var key = transformKeys2[i];
      transformString += (translateAlias[key] || key) + "(" + transform2[key] + ") ";
      if (key === "z")
        transformHasZ = true;
    }
    if (!transformHasZ && enableHardwareAcceleration) {
      transformString += "translateZ(0)";
    } else {
      transformString = transformString.trim();
    }
    if (transformTemplate2) {
      transformString = transformTemplate2(transform2, transformIsDefault ? "" : transformString);
    } else if (allowTransformNone && transformIsDefault) {
      transformString = "none";
    }
    return transformString;
  }
  function buildTransformOrigin(_a7) {
    var _b3 = _a7.originX, originX = _b3 === void 0 ? "50%" : _b3, _c3 = _a7.originY, originY = _c3 === void 0 ? "50%" : _c3, _d3 = _a7.originZ, originZ = _d3 === void 0 ? 0 : _d3;
    return originX + " " + originY + " " + originZ;
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js
  function isCSSVariable(key) {
    return key.startsWith("--");
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js
  var getValueAsType = function(value, type) {
    return type && typeof value === "number" ? type.transform(value) : value;
  };

  // ../../node_modules/style-value-types/dist/es/utils.js
  var clamp = function(min, max) {
    return function(v) {
      return Math.max(Math.min(v, max), min);
    };
  };
  var sanitize = function(v) {
    return v % 1 ? Number(v.toFixed(5)) : v;
  };
  var floatRegex = /(-)?([\d]*\.?[\d])+/g;
  var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
  var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
  function isString(v) {
    return typeof v === "string";
  }

  // ../../node_modules/style-value-types/dist/es/numbers/index.js
  var number = {
    test: function(v) {
      return typeof v === "number";
    },
    parse: parseFloat,
    transform: function(v) {
      return v;
    }
  };
  var alpha = __assign(__assign({}, number), { transform: clamp(0, 1) });
  var scale = __assign(__assign({}, number), { default: 1 });

  // ../../node_modules/style-value-types/dist/es/numbers/units.js
  var createUnitType = function(unit) {
    return {
      test: function(v) {
        return isString(v) && v.endsWith(unit) && v.split(" ").length === 1;
      },
      parse: parseFloat,
      transform: function(v) {
        return "" + v + unit;
      }
    };
  };
  var degrees = createUnitType("deg");
  var percent = createUnitType("%");
  var px2 = createUnitType("px");
  var vh = createUnitType("vh");
  var vw = createUnitType("vw");
  var progressPercentage = __assign(__assign({}, percent), { parse: function(v) {
    return percent.parse(v) / 100;
  }, transform: function(v) {
    return percent.transform(v * 100);
  } });

  // ../../node_modules/style-value-types/dist/es/color/utils.js
  var isColorString = function(type, testProp) {
    return function(v) {
      return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
    };
  };
  var splitColor = function(aName, bName, cName) {
    return function(v) {
      var _a7;
      if (!isString(v))
        return v;
      var _b3 = v.match(floatRegex), a2 = _b3[0], b2 = _b3[1], c2 = _b3[2], alpha2 = _b3[3];
      return _a7 = {}, _a7[aName] = parseFloat(a2), _a7[bName] = parseFloat(b2), _a7[cName] = parseFloat(c2), _a7.alpha = alpha2 !== void 0 ? parseFloat(alpha2) : 1, _a7;
    };
  };

  // ../../node_modules/style-value-types/dist/es/color/hsla.js
  var hsla = {
    test: isColorString("hsl", "hue"),
    parse: splitColor("hue", "saturation", "lightness"),
    transform: function(_a7) {
      var hue = _a7.hue, saturation = _a7.saturation, lightness = _a7.lightness, _b3 = _a7.alpha, alpha$1 = _b3 === void 0 ? 1 : _b3;
      return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // ../../node_modules/style-value-types/dist/es/color/rgba.js
  var clampRgbUnit = clamp(0, 255);
  var rgbUnit = __assign(__assign({}, number), { transform: function(v) {
    return Math.round(clampRgbUnit(v));
  } });
  var rgba = {
    test: isColorString("rgb", "red"),
    parse: splitColor("red", "green", "blue"),
    transform: function(_a7) {
      var red = _a7.red, green = _a7.green, blue = _a7.blue, _b3 = _a7.alpha, alpha$1 = _b3 === void 0 ? 1 : _b3;
      return "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // ../../node_modules/style-value-types/dist/es/color/hex.js
  function parseHex(v) {
    var r = "";
    var g = "";
    var b2 = "";
    var a2 = "";
    if (v.length > 5) {
      r = v.substr(1, 2);
      g = v.substr(3, 2);
      b2 = v.substr(5, 2);
      a2 = v.substr(7, 2);
    } else {
      r = v.substr(1, 1);
      g = v.substr(2, 1);
      b2 = v.substr(3, 1);
      a2 = v.substr(4, 1);
      r += r;
      g += g;
      b2 += b2;
      a2 += a2;
    }
    return {
      red: parseInt(r, 16),
      green: parseInt(g, 16),
      blue: parseInt(b2, 16),
      alpha: a2 ? parseInt(a2, 16) / 255 : 1
    };
  }
  var hex = {
    test: isColorString("#"),
    parse: parseHex,
    transform: rgba.transform
  };

  // ../../node_modules/style-value-types/dist/es/color/index.js
  var color2 = {
    test: function(v) {
      return rgba.test(v) || hex.test(v) || hsla.test(v);
    },
    parse: function(v) {
      if (rgba.test(v)) {
        return rgba.parse(v);
      } else if (hsla.test(v)) {
        return hsla.parse(v);
      } else {
        return hex.parse(v);
      }
    },
    transform: function(v) {
      return isString(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
    }
  };

  // ../../node_modules/style-value-types/dist/es/complex/index.js
  var colorToken = "${c}";
  var numberToken = "${n}";
  function test(v) {
    var _a7, _b3, _c3, _d3;
    return isNaN(v) && isString(v) && ((_b3 = (_a7 = v.match(floatRegex)) === null || _a7 === void 0 ? void 0 : _a7.length) !== null && _b3 !== void 0 ? _b3 : 0) + ((_d3 = (_c3 = v.match(colorRegex)) === null || _c3 === void 0 ? void 0 : _c3.length) !== null && _d3 !== void 0 ? _d3 : 0) > 0;
  }
  function analyse(v) {
    var values = [];
    var numColors = 0;
    var colors2 = v.match(colorRegex);
    if (colors2) {
      numColors = colors2.length;
      v = v.replace(colorRegex, colorToken);
      values.push.apply(values, colors2.map(color2.parse));
    }
    var numbers = v.match(floatRegex);
    if (numbers) {
      v = v.replace(floatRegex, numberToken);
      values.push.apply(values, numbers.map(number.parse));
    }
    return { values, numColors, tokenised: v };
  }
  function parse(v) {
    return analyse(v).values;
  }
  function createTransformer(v) {
    var _a7 = analyse(v), values = _a7.values, numColors = _a7.numColors, tokenised = _a7.tokenised;
    var numValues = values.length;
    return function(v2) {
      var output = tokenised;
      for (var i = 0; i < numValues; i++) {
        output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color2.transform(v2[i]) : sanitize(v2[i]));
      }
      return output;
    };
  }
  var convertNumbersToZero = function(v) {
    return typeof v === "number" ? 0 : v;
  };
  function getAnimatableNone(v) {
    var parsed = parse(v);
    var transformer = createTransformer(v);
    return transformer(parsed.map(convertNumbersToZero));
  }
  var complex = { test, parse, createTransformer, getAnimatableNone };

  // ../../node_modules/style-value-types/dist/es/complex/filter.js
  var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v) {
    var _a7 = v.slice(0, -1).split("("), name = _a7[0], value = _a7[1];
    if (name === "drop-shadow")
      return v;
    var number2 = (value.match(floatRegex) || [])[0];
    if (!number2)
      return v;
    var unit = value.replace(number2, "");
    var defaultValue = maxDefaults.has(name) ? 1 : 0;
    if (number2 !== value)
      defaultValue *= 100;
    return name + "(" + defaultValue + unit + ")";
  }
  var functionRegex = /([a-z-]*)\(.*?\)/g;
  var filter2 = __assign(__assign({}, complex), { getAnimatableNone: function(v) {
    var functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  } });

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js
  var int = __assign(__assign({}, number), { transform: Math.round });

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/number.js
  var numberValueTypes = {
    borderWidth: px2,
    borderTopWidth: px2,
    borderRightWidth: px2,
    borderBottomWidth: px2,
    borderLeftWidth: px2,
    borderRadius: px2,
    radius: px2,
    borderTopLeftRadius: px2,
    borderTopRightRadius: px2,
    borderBottomRightRadius: px2,
    borderBottomLeftRadius: px2,
    width: px2,
    maxWidth: px2,
    height: px2,
    maxHeight: px2,
    size: px2,
    top: px2,
    right: px2,
    bottom: px2,
    left: px2,
    padding: px2,
    paddingTop: px2,
    paddingRight: px2,
    paddingBottom: px2,
    paddingLeft: px2,
    margin: px2,
    marginTop: px2,
    marginRight: px2,
    marginBottom: px2,
    marginLeft: px2,
    rotate: degrees,
    rotateX: degrees,
    rotateY: degrees,
    rotateZ: degrees,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees,
    skewX: degrees,
    skewY: degrees,
    distance: px2,
    translateX: px2,
    translateY: px2,
    translateZ: px2,
    x: px2,
    y: px2,
    z: px2,
    perspective: px2,
    transformPerspective: px2,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px2,
    zIndex: int,
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
  };

  // ../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.js
  function buildHTMLStyles(state2, latestValues, projection, layoutState, options, transformTemplate2, buildProjectionTransform, buildProjectionTransformOrigin) {
    var _a7;
    var style = state2.style, vars = state2.vars, transform2 = state2.transform, transformKeys2 = state2.transformKeys, transformOrigin = state2.transformOrigin;
    transformKeys2.length = 0;
    var hasTransform = false;
    var hasTransformOrigin = false;
    var transformIsNone = true;
    for (var key in latestValues) {
      var value = latestValues[key];
      if (isCSSVariable(key)) {
        vars[key] = value;
        continue;
      }
      var valueType = numberValueTypes[key];
      var valueAsType = getValueAsType(value, valueType);
      if (isTransformProp(key)) {
        hasTransform = true;
        transform2[key] = valueAsType;
        transformKeys2.push(key);
        if (!transformIsNone)
          continue;
        if (value !== ((_a7 = valueType.default) !== null && _a7 !== void 0 ? _a7 : 0))
          transformIsNone = false;
      } else if (isTransformOriginProp(key)) {
        transformOrigin[key] = valueAsType;
        hasTransformOrigin = true;
      } else {
        if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) && (layoutState === null || layoutState === void 0 ? void 0 : layoutState.isHydrated) && valueScaleCorrection[key]) {
          var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);
          var applyTo = valueScaleCorrection[key].applyTo;
          if (applyTo) {
            var num = applyTo.length;
            for (var i = 0; i < num; i++) {
              style[applyTo[i]] = correctedValue;
            }
          } else {
            style[key] = correctedValue;
          }
        } else {
          style[key] = valueAsType;
        }
      }
    }
    if (layoutState && projection && buildProjectionTransform && buildProjectionTransformOrigin) {
      style.transform = buildProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform2 : void 0);
      if (transformTemplate2) {
        style.transform = transformTemplate2(transform2, style.transform);
      }
      style.transformOrigin = buildProjectionTransformOrigin(layoutState);
    } else {
      if (hasTransform) {
        style.transform = buildTransform(state2, options, transformIsNone, transformTemplate2);
      }
      if (hasTransformOrigin) {
        style.transformOrigin = buildTransformOrigin(transformOrigin);
      }
    }
  }

  // ../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js
  var createHtmlRenderState = function() {
    return {
      style: {},
      transform: {},
      transformKeys: [],
      transformOrigin: {},
      vars: {}
    };
  };

  // ../../node_modules/framer-motion/dist/es/render/html/use-props.js
  function copyRawValuesOnly(target, source, props) {
    for (var key in source) {
      if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
        target[key] = source[key];
      }
    }
  }
  function useInitialMotionValues(_a7, visualState, isStatic) {
    var transformTemplate2 = _a7.transformTemplate;
    return (0, import_react33.useMemo)(function() {
      var state2 = createHtmlRenderState();
      buildHTMLStyles(state2, visualState, void 0, void 0, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
      var vars = state2.vars, style = state2.style;
      return __assign(__assign({}, vars), style);
    }, [visualState]);
  }
  function useStyle(props, visualState, isStatic) {
    var styleProp = props.style || {};
    var style = {};
    copyRawValuesOnly(style, styleProp, props);
    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
    if (props.transformValues) {
      style = props.transformValues(style);
    }
    return style;
  }
  function useHTMLProps(props, visualState, isStatic) {
    var htmlProps = {};
    var style = useStyle(props, visualState, isStatic);
    if (Boolean(props.drag)) {
      htmlProps.draggable = false;
      style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
      style.touchAction = props.drag === true ? "none" : "pan-" + (props.drag === "x" ? "y" : "x");
    }
    htmlProps.style = style;
    return htmlProps;
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.js
  var validMotionProps = /* @__PURE__ */ new Set([
    "initial",
    "animate",
    "exit",
    "style",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "layout",
    "layoutId",
    "_layoutResetTransform",
    "onLayoutAnimationComplete",
    "onViewportBoxUpdate",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "drag",
    "dragControls",
    "dragListener",
    "dragConstraints",
    "dragDirectionLock",
    "_dragX",
    "_dragY",
    "dragElastic",
    "dragMomentum",
    "dragPropagation",
    "dragTransition",
    "whileDrag",
    "onPan",
    "onPanStart",
    "onPanEnd",
    "onPanSessionStart",
    "onTap",
    "onTapStart",
    "onTapCancel",
    "onHoverStart",
    "onHoverEnd",
    "whileFocus",
    "whileTap",
    "whileHover"
  ]);
  function isValidMotionProp(key) {
    return validMotionProps.has(key);
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js
  var shouldForward = function(key) {
    return !isValidMotionProp(key);
  };
  try {
    emotionIsPropValid_1 = require_is_prop_valid_browser_cjs().default;
    shouldForward = function(key) {
      if (key.startsWith("on")) {
        return !isValidMotionProp(key);
      } else {
        return emotionIsPropValid_1(key);
      }
    };
  } catch (_a7) {
  }
  var emotionIsPropValid_1;
  function filterProps(props, isDom, forwardMotionProps) {
    var filteredProps = {};
    for (var key in props) {
      if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key)) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/use-props.js
  var import_react34 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js
  function calcOrigin(origin, offset, size2) {
    return typeof origin === "string" ? origin : px2.transform(offset + size2 * origin);
  }
  function calcSVGTransformOrigin(dimensions, originX, originY) {
    var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return pxOriginX + " " + pxOriginY;
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/path.js
  var progressToPixels = function(progress2, length) {
    return px2.transform(progress2 * length);
  };
  var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
  };
  var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
  };
  function buildSVGPath(attrs, totalLength, length, spacing2, offset, useDashCase) {
    if (spacing2 === void 0) {
      spacing2 = 1;
    }
    if (offset === void 0) {
      offset = 0;
    }
    if (useDashCase === void 0) {
      useDashCase = true;
    }
    var keys2 = useDashCase ? dashKeys : camelKeys;
    attrs[keys2.offset] = progressToPixels(-offset, totalLength);
    var pathLength = progressToPixels(length, totalLength);
    var pathSpacing = progressToPixels(spacing2, totalLength);
    attrs[keys2.array] = pathLength + " " + pathSpacing;
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js
  function buildSVGAttrs(state2, _a7, projection, layoutState, options, transformTemplate2, buildProjectionTransform, buildProjectionTransformOrigin) {
    var attrX = _a7.attrX, attrY = _a7.attrY, originX = _a7.originX, originY = _a7.originY, pathLength = _a7.pathLength, _b3 = _a7.pathSpacing, pathSpacing = _b3 === void 0 ? 1 : _b3, _c3 = _a7.pathOffset, pathOffset = _c3 === void 0 ? 0 : _c3, latest = __rest(_a7, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
    buildHTMLStyles(state2, latest, projection, layoutState, options, transformTemplate2, buildProjectionTransform, buildProjectionTransformOrigin);
    state2.attrs = state2.style;
    state2.style = {};
    var attrs = state2.attrs, style = state2.style, dimensions = state2.dimensions, totalPathLength = state2.totalPathLength;
    if (attrs.transform) {
      if (dimensions)
        style.transform = attrs.transform;
      delete attrs.transform;
    }
    if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
      style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
    }
    if (attrX !== void 0)
      attrs.x = attrX;
    if (attrY !== void 0)
      attrs.y = attrY;
    if (totalPathLength !== void 0 && pathLength !== void 0) {
      buildSVGPath(attrs, totalPathLength, pathLength, pathSpacing, pathOffset, false);
    }
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js
  var createSvgRenderState = function() {
    return __assign(__assign({}, createHtmlRenderState()), { attrs: {} });
  };

  // ../../node_modules/framer-motion/dist/es/render/svg/use-props.js
  function useSVGProps(props, visualState) {
    var visualProps = (0, import_react34.useMemo)(function() {
      var state2 = createSvgRenderState();
      buildSVGAttrs(state2, visualState, void 0, void 0, { enableHardwareAcceleration: false }, props.transformTemplate);
      return __assign(__assign({}, state2.attrs), { style: __assign({}, state2.style) });
    }, [visualState]);
    if (props.style) {
      var rawStyles = {};
      copyRawValuesOnly(rawStyles, props.style, props);
      visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
    }
    return visualProps;
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/use-render.js
  function createUseRender(forwardMotionProps) {
    if (forwardMotionProps === void 0) {
      forwardMotionProps = false;
    }
    var useRender = function(Component2, props, ref, _a7, isStatic) {
      var latestValues = _a7.latestValues;
      var useVisualProps = isSVGComponent(Component2) ? useSVGProps : useHTMLProps;
      var visualProps = useVisualProps(props, latestValues, isStatic);
      var filteredProps = filterProps(props, typeof Component2 === "string", forwardMotionProps);
      var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
      return (0, import_react35.createElement)(Component2, elementProps);
    };
    return useRender;
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js
  var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
  var REPLACE_TEMPLATE = "$1-$2";
  var camelToDash = function(str) {
    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
  };

  // ../../node_modules/framer-motion/dist/es/render/html/utils/render.js
  function renderHTML(element, _a7) {
    var style = _a7.style, vars = _a7.vars;
    Object.assign(element.style, style);
    for (var key in vars) {
      element.style.setProperty(key, vars[key]);
    }
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js
  var camelCaseAttributes = /* @__PURE__ */ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform"
  ]);

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/render.js
  function renderSVG(element, renderState) {
    renderHTML(element, renderState);
    for (var key in renderState.attrs) {
      element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
    }
  }

  // ../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js
  function scrapeMotionValuesFromProps(props) {
    var style = props.style;
    var newValues = {};
    for (var key in style) {
      if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {
        newValues[key] = style[key];
      }
    }
    return newValues;
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js
  function scrapeMotionValuesFromProps2(props) {
    var newValues = scrapeMotionValuesFromProps(props);
    for (var key in props) {
      if (isMotionValue(props[key])) {
        var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
        newValues[targetKey] = props[key];
      }
    }
    return newValues;
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
  var import_react36 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js
  function isAnimationControls(v) {
    return typeof v === "object" && typeof v.start === "function";
  }

  // ../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js
  var isKeyframesTarget = function(v) {
    return Array.isArray(v);
  };

  // ../../node_modules/framer-motion/dist/es/utils/resolve-value.js
  var isCustomValue = function(v) {
    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
  };
  var resolveFinalValueInKeyframes = function(v) {
    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
  };

  // ../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js
  function resolveMotionValue(value) {
    var unwrappedValue = isMotionValue(value) ? value.get() : value;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
  function makeState(_a7, props, context, presenceContext) {
    var scrapeMotionValuesFromProps3 = _a7.scrapeMotionValuesFromProps, createRenderState = _a7.createRenderState, onMount = _a7.onMount;
    var state2 = {
      latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
      renderState: createRenderState()
    };
    if (onMount) {
      state2.mount = function(instance) {
        return onMount(props, instance, state2);
      };
    }
    return state2;
  }
  var makeUseVisualState = function(config2) {
    return function(props, isStatic) {
      var context = (0, import_react36.useContext)(MotionContext);
      var presenceContext = (0, import_react36.useContext)(PresenceContext);
      return isStatic ? makeState(config2, props, context, presenceContext) : useConstant(function() {
        return makeState(config2, props, context, presenceContext);
      });
    };
  };
  function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    var values = {};
    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
    var motionValues = scrapeMotionValues(props);
    for (var key in motionValues) {
      values[key] = resolveMotionValue(motionValues[key]);
    }
    var initial = props.initial, animate2 = props.animate;
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
      initial !== null && initial !== void 0 ? initial : initial = context.initial;
      animate2 !== null && animate2 !== void 0 ? animate2 : animate2 = context.animate;
    }
    var variantToSet = blockInitialAnimation || initial === false ? animate2 : initial;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
      var list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
      list2.forEach(function(definition) {
        var resolved = resolveVariantFromProps(props, definition);
        if (!resolved)
          return;
        var transitionEnd = resolved.transitionEnd;
        resolved.transition;
        var target = __rest(resolved, ["transitionEnd", "transition"]);
        for (var key2 in target)
          values[key2] = target[key2];
        for (var key2 in transitionEnd)
          values[key2] = transitionEnd[key2];
      });
    }
    return values;
  }

  // ../../node_modules/framer-motion/dist/es/render/svg/config-motion.js
  var svgMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      createRenderState: createSvgRenderState,
      onMount: function(props, instance, _a7) {
        var renderState = _a7.renderState, latestValues = _a7.latestValues;
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        if (isPath(instance)) {
          renderState.totalPathLength = instance.getTotalLength();
        }
        buildSVGAttrs(renderState, latestValues, void 0, void 0, { enableHardwareAcceleration: false }, props.transformTemplate);
        renderSVG(instance, renderState);
      }
    })
  };
  function isPath(element) {
    return element.tagName === "path";
  }

  // ../../node_modules/framer-motion/dist/es/render/html/config-motion.js
  var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps,
      createRenderState: createHtmlRenderState
    })
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/create-config.js
  function createDomMotionConfig(Component2, _a7, preloadedFeatures, createVisualElement) {
    var _b3 = _a7.forwardMotionProps, forwardMotionProps = _b3 === void 0 ? false : _b3;
    var baseConfig = isSVGComponent(Component2) ? svgMotionConfig : htmlMotionConfig;
    return __assign(__assign({}, baseConfig), {
      preloadedFeatures,
      useRender: createUseRender(forwardMotionProps),
      createVisualElement,
      Component: Component2
    });
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/types.js
  var AnimationType;
  (function(AnimationType2) {
    AnimationType2["Animate"] = "animate";
    AnimationType2["Hover"] = "whileHover";
    AnimationType2["Tap"] = "whileTap";
    AnimationType2["Drag"] = "whileDrag";
    AnimationType2["Focus"] = "whileFocus";
    AnimationType2["Exit"] = "exit";
  })(AnimationType || (AnimationType = {}));

  // ../../node_modules/framer-motion/dist/es/events/use-dom-event.js
  var import_react37 = __toESM(require_react());
  function addDomEvent(target, eventName, handler, options) {
    target.addEventListener(eventName, handler, options);
    return function() {
      return target.removeEventListener(eventName, handler, options);
    };
  }
  function useDomEvent(ref, eventName, handler, options) {
    (0, import_react37.useEffect)(function() {
      var element = ref.current;
      if (handler && element) {
        return addDomEvent(element, eventName, handler, options);
      }
    }, [ref, eventName, handler, options]);
  }

  // ../../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js
  function useFocusGesture(_a7) {
    var whileFocus = _a7.whileFocus, visualElement2 = _a7.visualElement;
    var onFocus = function() {
      var _a8;
      (_a8 = visualElement2.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(AnimationType.Focus, true);
    };
    var onBlur = function() {
      var _a8;
      (_a8 = visualElement2.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(AnimationType.Focus, false);
    };
    useDomEvent(visualElement2, "focus", whileFocus ? onFocus : void 0);
    useDomEvent(visualElement2, "blur", whileFocus ? onBlur : void 0);
  }

  // ../../node_modules/framer-motion/dist/es/gestures/utils/event-type.js
  function isMouseEvent(event) {
    if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
      return !!(event.pointerType === "mouse");
    }
    return event instanceof MouseEvent;
  }
  function isTouchEvent(event) {
    var hasTouches = !!event.touches;
    return hasTouches;
  }

  // ../../node_modules/framer-motion/dist/es/events/event-info.js
  function filterPrimaryPointer(eventHandler) {
    return function(event) {
      var isMouseEvent2 = event instanceof MouseEvent;
      var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
      if (isPrimaryPointer) {
        eventHandler(event);
      }
    };
  }
  var defaultPagePoint = { pageX: 0, pageY: 0 };
  function pointFromTouch(e, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    var primaryTouch = e.touches[0] || e.changedTouches[0];
    var point = primaryTouch || defaultPagePoint;
    return {
      x: point[pointType + "X"],
      y: point[pointType + "Y"]
    };
  }
  function pointFromMouse(point, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    return {
      x: point[pointType + "X"],
      y: point[pointType + "Y"]
    };
  }
  function extractEventInfo(event, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    return {
      point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
    };
  }
  function getViewportPointFromEvent(event) {
    return extractEventInfo(event, "client");
  }
  var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
    if (shouldFilterPrimaryPointer === void 0) {
      shouldFilterPrimaryPointer = false;
    }
    var listener = function(event) {
      return handler(event, extractEventInfo(event));
    };
    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
  };

  // ../../node_modules/framer-motion/dist/es/events/utils.js
  var supportsPointerEvents = function() {
    return isBrowser && window.onpointerdown === null;
  };
  var supportsTouchEvents = function() {
    return isBrowser && window.ontouchstart === null;
  };
  var supportsMouseEvents = function() {
    return isBrowser && window.onmousedown === null;
  };

  // ../../node_modules/framer-motion/dist/es/events/use-pointer-event.js
  var mouseEventNames = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave"
  };
  var touchEventNames = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel"
  };
  function getPointerEventName(name) {
    if (supportsPointerEvents()) {
      return name;
    } else if (supportsTouchEvents()) {
      return touchEventNames[name];
    } else if (supportsMouseEvents()) {
      return mouseEventNames[name];
    }
    return name;
  }
  function addPointerEvent(target, eventName, handler, options) {
    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
  }
  function usePointerEvent(ref, eventName, handler, options) {
    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
  }

  // ../../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js
  function createLock(name) {
    var lock = null;
    return function() {
      var openLock = function() {
        lock = null;
      };
      if (lock === null) {
        lock = name;
        return openLock;
      }
      return false;
    };
  }
  var globalHorizontalLock = createLock("dragHorizontal");
  var globalVerticalLock = createLock("dragVertical");
  function getGlobalLock(drag2) {
    var lock = false;
    if (drag2 === "y") {
      lock = globalVerticalLock();
    } else if (drag2 === "x") {
      lock = globalHorizontalLock();
    } else {
      var openHorizontal_1 = globalHorizontalLock();
      var openVertical_1 = globalVerticalLock();
      if (openHorizontal_1 && openVertical_1) {
        lock = function() {
          openHorizontal_1();
          openVertical_1();
        };
      } else {
        if (openHorizontal_1)
          openHorizontal_1();
        if (openVertical_1)
          openVertical_1();
      }
    }
    return lock;
  }
  function isDragActive() {
    var openGestureLock = getGlobalLock(true);
    if (!openGestureLock)
      return true;
    openGestureLock();
    return false;
  }

  // ../../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js
  function createHoverEvent(visualElement2, isActive, callback) {
    return function(event, info) {
      var _a7;
      if (!isMouseEvent(event) || isDragActive())
        return;
      callback === null || callback === void 0 ? void 0 : callback(event, info);
      (_a7 = visualElement2.animationState) === null || _a7 === void 0 ? void 0 : _a7.setActive(AnimationType.Hover, isActive);
    };
  }
  function useHoverGesture(_a7) {
    var onHoverStart = _a7.onHoverStart, onHoverEnd = _a7.onHoverEnd, whileHover = _a7.whileHover, visualElement2 = _a7.visualElement;
    usePointerEvent(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0);
    usePointerEvent(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0);
  }

  // ../../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
  var import_react39 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js
  var isNodeOrChild = function(parent, child) {
    if (!child) {
      return false;
    } else if (parent === child) {
      return true;
    } else {
      return isNodeOrChild(parent, child.parentElement);
    }
  };

  // ../../node_modules/framer-motion/dist/es/utils/use-unmount-effect.js
  var import_react38 = __toESM(require_react());
  function useUnmountEffect(callback) {
    return (0, import_react38.useEffect)(function() {
      return function() {
        return callback();
      };
    }, []);
  }

  // ../../node_modules/popmotion/dist/es/utils/clamp.js
  var clamp2 = function(min, max, v) {
    return Math.min(Math.max(v, min), max);
  };

  // ../../node_modules/popmotion/dist/es/animations/utils/find-spring.js
  var safeMin = 1e-3;
  var minDuration = 0.01;
  var maxDuration = 10;
  var minDamping = 0.05;
  var maxDamping = 1;
  function findSpring(_a7) {
    var _b3 = _a7.duration, duration = _b3 === void 0 ? 800 : _b3, _c3 = _a7.bounce, bounce = _c3 === void 0 ? 0.25 : _c3, _d3 = _a7.velocity, velocity = _d3 === void 0 ? 0 : _d3, _e2 = _a7.mass, mass = _e2 === void 0 ? 1 : _e2;
    var envelope;
    var derivative;
    warning(duration <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
    var dampingRatio = 1 - bounce;
    dampingRatio = clamp2(minDamping, maxDamping, dampingRatio);
    duration = clamp2(minDuration, maxDuration, duration / 1e3);
    if (dampingRatio < 1) {
      envelope = function(undampedFreq2) {
        var exponentialDecay = undampedFreq2 * dampingRatio;
        var delta2 = exponentialDecay * duration;
        var a2 = exponentialDecay - velocity;
        var b2 = calcAngularFreq(undampedFreq2, dampingRatio);
        var c2 = Math.exp(-delta2);
        return safeMin - a2 / b2 * c2;
      };
      derivative = function(undampedFreq2) {
        var exponentialDecay = undampedFreq2 * dampingRatio;
        var delta2 = exponentialDecay * duration;
        var d = delta2 * velocity + velocity;
        var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
        var f = Math.exp(-delta2);
        var g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
        var factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
        return factor * ((d - e) * f) / g;
      };
    } else {
      envelope = function(undampedFreq2) {
        var a2 = Math.exp(-undampedFreq2 * duration);
        var b2 = (undampedFreq2 - velocity) * duration + 1;
        return -safeMin + a2 * b2;
      };
      derivative = function(undampedFreq2) {
        var a2 = Math.exp(-undampedFreq2 * duration);
        var b2 = (velocity - undampedFreq2) * (duration * duration);
        return a2 * b2;
      };
    }
    var initialGuess = 5 / duration;
    var undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = duration * 1e3;
    if (isNaN(undampedFreq)) {
      return {
        stiffness: 100,
        damping: 10,
        duration
      };
    } else {
      var stiffness = Math.pow(undampedFreq, 2) * mass;
      return {
        stiffness,
        damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
        duration
      };
    }
  }
  var rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
    var result = initialGuess;
    for (var i = 1; i < rootIterations; i++) {
      result = result - envelope(result) / derivative(result);
    }
    return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }

  // ../../node_modules/popmotion/dist/es/animations/generators/spring.js
  var durationKeys = ["duration", "bounce"];
  var physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options, keys2) {
    return keys2.some(function(key) {
      return options[key] !== void 0;
    });
  }
  function getSpringOptions(options) {
    var springOptions = __assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options);
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
      var derived = findSpring(options);
      springOptions = __assign(__assign(__assign({}, springOptions), derived), { velocity: 0, mass: 1 });
      springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
  }
  function spring(_a7) {
    var _b3 = _a7.from, from = _b3 === void 0 ? 0 : _b3, _c3 = _a7.to, to = _c3 === void 0 ? 1 : _c3, _d3 = _a7.restSpeed, restSpeed = _d3 === void 0 ? 2 : _d3, restDelta = _a7.restDelta, options = __rest(_a7, ["from", "to", "restSpeed", "restDelta"]);
    var state2 = { done: false, value: from };
    var _e2 = getSpringOptions(options), stiffness = _e2.stiffness, damping = _e2.damping, mass = _e2.mass, velocity = _e2.velocity, duration = _e2.duration, isResolvedFromDuration = _e2.isResolvedFromDuration;
    var resolveSpring = zero;
    var resolveVelocity = zero;
    function createSpring() {
      var initialVelocity = velocity ? -(velocity / 1e3) : 0;
      var initialDelta = to - from;
      var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
      var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
      restDelta !== null && restDelta !== void 0 ? restDelta : restDelta = Math.abs(to - from) <= 1 ? 0.01 : 0.4;
      if (dampingRatio < 1) {
        var angularFreq_1 = calcAngularFreq(undampedAngularFreq, dampingRatio);
        resolveSpring = function(t2) {
          var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
          return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 * Math.sin(angularFreq_1 * t2) + initialDelta * Math.cos(angularFreq_1 * t2));
        };
        resolveVelocity = function(t2) {
          var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
          return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq_1 * t2) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 + initialDelta * Math.cos(angularFreq_1 * t2)) - envelope * (Math.cos(angularFreq_1 * t2) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq_1 * initialDelta * Math.sin(angularFreq_1 * t2));
        };
      } else if (dampingRatio === 1) {
        resolveSpring = function(t2) {
          return to - Math.exp(-undampedAngularFreq * t2) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t2);
        };
      } else {
        var dampedAngularFreq_1 = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
        resolveSpring = function(t2) {
          var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
          var freqForT = Math.min(dampedAngularFreq_1 * t2, 300);
          return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq_1 * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq_1;
        };
      }
    }
    createSpring();
    return {
      next: function(t2) {
        var current = resolveSpring(t2);
        if (!isResolvedFromDuration) {
          var currentVelocity = resolveVelocity(t2) * 1e3;
          var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
          var isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
          state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
        } else {
          state2.done = t2 >= duration;
        }
        state2.value = state2.done ? to : current;
        return state2;
      },
      flipTarget: function() {
        var _a8;
        velocity = -velocity;
        _a8 = [to, from], from = _a8[0], to = _a8[1];
        createSpring();
      }
    };
  }
  spring.needsInterpolation = function(a2, b2) {
    return typeof a2 === "string" || typeof b2 === "string";
  };
  var zero = function(_t) {
    return 0;
  };

  // ../../node_modules/popmotion/dist/es/utils/progress.js
  var progress = function(from, to, value) {
    var toFromDifference = to - from;
    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
  };

  // ../../node_modules/popmotion/dist/es/utils/mix.js
  var mix = function(from, to, progress2) {
    return -progress2 * from + progress2 * to + from;
  };

  // ../../node_modules/popmotion/dist/es/utils/mix-color.js
  var mixLinearColor = function(from, to, v) {
    var fromExpo = from * from;
    var toExpo = to * to;
    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
  };
  var colorTypes = [hex, rgba, hsla];
  var getColorType = function(v) {
    return colorTypes.find(function(type) {
      return type.test(v);
    });
  };
  var notAnimatable = function(color3) {
    return "'" + color3 + "' is not an animatable color. Use the equivalent color code instead.";
  };
  var mixColor = function(from, to) {
    var fromColorType = getColorType(from);
    var toColorType = getColorType(to);
    invariant(!!fromColorType, notAnimatable(from));
    invariant(!!toColorType, notAnimatable(to));
    invariant(fromColorType.transform === toColorType.transform, "Both colors must be hex/RGBA, OR both must be HSLA.");
    var fromColor = fromColorType.parse(from);
    var toColor = toColorType.parse(to);
    var blended = __assign({}, fromColor);
    var mixFunc = fromColorType === hsla ? mix : mixLinearColor;
    return function(v) {
      for (var key in blended) {
        if (key !== "alpha") {
          blended[key] = mixFunc(fromColor[key], toColor[key], v);
        }
      }
      blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
      return fromColorType.transform(blended);
    };
  };

  // ../../node_modules/popmotion/dist/es/utils/inc.js
  var isNum = function(v) {
    return typeof v === "number";
  };

  // ../../node_modules/popmotion/dist/es/utils/pipe.js
  var combineFunctions = function(a2, b2) {
    return function(v) {
      return b2(a2(v));
    };
  };
  var pipe2 = function() {
    var transformers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      transformers[_i] = arguments[_i];
    }
    return transformers.reduce(combineFunctions);
  };

  // ../../node_modules/popmotion/dist/es/utils/mix-complex.js
  function getMixer(origin, target) {
    if (isNum(origin)) {
      return function(v) {
        return mix(origin, target, v);
      };
    } else if (color2.test(origin)) {
      return mixColor(origin, target);
    } else {
      return mixComplex(origin, target);
    }
  }
  var mixArray = function(from, to) {
    var output = __spreadArray([], from);
    var numValues = output.length;
    var blendValue = from.map(function(fromThis, i) {
      return getMixer(fromThis, to[i]);
    });
    return function(v) {
      for (var i = 0; i < numValues; i++) {
        output[i] = blendValue[i](v);
      }
      return output;
    };
  };
  var mixObject = function(origin, target) {
    var output = __assign(__assign({}, origin), target);
    var blendValue = {};
    for (var key in output) {
      if (origin[key] !== void 0 && target[key] !== void 0) {
        blendValue[key] = getMixer(origin[key], target[key]);
      }
    }
    return function(v) {
      for (var key2 in blendValue) {
        output[key2] = blendValue[key2](v);
      }
      return output;
    };
  };
  function analyse2(value) {
    var parsed = complex.parse(value);
    var numValues = parsed.length;
    var numNumbers = 0;
    var numRGB = 0;
    var numHSL = 0;
    for (var i = 0; i < numValues; i++) {
      if (numNumbers || typeof parsed[i] === "number") {
        numNumbers++;
      } else {
        if (parsed[i].hue !== void 0) {
          numHSL++;
        } else {
          numRGB++;
        }
      }
    }
    return { parsed, numNumbers, numRGB, numHSL };
  }
  var mixComplex = function(origin, target) {
    var template = complex.createTransformer(target);
    var originStats = analyse2(origin);
    var targetStats = analyse2(target);
    invariant(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
    return pipe2(mixArray(originStats.parsed, targetStats.parsed), template);
  };

  // ../../node_modules/popmotion/dist/es/utils/interpolate.js
  var mixNumber = function(from, to) {
    return function(p) {
      return mix(from, to, p);
    };
  };
  function detectMixerFactory(v) {
    if (typeof v === "number") {
      return mixNumber;
    } else if (typeof v === "string") {
      if (color2.test(v)) {
        return mixColor;
      } else {
        return mixComplex;
      }
    } else if (Array.isArray(v)) {
      return mixArray;
    } else if (typeof v === "object") {
      return mixObject;
    }
  }
  function createMixers(output, ease, customMixer) {
    var mixers = [];
    var mixerFactory = customMixer || detectMixerFactory(output[0]);
    var numMixers = output.length - 1;
    for (var i = 0; i < numMixers; i++) {
      var mixer = mixerFactory(output[i], output[i + 1]);
      if (ease) {
        var easingFunction = Array.isArray(ease) ? ease[i] : ease;
        mixer = pipe2(easingFunction, mixer);
      }
      mixers.push(mixer);
    }
    return mixers;
  }
  function fastInterpolate(_a7, _b3) {
    var from = _a7[0], to = _a7[1];
    var mixer = _b3[0];
    return function(v) {
      return mixer(progress(from, to, v));
    };
  }
  function slowInterpolate(input, mixers) {
    var inputLength = input.length;
    var lastInputIndex = inputLength - 1;
    return function(v) {
      var mixerIndex = 0;
      var foundMixerIndex = false;
      if (v <= input[0]) {
        foundMixerIndex = true;
      } else if (v >= input[lastInputIndex]) {
        mixerIndex = lastInputIndex - 1;
        foundMixerIndex = true;
      }
      if (!foundMixerIndex) {
        var i = 1;
        for (; i < inputLength; i++) {
          if (input[i] > v || i === lastInputIndex) {
            break;
          }
        }
        mixerIndex = i - 1;
      }
      var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
      return mixers[mixerIndex](progressInRange);
    };
  }
  function interpolate(input, output, _a7) {
    var _b3 = _a7 === void 0 ? {} : _a7, _c3 = _b3.clamp, isClamp = _c3 === void 0 ? true : _c3, ease = _b3.ease, mixer = _b3.mixer;
    var inputLength = input.length;
    invariant(inputLength === output.length, "Both input and output ranges must be the same length");
    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
    if (input[0] > input[inputLength - 1]) {
      input = [].concat(input);
      output = [].concat(output);
      input.reverse();
      output.reverse();
    }
    var mixers = createMixers(output, ease, mixer);
    var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
    return isClamp ? function(v) {
      return interpolator(clamp2(input[0], input[inputLength - 1], v));
    } : interpolator;
  }

  // ../../node_modules/popmotion/dist/es/easing/utils.js
  var reverseEasing = function(easing) {
    return function(p) {
      return 1 - easing(1 - p);
    };
  };
  var mirrorEasing = function(easing) {
    return function(p) {
      return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
    };
  };
  var createExpoIn = function(power) {
    return function(p) {
      return Math.pow(p, power);
    };
  };
  var createBackIn = function(power) {
    return function(p) {
      return p * p * ((power + 1) * p - power);
    };
  };
  var createAnticipate = function(power) {
    var backEasing = createBackIn(power);
    return function(p) {
      return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
    };
  };

  // ../../node_modules/popmotion/dist/es/easing/index.js
  var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
  var BOUNCE_FIRST_THRESHOLD = 4 / 11;
  var BOUNCE_SECOND_THRESHOLD = 8 / 11;
  var BOUNCE_THIRD_THRESHOLD = 9 / 10;
  var linear = function(p) {
    return p;
  };
  var easeIn = createExpoIn(2);
  var easeOut = reverseEasing(easeIn);
  var easeInOut = mirrorEasing(easeIn);
  var circIn = function(p) {
    return 1 - Math.sin(Math.acos(p));
  };
  var circOut = reverseEasing(circIn);
  var circInOut = mirrorEasing(circOut);
  var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
  var backOut = reverseEasing(backIn);
  var backInOut = mirrorEasing(backIn);
  var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
  var ca = 4356 / 361;
  var cb = 35442 / 1805;
  var cc = 16061 / 1805;
  var bounceOut = function(p) {
    if (p === 1 || p === 0)
      return p;
    var p2 = p * p;
    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
  };
  var bounceIn = reverseEasing(bounceOut);
  var bounceInOut = function(p) {
    return p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;
  };

  // ../../node_modules/popmotion/dist/es/animations/generators/keyframes.js
  function defaultEasing(values, easing) {
    return values.map(function() {
      return easing || easeInOut;
    }).splice(0, values.length - 1);
  }
  function defaultOffset(values) {
    var numValues = values.length;
    return values.map(function(_value, i) {
      return i !== 0 ? i / (numValues - 1) : 0;
    });
  }
  function convertOffsetToTimes(offset, duration) {
    return offset.map(function(o) {
      return o * duration;
    });
  }
  function keyframes2(_a7) {
    var _b3 = _a7.from, from = _b3 === void 0 ? 0 : _b3, _c3 = _a7.to, to = _c3 === void 0 ? 1 : _c3, ease = _a7.ease, offset = _a7.offset, _d3 = _a7.duration, duration = _d3 === void 0 ? 300 : _d3;
    var state2 = { done: false, value: from };
    var values = Array.isArray(to) ? to : [from, to];
    var times = convertOffsetToTimes(offset && offset.length === values.length ? offset : defaultOffset(values), duration);
    function createInterpolator() {
      return interpolate(times, values, {
        ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)
      });
    }
    var interpolator = createInterpolator();
    return {
      next: function(t2) {
        state2.value = interpolator(t2);
        state2.done = t2 >= duration;
        return state2;
      },
      flipTarget: function() {
        values.reverse();
        interpolator = createInterpolator();
      }
    };
  }

  // ../../node_modules/popmotion/dist/es/animations/generators/decay.js
  function decay(_a7) {
    var _b3 = _a7.velocity, velocity = _b3 === void 0 ? 0 : _b3, _c3 = _a7.from, from = _c3 === void 0 ? 0 : _c3, _d3 = _a7.power, power = _d3 === void 0 ? 0.8 : _d3, _e2 = _a7.timeConstant, timeConstant = _e2 === void 0 ? 350 : _e2, _f2 = _a7.restDelta, restDelta = _f2 === void 0 ? 0.5 : _f2, modifyTarget = _a7.modifyTarget;
    var state2 = { done: false, value: from };
    var amplitude = power * velocity;
    var ideal = from + amplitude;
    var target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
    if (target !== ideal)
      amplitude = target - from;
    return {
      next: function(t2) {
        var delta2 = -amplitude * Math.exp(-t2 / timeConstant);
        state2.done = !(delta2 > restDelta || delta2 < -restDelta);
        state2.value = state2.done ? target : target + delta2;
        return state2;
      },
      flipTarget: function() {
      }
    };
  }

  // ../../node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.js
  var types = { keyframes: keyframes2, spring, decay };
  function detectAnimationFromOptions(config2) {
    if (Array.isArray(config2.to)) {
      return keyframes2;
    } else if (types[config2.type]) {
      return types[config2.type];
    }
    var keys2 = new Set(Object.keys(config2));
    if (keys2.has("ease") || keys2.has("duration") && !keys2.has("dampingRatio")) {
      return keyframes2;
    } else if (keys2.has("dampingRatio") || keys2.has("stiffness") || keys2.has("mass") || keys2.has("damping") || keys2.has("restSpeed") || keys2.has("restDelta")) {
      return spring;
    }
    return keyframes2;
  }

  // ../../node_modules/popmotion/dist/es/animations/utils/elapsed.js
  function loopElapsed(elapsed, duration, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return elapsed - duration - delay;
  }
  function reverseElapsed(elapsed, duration, delay, isForwardPlayback) {
    if (delay === void 0) {
      delay = 0;
    }
    if (isForwardPlayback === void 0) {
      isForwardPlayback = true;
    }
    return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;
  }
  function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
  }

  // ../../node_modules/popmotion/dist/es/animations/index.js
  var framesync = function(update) {
    var passTimestamp = function(_a7) {
      var delta2 = _a7.delta;
      return update(delta2);
    };
    return {
      start: function() {
        return es_default.update(passTimestamp, true);
      },
      stop: function() {
        return cancelSync.update(passTimestamp);
      }
    };
  };
  function animate(_a7) {
    var _b3, _c3;
    var from = _a7.from, _d3 = _a7.autoplay, autoplay = _d3 === void 0 ? true : _d3, _e2 = _a7.driver, driver = _e2 === void 0 ? framesync : _e2, _f2 = _a7.elapsed, elapsed = _f2 === void 0 ? 0 : _f2, _g2 = _a7.repeat, repeatMax = _g2 === void 0 ? 0 : _g2, _h2 = _a7.repeatType, repeatType = _h2 === void 0 ? "loop" : _h2, _j = _a7.repeatDelay, repeatDelay = _j === void 0 ? 0 : _j, onPlay = _a7.onPlay, onStop = _a7.onStop, onComplete = _a7.onComplete, onRepeat = _a7.onRepeat, onUpdate = _a7.onUpdate, options = __rest(_a7, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
    var to = options.to;
    var driverControls;
    var repeatCount = 0;
    var computedDuration = options.duration;
    var latest;
    var isComplete = false;
    var isForwardPlayback = true;
    var interpolateFromNumber;
    var animator = detectAnimationFromOptions(options);
    if ((_c3 = (_b3 = animator).needsInterpolation) === null || _c3 === void 0 ? void 0 : _c3.call(_b3, from, to)) {
      interpolateFromNumber = interpolate([0, 100], [from, to], {
        clamp: false
      });
      from = 0;
      to = 100;
    }
    var animation = animator(__assign(__assign({}, options), { from, to }));
    function repeat() {
      repeatCount++;
      if (repeatType === "reverse") {
        isForwardPlayback = repeatCount % 2 === 0;
        elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
      } else {
        elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
        if (repeatType === "mirror")
          animation.flipTarget();
      }
      isComplete = false;
      onRepeat && onRepeat();
    }
    function complete() {
      driverControls.stop();
      onComplete && onComplete();
    }
    function update(delta2) {
      if (!isForwardPlayback)
        delta2 = -delta2;
      elapsed += delta2;
      if (!isComplete) {
        var state2 = animation.next(Math.max(0, elapsed));
        latest = state2.value;
        if (interpolateFromNumber)
          latest = interpolateFromNumber(latest);
        isComplete = isForwardPlayback ? state2.done : elapsed <= 0;
      }
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
      if (isComplete) {
        if (repeatCount === 0)
          computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
        if (repeatCount < repeatMax) {
          hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
        } else {
          complete();
        }
      }
    }
    function play() {
      onPlay === null || onPlay === void 0 ? void 0 : onPlay();
      driverControls = driver(update);
      driverControls.start();
    }
    autoplay && play();
    return {
      stop: function() {
        onStop === null || onStop === void 0 ? void 0 : onStop();
        driverControls.stop();
      }
    };
  }

  // ../../node_modules/popmotion/dist/es/utils/velocity-per-second.js
  function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1e3 / frameDuration) : 0;
  }

  // ../../node_modules/popmotion/dist/es/animations/inertia.js
  function inertia(_a7) {
    var _b3 = _a7.from, from = _b3 === void 0 ? 0 : _b3, _c3 = _a7.velocity, velocity = _c3 === void 0 ? 0 : _c3, min = _a7.min, max = _a7.max, _d3 = _a7.power, power = _d3 === void 0 ? 0.8 : _d3, _e2 = _a7.timeConstant, timeConstant = _e2 === void 0 ? 750 : _e2, _f2 = _a7.bounceStiffness, bounceStiffness = _f2 === void 0 ? 500 : _f2, _g2 = _a7.bounceDamping, bounceDamping = _g2 === void 0 ? 10 : _g2, _h2 = _a7.restDelta, restDelta = _h2 === void 0 ? 1 : _h2, modifyTarget = _a7.modifyTarget, driver = _a7.driver, onUpdate = _a7.onUpdate, onComplete = _a7.onComplete;
    var currentAnimation;
    function isOutOfBounds(v) {
      return min !== void 0 && v < min || max !== void 0 && v > max;
    }
    function boundaryNearest(v) {
      if (min === void 0)
        return max;
      if (max === void 0)
        return min;
      return Math.abs(min - v) < Math.abs(max - v) ? min : max;
    }
    function startAnimation2(options) {
      currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
      currentAnimation = animate(__assign(__assign({}, options), { driver, onUpdate: function(v) {
        var _a8;
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
        (_a8 = options.onUpdate) === null || _a8 === void 0 ? void 0 : _a8.call(options, v);
      }, onComplete }));
    }
    function startSpring(options) {
      startAnimation2(__assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));
    }
    if (isOutOfBounds(from)) {
      startSpring({ from, velocity, to: boundaryNearest(from) });
    } else {
      var target = power * velocity + from;
      if (typeof modifyTarget !== "undefined")
        target = modifyTarget(target);
      var boundary_1 = boundaryNearest(target);
      var heading_1 = boundary_1 === min ? -1 : 1;
      var prev_1;
      var current_1;
      var checkBoundary = function(v) {
        prev_1 = current_1;
        current_1 = v;
        velocity = velocityPerSecond(v - prev_1, getFrameData().delta);
        if (heading_1 === 1 && v > boundary_1 || heading_1 === -1 && v < boundary_1) {
          startSpring({ from: v, to: boundary_1, velocity });
        }
      };
      startAnimation2({
        type: "decay",
        from,
        velocity,
        timeConstant,
        power,
        restDelta,
        modifyTarget,
        onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
      });
    }
    return {
      stop: function() {
        return currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
      }
    };
  }

  // ../../node_modules/popmotion/dist/es/utils/is-point.js
  var isPoint = function(point) {
    return point.hasOwnProperty("x") && point.hasOwnProperty("y");
  };

  // ../../node_modules/popmotion/dist/es/utils/is-point-3d.js
  var isPoint3D = function(point) {
    return isPoint(point) && point.hasOwnProperty("z");
  };

  // ../../node_modules/popmotion/dist/es/utils/distance.js
  var distance1D = function(a2, b2) {
    return Math.abs(a2 - b2);
  };
  function distance(a2, b2) {
    if (isNum(a2) && isNum(b2)) {
      return distance1D(a2, b2);
    } else if (isPoint(a2) && isPoint(b2)) {
      var xDelta = distance1D(a2.x, b2.x);
      var yDelta = distance1D(a2.y, b2.y);
      var zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D(a2.z, b2.z) : 0;
      return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
    }
  }

  // ../../node_modules/popmotion/dist/es/easing/cubic-bezier.js
  var a = function(a1, a2) {
    return 1 - 3 * a2 + 3 * a1;
  };
  var b = function(a1, a2) {
    return 3 * a2 - 6 * a1;
  };
  var c = function(a1) {
    return 3 * a1;
  };
  var calcBezier = function(t2, a1, a2) {
    return ((a(a1, a2) * t2 + b(a1, a2)) * t2 + c(a1)) * t2;
  };
  var getSlope = function(t2, a1, a2) {
    return 3 * a(a1, a2) * t2 * t2 + 2 * b(a1, a2) * t2 + c(a1);
  };
  var subdivisionPrecision = 1e-7;
  var subdivisionMaxIterations = 10;
  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX;
    var currentT;
    var i = 0;
    do {
      currentT = aA + (aB - aA) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
    return currentT;
  }
  var newtonIterations = 8;
  var newtonMinSlope = 1e-3;
  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < newtonIterations; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0) {
        return aGuessT;
      }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  var kSplineTableSize = 11;
  var kSampleStepSize = 1 / (kSplineTableSize - 1);
  function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2)
      return linear;
    var sampleValues = new Float32Array(kSplineTableSize);
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
    function getTForX(aX) {
      var intervalStart = 0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;
      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= newtonMinSlope) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }
    return function(t2) {
      return t2 === 0 || t2 === 1 ? t2 : calcBezier(getTForX(t2), mY1, mY2);
    };
  }

  // ../../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
  function useTapGesture(_a7) {
    var onTap = _a7.onTap, onTapStart = _a7.onTapStart, onTapCancel = _a7.onTapCancel, whileTap = _a7.whileTap, visualElement2 = _a7.visualElement;
    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
    var isPressing = (0, import_react39.useRef)(false);
    var cancelPointerEndListeners = (0, import_react39.useRef)(null);
    function removePointerEndListener() {
      var _a8;
      (_a8 = cancelPointerEndListeners.current) === null || _a8 === void 0 ? void 0 : _a8.call(cancelPointerEndListeners);
      cancelPointerEndListeners.current = null;
    }
    function checkPointerEnd() {
      var _a8;
      removePointerEndListener();
      isPressing.current = false;
      (_a8 = visualElement2.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(AnimationType.Tap, false);
      return !isDragActive();
    }
    function onPointerUp(event, info) {
      if (!checkPointerEnd())
        return;
      !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
    }
    function onPointerCancel(event, info) {
      if (!checkPointerEnd())
        return;
      onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
    }
    function onPointerDown(event, info) {
      var _a8;
      removePointerEndListener();
      if (isPressing.current)
        return;
      isPressing.current = true;
      cancelPointerEndListeners.current = pipe2(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
      onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
      (_a8 = visualElement2.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(AnimationType.Tap, true);
    }
    usePointerEvent(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0);
    useUnmountEffect(removePointerEndListener);
  }

  // ../../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js
  var makeRenderlessComponent = function(hook) {
    return function(props) {
      hook(props);
      return null;
    };
  };

  // ../../node_modules/framer-motion/dist/es/motion/features/gestures.js
  var gestureAnimations = {
    tap: makeRenderlessComponent(useTapGesture),
    focus: makeRenderlessComponent(useFocusGesture),
    hover: makeRenderlessComponent(useHoverGesture)
  };

  // ../../node_modules/framer-motion/dist/es/motion/features/animations.js
  var import_react40 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/utils/shallow-compare.js
  function shallowCompare(next, prev) {
    if (!Array.isArray(prev))
      return false;
    var prevLength = prev.length;
    if (prevLength !== next.length)
      return false;
    for (var i = 0; i < prevLength; i++) {
      if (prev[i] !== next[i])
        return false;
    }
    return true;
  }

  // ../../node_modules/framer-motion/dist/es/utils/time-conversion.js
  var secondsToMilliseconds = function(seconds) {
    return seconds * 1e3;
  };

  // ../../node_modules/framer-motion/dist/es/animation/utils/easing.js
  var easingLookup = {
    linear,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate,
    bounceIn,
    bounceInOut,
    bounceOut
  };
  var easingDefinitionToFunction = function(definition) {
    if (Array.isArray(definition)) {
      invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
      var _a7 = __read(definition, 4), x1 = _a7[0], y1 = _a7[1], x2 = _a7[2], y2 = _a7[3];
      return cubicBezier(x1, y1, x2, y2);
    } else if (typeof definition === "string") {
      invariant(easingLookup[definition] !== void 0, "Invalid easing type '" + definition + "'");
      return easingLookup[definition];
    }
    return definition;
  };
  var isEasingArray = function(ease) {
    return Array.isArray(ease) && typeof ease[0] !== "number";
  };

  // ../../node_modules/framer-motion/dist/es/animation/utils/is-animatable.js
  var isAnimatable = function(key, value) {
    if (key === "zIndex")
      return false;
    if (typeof value === "number" || Array.isArray(value))
      return true;
    if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
      return true;
    }
    return false;
  };

  // ../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.js
  var underDampedSpring = function() {
    return {
      type: "spring",
      stiffness: 500,
      damping: 25,
      restDelta: 0.5,
      restSpeed: 10
    };
  };
  var criticallyDampedSpring = function(to) {
    return {
      type: "spring",
      stiffness: 550,
      damping: to === 0 ? 2 * Math.sqrt(550) : 30,
      restDelta: 0.01,
      restSpeed: 10
    };
  };
  var linearTween = function() {
    return {
      type: "keyframes",
      ease: "linear",
      duration: 0.3
    };
  };
  var keyframes3 = function(values) {
    return {
      type: "keyframes",
      duration: 0.8,
      values
    };
  };
  var defaultTransitions = {
    x: underDampedSpring,
    y: underDampedSpring,
    z: underDampedSpring,
    rotate: underDampedSpring,
    rotateX: underDampedSpring,
    rotateY: underDampedSpring,
    rotateZ: underDampedSpring,
    scaleX: criticallyDampedSpring,
    scaleY: criticallyDampedSpring,
    scale: criticallyDampedSpring,
    opacity: linearTween,
    backgroundColor: linearTween,
    color: linearTween,
    default: criticallyDampedSpring
  };
  var getDefaultTransition = function(valueKey, to) {
    var transitionFactory;
    if (isKeyframesTarget(to)) {
      transitionFactory = keyframes3;
    } else {
      transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
    }
    return __assign({ to }, transitionFactory(to));
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js
  var defaultValueTypes = __assign(__assign({}, numberValueTypes), {
    color: color2,
    backgroundColor: color2,
    outlineColor: color2,
    fill: color2,
    stroke: color2,
    borderColor: color2,
    borderTopColor: color2,
    borderRightColor: color2,
    borderBottomColor: color2,
    borderLeftColor: color2,
    filter: filter2,
    WebkitFilter: filter2
  });
  var getDefaultValueType = function(key) {
    return defaultValueTypes[key];
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js
  function getAnimatableNone2(key, value) {
    var _a7;
    var defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== filter2)
      defaultValueType = complex;
    return (_a7 = defaultValueType.getAnimatableNone) === null || _a7 === void 0 ? void 0 : _a7.call(defaultValueType, value);
  }

  // ../../node_modules/framer-motion/dist/es/animation/utils/transitions.js
  function isTransitionDefined(_a7) {
    _a7.when;
    _a7.delay;
    _a7.delayChildren;
    _a7.staggerChildren;
    _a7.staggerDirection;
    _a7.repeat;
    _a7.repeatType;
    _a7.repeatDelay;
    _a7.from;
    var transition3 = __rest(_a7, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
    return !!Object.keys(transition3).length;
  }
  var legacyRepeatWarning = false;
  function convertTransitionToAnimationOptions(_a7) {
    var ease = _a7.ease, times = _a7.times, yoyo = _a7.yoyo, flip = _a7.flip, loop = _a7.loop, transition3 = __rest(_a7, ["ease", "times", "yoyo", "flip", "loop"]);
    var options = __assign({}, transition3);
    if (times)
      options["offset"] = times;
    if (transition3.duration)
      options["duration"] = secondsToMilliseconds(transition3.duration);
    if (transition3.repeatDelay)
      options.repeatDelay = secondsToMilliseconds(transition3.repeatDelay);
    if (ease) {
      options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
    }
    if (transition3.type === "tween")
      options.type = "keyframes";
    if (yoyo || loop || flip) {
      warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
      legacyRepeatWarning = true;
      if (yoyo) {
        options.repeatType = "reverse";
      } else if (loop) {
        options.repeatType = "loop";
      } else if (flip) {
        options.repeatType = "mirror";
      }
      options.repeat = loop || yoyo || flip || transition3.repeat;
    }
    if (transition3.type !== "spring")
      options.type = "keyframes";
    return options;
  }
  function getDelayFromTransition(transition3, key) {
    var _a7;
    var valueTransition = getValueTransition(transition3, key) || {};
    return (_a7 = valueTransition.delay) !== null && _a7 !== void 0 ? _a7 : 0;
  }
  function hydrateKeyframes(options) {
    if (Array.isArray(options.to) && options.to[0] === null) {
      options.to = __spreadArray([], __read(options.to));
      options.to[0] = options.from;
    }
    return options;
  }
  function getPopmotionAnimationOptions(transition3, options, key) {
    var _a7;
    if (Array.isArray(options.to)) {
      (_a7 = transition3.duration) !== null && _a7 !== void 0 ? _a7 : transition3.duration = 0.8;
    }
    hydrateKeyframes(options);
    if (!isTransitionDefined(transition3)) {
      transition3 = __assign(__assign({}, transition3), getDefaultTransition(key, options.to));
    }
    return __assign(__assign({}, options), convertTransitionToAnimationOptions(transition3));
  }
  function getAnimation(key, value, target, transition3, onComplete) {
    var _a7;
    var valueTransition = getValueTransition(transition3, key);
    var origin = (_a7 = valueTransition.from) !== null && _a7 !== void 0 ? _a7 : value.get();
    var isTargetAnimatable = isAnimatable(key, target);
    if (origin === "none" && isTargetAnimatable && typeof target === "string") {
      origin = getAnimatableNone2(key, target);
    } else if (isZero(origin) && typeof target === "string") {
      origin = getZeroUnit(target);
    } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
      target = getZeroUnit(origin);
    }
    var isOriginAnimatable = isAnimatable(key, origin);
    warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate " + key + ' from "' + origin + '" to "' + target + '". ' + origin + " is not an animatable value - to enable this animation set " + origin + " to a value animatable to " + target + " via the `style` property.");
    function start() {
      var options = {
        from: origin,
        to: target,
        velocity: value.getVelocity(),
        onComplete,
        onUpdate: function(v) {
          return value.set(v);
        }
      };
      return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), { onUpdate: function(v) {
        var _a8;
        options.onUpdate(v);
        (_a8 = valueTransition.onUpdate) === null || _a8 === void 0 ? void 0 : _a8.call(valueTransition, v);
      }, onComplete: function() {
        var _a8;
        options.onComplete();
        (_a8 = valueTransition.onComplete) === null || _a8 === void 0 ? void 0 : _a8.call(valueTransition);
      } }));
    }
    function set() {
      var _a8;
      value.set(target);
      onComplete();
      (_a8 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _a8 === void 0 ? void 0 : _a8.call(valueTransition);
      return { stop: function() {
      } };
    }
    return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start;
  }
  function isZero(value) {
    return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
  }
  function getZeroUnit(potentialUnitType) {
    return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
  }
  function getValueTransition(transition3, key) {
    return transition3[key] || transition3["default"] || transition3;
  }
  function startAnimation(key, value, target, transition3) {
    if (transition3 === void 0) {
      transition3 = {};
    }
    return value.start(function(onComplete) {
      var delayTimer;
      var controls;
      var animation = getAnimation(key, value, target, transition3, onComplete);
      var delay = getDelayFromTransition(transition3, key);
      var start = function() {
        return controls = animation();
      };
      if (delay) {
        delayTimer = setTimeout(start, secondsToMilliseconds(delay));
      } else {
        start();
      }
      return function() {
        clearTimeout(delayTimer);
        controls === null || controls === void 0 ? void 0 : controls.stop();
      };
    });
  }

  // ../../node_modules/framer-motion/dist/es/utils/is-numerical-string.js
  var isNumericalString = function(v) {
    return /^\-?\d*\.?\d+$/.test(v);
  };

  // ../../node_modules/framer-motion/dist/es/utils/array.js
  function addUniqueItem(arr, item) {
    arr.indexOf(item) === -1 && arr.push(item);
  }
  function removeItem(arr, item) {
    var index = arr.indexOf(item);
    index > -1 && arr.splice(index, 1);
  }

  // ../../node_modules/framer-motion/dist/es/utils/subscription-manager.js
  var SubscriptionManager = function() {
    function SubscriptionManager2() {
      this.subscriptions = [];
    }
    SubscriptionManager2.prototype.add = function(handler) {
      var _this = this;
      addUniqueItem(this.subscriptions, handler);
      return function() {
        return removeItem(_this.subscriptions, handler);
      };
    };
    SubscriptionManager2.prototype.notify = function(a2, b2, c2) {
      var numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a2, b2, c2);
      } else {
        for (var i = 0; i < numSubscriptions; i++) {
          var handler = this.subscriptions[i];
          handler && handler(a2, b2, c2);
        }
      }
    };
    SubscriptionManager2.prototype.getSize = function() {
      return this.subscriptions.length;
    };
    SubscriptionManager2.prototype.clear = function() {
      this.subscriptions.length = 0;
    };
    return SubscriptionManager2;
  }();

  // ../../node_modules/framer-motion/dist/es/value/index.js
  var isFloat = function(value) {
    return !isNaN(parseFloat(value));
  };
  var MotionValue = function() {
    function MotionValue2(init) {
      var _this = this;
      this.timeDelta = 0;
      this.lastUpdated = 0;
      this.updateSubscribers = new SubscriptionManager();
      this.velocityUpdateSubscribers = new SubscriptionManager();
      this.renderSubscribers = new SubscriptionManager();
      this.canTrackVelocity = false;
      this.updateAndNotify = function(v, render) {
        if (render === void 0) {
          render = true;
        }
        _this.prev = _this.current;
        _this.current = v;
        var _a7 = getFrameData(), delta2 = _a7.delta, timestamp = _a7.timestamp;
        if (_this.lastUpdated !== timestamp) {
          _this.timeDelta = delta2;
          _this.lastUpdated = timestamp;
          es_default.postRender(_this.scheduleVelocityCheck);
        }
        if (_this.prev !== _this.current) {
          _this.updateSubscribers.notify(_this.current);
        }
        if (_this.velocityUpdateSubscribers.getSize()) {
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
        if (render) {
          _this.renderSubscribers.notify(_this.current);
        }
      };
      this.scheduleVelocityCheck = function() {
        return es_default.postRender(_this.velocityCheck);
      };
      this.velocityCheck = function(_a7) {
        var timestamp = _a7.timestamp;
        if (timestamp !== _this.lastUpdated) {
          _this.prev = _this.current;
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
      };
      this.hasAnimated = false;
      this.prev = this.current = init;
      this.canTrackVelocity = isFloat(this.current);
    }
    MotionValue2.prototype.onChange = function(subscription) {
      return this.updateSubscribers.add(subscription);
    };
    MotionValue2.prototype.clearListeners = function() {
      this.updateSubscribers.clear();
    };
    MotionValue2.prototype.onRenderRequest = function(subscription) {
      subscription(this.get());
      return this.renderSubscribers.add(subscription);
    };
    MotionValue2.prototype.attach = function(passiveEffect) {
      this.passiveEffect = passiveEffect;
    };
    MotionValue2.prototype.set = function(v, render) {
      if (render === void 0) {
        render = true;
      }
      if (!render || !this.passiveEffect) {
        this.updateAndNotify(v, render);
      } else {
        this.passiveEffect(v, this.updateAndNotify);
      }
    };
    MotionValue2.prototype.get = function() {
      return this.current;
    };
    MotionValue2.prototype.getPrevious = function() {
      return this.prev;
    };
    MotionValue2.prototype.getVelocity = function() {
      return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
    };
    MotionValue2.prototype.start = function(animation) {
      var _this = this;
      this.stop();
      return new Promise(function(resolve) {
        _this.hasAnimated = true;
        _this.stopAnimation = animation(resolve);
      }).then(function() {
        return _this.clearAnimation();
      });
    };
    MotionValue2.prototype.stop = function() {
      if (this.stopAnimation)
        this.stopAnimation();
      this.clearAnimation();
    };
    MotionValue2.prototype.isAnimating = function() {
      return !!this.stopAnimation;
    };
    MotionValue2.prototype.clearAnimation = function() {
      this.stopAnimation = null;
    };
    MotionValue2.prototype.destroy = function() {
      this.updateSubscribers.clear();
      this.renderSubscribers.clear();
      this.stop();
    };
    return MotionValue2;
  }();
  function motionValue(init) {
    return new MotionValue(init);
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/test.js
  var testValueType = function(v) {
    return function(type) {
      return type.test(v);
    };
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js
  var auto = {
    test: function(v) {
      return v === "auto";
    },
    parse: function(v) {
      return v;
    }
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js
  var dimensionValueTypes = [number, px2, percent, degrees, vw, vh, auto];
  var findDimensionValueType = function(v) {
    return dimensionValueTypes.find(testValueType(v));
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/value-types/find.js
  var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes)), [color2, complex]);
  var findValueType = function(v) {
    return valueTypes.find(testValueType(v));
  };

  // ../../node_modules/framer-motion/dist/es/render/utils/setters.js
  function setMotionValue(visualElement2, key, value) {
    if (visualElement2.hasValue(key)) {
      visualElement2.getValue(key).set(value);
    } else {
      visualElement2.addValue(key, motionValue(value));
    }
  }
  function setTarget(visualElement2, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    var _a7 = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b3 = _a7.transitionEnd, transitionEnd = _b3 === void 0 ? {} : _b3;
    _a7.transition;
    var target = __rest(_a7, ["transitionEnd", "transition"]);
    target = __assign(__assign({}, target), transitionEnd);
    for (var key in target) {
      var value = resolveFinalValueInKeyframes(target[key]);
      setMotionValue(visualElement2, key, value);
    }
  }
  function checkTargetForNewValues(visualElement2, target, origin) {
    var _a7, _b3, _c3;
    var _d3;
    var newValueKeys = Object.keys(target).filter(function(key2) {
      return !visualElement2.hasValue(key2);
    });
    var numNewValues = newValueKeys.length;
    if (!numNewValues)
      return;
    for (var i = 0; i < numNewValues; i++) {
      var key = newValueKeys[i];
      var targetValue = target[key];
      var value = null;
      if (Array.isArray(targetValue)) {
        value = targetValue[0];
      }
      if (value === null) {
        value = (_b3 = (_a7 = origin[key]) !== null && _a7 !== void 0 ? _a7 : visualElement2.readValue(key)) !== null && _b3 !== void 0 ? _b3 : target[key];
      }
      if (value === void 0 || value === null)
        continue;
      if (typeof value === "string" && isNumericalString(value)) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(targetValue)) {
        value = getAnimatableNone2(key, targetValue);
      }
      visualElement2.addValue(key, motionValue(value));
      (_c3 = (_d3 = origin)[key]) !== null && _c3 !== void 0 ? _c3 : _d3[key] = value;
      visualElement2.setBaseTarget(key, value);
    }
  }
  function getOriginFromTransition(key, transition3) {
    if (!transition3)
      return;
    var valueTransition = transition3[key] || transition3["default"] || transition3;
    return valueTransition.from;
  }
  function getOrigin(target, transition3, visualElement2) {
    var _a7, _b3;
    var origin = {};
    for (var key in target) {
      origin[key] = (_a7 = getOriginFromTransition(key, transition3)) !== null && _a7 !== void 0 ? _a7 : (_b3 = visualElement2.getValue(key)) === null || _b3 === void 0 ? void 0 : _b3.get();
    }
    return origin;
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/animation.js
  function animateVisualElement(visualElement2, definition, options) {
    if (options === void 0) {
      options = {};
    }
    visualElement2.notifyAnimationStart();
    var animation;
    if (Array.isArray(definition)) {
      var animations2 = definition.map(function(variant) {
        return animateVariant(visualElement2, variant, options);
      });
      animation = Promise.all(animations2);
    } else if (typeof definition === "string") {
      animation = animateVariant(visualElement2, definition, options);
    } else {
      var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options.custom) : definition;
      animation = animateTarget(visualElement2, resolvedDefinition, options);
    }
    return animation.then(function() {
      return visualElement2.notifyAnimationComplete(definition);
    });
  }
  function animateVariant(visualElement2, variant, options) {
    var _a7;
    if (options === void 0) {
      options = {};
    }
    var resolved = resolveVariant(visualElement2, variant, options.custom);
    var _b3 = (resolved || {}).transition, transition3 = _b3 === void 0 ? visualElement2.getDefaultTransition() || {} : _b3;
    if (options.transitionOverride) {
      transition3 = options.transitionOverride;
    }
    var getAnimation2 = resolved ? function() {
      return animateTarget(visualElement2, resolved, options);
    } : function() {
      return Promise.resolve();
    };
    var getChildAnimations = ((_a7 = visualElement2.variantChildren) === null || _a7 === void 0 ? void 0 : _a7.size) ? function(forwardDelay) {
      if (forwardDelay === void 0) {
        forwardDelay = 0;
      }
      var _a8 = transition3.delayChildren, delayChildren = _a8 === void 0 ? 0 : _a8, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
      return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : function() {
      return Promise.resolve();
    };
    var when = transition3.when;
    if (when) {
      var _c3 = __read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c3[0], last = _c3[1];
      return first().then(last);
    } else {
      return Promise.all([getAnimation2(), getChildAnimations(options.delay)]);
    }
  }
  function animateTarget(visualElement2, definition, _a7) {
    var _b3;
    var _c3 = _a7 === void 0 ? {} : _a7, _d3 = _c3.delay, delay = _d3 === void 0 ? 0 : _d3, transitionOverride = _c3.transitionOverride, type = _c3.type;
    var _e2 = visualElement2.makeTargetAnimatable(definition), _f2 = _e2.transition, transition3 = _f2 === void 0 ? visualElement2.getDefaultTransition() : _f2, transitionEnd = _e2.transitionEnd, target = __rest(_e2, ["transition", "transitionEnd"]);
    if (transitionOverride)
      transition3 = transitionOverride;
    var animations2 = [];
    var animationTypeState = type && ((_b3 = visualElement2.animationState) === null || _b3 === void 0 ? void 0 : _b3.getState()[type]);
    for (var key in target) {
      var value = visualElement2.getValue(key);
      var valueTarget = target[key];
      if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
        continue;
      }
      var animation = startAnimation(key, value, valueTarget, __assign({ delay }, transition3));
      animations2.push(animation);
    }
    return Promise.all(animations2).then(function() {
      transitionEnd && setTarget(visualElement2, transitionEnd);
    });
  }
  function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options) {
    if (delayChildren === void 0) {
      delayChildren = 0;
    }
    if (staggerChildren === void 0) {
      staggerChildren = 0;
    }
    if (staggerDirection === void 0) {
      staggerDirection = 1;
    }
    var animations2 = [];
    var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
    var generateStaggerDuration = staggerDirection === 1 ? function(i) {
      if (i === void 0) {
        i = 0;
      }
      return i * staggerChildren;
    } : function(i) {
      if (i === void 0) {
        i = 0;
      }
      return maxStaggerDuration - i * staggerChildren;
    };
    Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
      animations2.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function() {
        return child.notifyAnimationComplete(variant);
      }));
    });
    return Promise.all(animations2);
  }
  function sortByTreeOrder(a2, b2) {
    return a2.sortNodePosition(b2);
  }
  function shouldBlockAnimation(_a7, key) {
    var protectedKeys = _a7.protectedKeys, needsAnimating = _a7.needsAnimating;
    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/animation-state.js
  var variantPriorityOrder = [
    AnimationType.Animate,
    AnimationType.Hover,
    AnimationType.Tap,
    AnimationType.Drag,
    AnimationType.Focus,
    AnimationType.Exit
  ];
  var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();
  var numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement2) {
    return function(animations2) {
      return Promise.all(animations2.map(function(_a7) {
        var animation = _a7.animation, options = _a7.options;
        return animateVisualElement(visualElement2, animation, options);
      }));
    };
  }
  function createAnimationState(visualElement2) {
    var animate2 = animateList(visualElement2);
    var state2 = createState();
    var allAnimatedKeys = {};
    var isInitialRender = true;
    var buildResolvedTypeValues = function(acc, definition) {
      var resolved = resolveVariant(visualElement2, definition);
      if (resolved) {
        resolved.transition;
        var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
        acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
      }
      return acc;
    };
    function isAnimated(key) {
      return allAnimatedKeys[key] !== void 0;
    }
    function setAnimateFunction(makeAnimator) {
      animate2 = makeAnimator(visualElement2);
    }
    function animateChanges(options, changedActiveType) {
      var _a7;
      var props = visualElement2.getProps();
      var context = visualElement2.getVariantContext(true) || {};
      var animations2 = [];
      var removedKeys = /* @__PURE__ */ new Set();
      var encounteredKeys = {};
      var removedVariantIndex = Infinity;
      var _loop_1 = function(i2) {
        var type = reversePriorityOrder[i2];
        var typeState = state2[type];
        var prop = (_a7 = props[type]) !== null && _a7 !== void 0 ? _a7 : context[type];
        var propIsVariant = isVariantLabel(prop);
        var activeDelta = type === changedActiveType ? typeState.isActive : null;
        if (activeDelta === false)
          removedVariantIndex = i2;
        var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
        if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
          isInherited = false;
        }
        typeState.protectedKeys = __assign({}, encounteredKeys);
        if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
          return "continue";
        }
        var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i2 > removedVariantIndex && propIsVariant;
        var definitionList = Array.isArray(prop) ? prop : [prop];
        var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
        if (activeDelta === false)
          resolvedValues = {};
        var _b3 = typeState.prevResolvedValues, prevResolvedValues = _b3 === void 0 ? {} : _b3;
        var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
        var markToAnimate = function(key2) {
          shouldAnimateType = true;
          removedKeys.delete(key2);
          typeState.needsAnimating[key2] = true;
        };
        for (var key in allKeys) {
          var next = resolvedValues[key];
          var prev = prevResolvedValues[key];
          if (encounteredKeys.hasOwnProperty(key))
            continue;
          if (next !== prev) {
            if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
              if (!shallowCompare(next, prev)) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            } else if (next !== void 0) {
              markToAnimate(key);
            } else {
              removedKeys.add(key);
            }
          } else if (next !== void 0 && removedKeys.has(key)) {
            markToAnimate(key);
          } else {
            typeState.protectedKeys[key] = true;
          }
        }
        typeState.prevProp = prop;
        typeState.prevResolvedValues = resolvedValues;
        if (typeState.isActive) {
          encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
        }
        if (isInitialRender && visualElement2.blockInitialAnimation) {
          shouldAnimateType = false;
        }
        if (shouldAnimateType && !isInherited) {
          animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
            return {
              animation,
              options: __assign({ type }, options)
            };
          }))));
        }
      };
      for (var i = 0; i < numAnimationTypes; i++) {
        _loop_1(i);
      }
      allAnimatedKeys = __assign({}, encounteredKeys);
      if (removedKeys.size) {
        var fallbackAnimation_1 = {};
        removedKeys.forEach(function(key) {
          var fallbackTarget = visualElement2.getBaseTarget(key);
          if (fallbackTarget !== void 0) {
            fallbackAnimation_1[key] = fallbackTarget;
          }
        });
        animations2.push({ animation: fallbackAnimation_1 });
      }
      var shouldAnimate = Boolean(animations2.length);
      if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
        shouldAnimate = false;
      }
      isInitialRender = false;
      return shouldAnimate ? animate2(animations2) : Promise.resolve();
    }
    function setActive(type, isActive, options) {
      var _a7;
      if (state2[type].isActive === isActive)
        return Promise.resolve();
      (_a7 = visualElement2.variantChildren) === null || _a7 === void 0 ? void 0 : _a7.forEach(function(child) {
        var _a8;
        return (_a8 = child.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(type, isActive);
      });
      state2[type].isActive = isActive;
      return animateChanges(options, type);
    }
    return {
      isAnimated,
      animateChanges,
      setActive,
      setAnimateFunction,
      getState: function() {
        return state2;
      }
    };
  }
  function variantsHaveChanged(prev, next) {
    if (typeof next === "string") {
      return next !== prev;
    } else if (isVariantLabels(next)) {
      return !shallowCompare(next, prev);
    }
    return false;
  }
  function createTypeState(isActive) {
    if (isActive === void 0) {
      isActive = false;
    }
    return {
      isActive,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {}
    };
  }
  function createState() {
    var _a7;
    return _a7 = {}, _a7[AnimationType.Animate] = createTypeState(true), _a7[AnimationType.Hover] = createTypeState(), _a7[AnimationType.Tap] = createTypeState(), _a7[AnimationType.Drag] = createTypeState(), _a7[AnimationType.Focus] = createTypeState(), _a7[AnimationType.Exit] = createTypeState(), _a7;
  }

  // ../../node_modules/framer-motion/dist/es/motion/features/animations.js
  var animations = {
    animation: makeRenderlessComponent(function(_a7) {
      var visualElement2 = _a7.visualElement, animate2 = _a7.animate;
      visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
      if (isAnimationControls(animate2)) {
        (0, import_react40.useEffect)(function() {
          return animate2.subscribe(visualElement2);
        }, [animate2]);
      }
    }),
    exit: makeRenderlessComponent(function(props) {
      var custom = props.custom, visualElement2 = props.visualElement;
      var _a7 = __read(usePresence(), 2), isPresent2 = _a7[0], onExitComplete = _a7[1];
      var presenceContext = (0, import_react40.useContext)(PresenceContext);
      (0, import_react40.useEffect)(function() {
        var _a8, _b3;
        var animation = (_a8 = visualElement2.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(AnimationType.Exit, !isPresent2, { custom: (_b3 = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b3 !== void 0 ? _b3 : custom });
        !isPresent2 && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));
      }, [isPresent2]);
    })
  };

  // ../../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
  var import_react41 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/gestures/PanSession.js
  var PanSession = function() {
    function PanSession2(event, handlers, _a7) {
      var _this = this;
      var _b3 = _a7 === void 0 ? {} : _a7, transformPagePoint = _b3.transformPagePoint;
      this.startEvent = null;
      this.lastMoveEvent = null;
      this.lastMoveEventInfo = null;
      this.handlers = {};
      this.updatePoint = function() {
        if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
          return;
        var info2 = getPanInfo(_this.lastMoveEventInfo, _this.history);
        var isPanStarted = _this.startEvent !== null;
        var isDistancePastThreshold = distance(info2.offset, { x: 0, y: 0 }) >= 3;
        if (!isPanStarted && !isDistancePastThreshold)
          return;
        var point2 = info2.point;
        var timestamp2 = getFrameData().timestamp;
        _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
        var _a8 = _this.handlers, onStart = _a8.onStart, onMove = _a8.onMove;
        if (!isPanStarted) {
          onStart && onStart(_this.lastMoveEvent, info2);
          _this.startEvent = _this.lastMoveEvent;
        }
        onMove && onMove(_this.lastMoveEvent, info2);
      };
      this.handlePointerMove = function(event2, info2) {
        _this.lastMoveEvent = event2;
        _this.lastMoveEventInfo = transformPoint(info2, _this.transformPagePoint);
        if (isMouseEvent(event2) && event2.buttons === 0) {
          _this.handlePointerUp(event2, info2);
          return;
        }
        es_default.update(_this.updatePoint, true);
      };
      this.handlePointerUp = function(event2, info2) {
        _this.end();
        var _a8 = _this.handlers, onEnd = _a8.onEnd, onSessionEnd = _a8.onSessionEnd;
        var panInfo = getPanInfo(transformPoint(info2, _this.transformPagePoint), _this.history);
        if (_this.startEvent && onEnd) {
          onEnd(event2, panInfo);
        }
        onSessionEnd && onSessionEnd(event2, panInfo);
      };
      if (isTouchEvent(event) && event.touches.length > 1)
        return;
      this.handlers = handlers;
      this.transformPagePoint = transformPagePoint;
      var info = extractEventInfo(event);
      var initialInfo = transformPoint(info, this.transformPagePoint);
      var point = initialInfo.point;
      var timestamp = getFrameData().timestamp;
      this.history = [__assign(__assign({}, point), { timestamp })];
      var onSessionStart = handlers.onSessionStart;
      onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
      this.removeListeners = pipe2(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
    }
    PanSession2.prototype.updateHandlers = function(handlers) {
      this.handlers = handlers;
    };
    PanSession2.prototype.end = function() {
      this.removeListeners && this.removeListeners();
      cancelSync.update(this.updatePoint);
    };
    return PanSession2;
  }();
  function transformPoint(info, transformPagePoint) {
    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
  }
  function subtractPoint(a2, b2) {
    return { x: a2.x - b2.x, y: a2.y - b2.y };
  }
  function getPanInfo(_a7, history) {
    var point = _a7.point;
    return {
      point,
      delta: subtractPoint(point, lastDevicePoint(history)),
      offset: subtractPoint(point, startDevicePoint(history)),
      velocity: getVelocity2(history, 0.1)
    };
  }
  function startDevicePoint(history) {
    return history[0];
  }
  function lastDevicePoint(history) {
    return history[history.length - 1];
  }
  function getVelocity2(history, timeDelta) {
    if (history.length < 2) {
      return { x: 0, y: 0 };
    }
    var i = history.length - 1;
    var timestampedPoint = null;
    var lastPoint = lastDevicePoint(history);
    while (i >= 0) {
      timestampedPoint = history[i];
      if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
        break;
      }
      i--;
    }
    if (!timestampedPoint) {
      return { x: 0, y: 0 };
    }
    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
    if (time === 0) {
      return { x: 0, y: 0 };
    }
    var currentVelocity = {
      x: (lastPoint.x - timestampedPoint.x) / time,
      y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) {
      currentVelocity.x = 0;
    }
    if (currentVelocity.y === Infinity) {
      currentVelocity.y = 0;
    }
    return currentVelocity;
  }

  // ../../node_modules/framer-motion/dist/es/utils/noop.js
  function noop2(any) {
    return any;
  }

  // ../../node_modules/framer-motion/dist/es/utils/geometry/index.js
  function convertBoundingBoxToAxisBox(_a7) {
    var top = _a7.top, left = _a7.left, right = _a7.right, bottom = _a7.bottom;
    return {
      x: { min: left, max: right },
      y: { min: top, max: bottom }
    };
  }
  function convertAxisBoxToBoundingBox(_a7) {
    var x = _a7.x, y = _a7.y;
    return {
      top: y.min,
      bottom: y.max,
      left: x.min,
      right: x.max
    };
  }
  function transformBoundingBox(_a7, transformPoint2) {
    var top = _a7.top, left = _a7.left, bottom = _a7.bottom, right = _a7.right;
    if (transformPoint2 === void 0) {
      transformPoint2 = noop2;
    }
    var topLeft = transformPoint2({ x: left, y: top });
    var bottomRight = transformPoint2({ x: right, y: bottom });
    return {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
  }
  function axisBox() {
    return { x: { min: 0, max: 1 }, y: { min: 0, max: 1 } };
  }
  function copyAxisBox(box) {
    return {
      x: __assign({}, box.x),
      y: __assign({}, box.y)
    };
  }
  var zeroDelta = {
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
  };
  function delta() {
    return {
      x: __assign({}, zeroDelta),
      y: __assign({}, zeroDelta)
    };
  }

  // ../../node_modules/framer-motion/dist/es/utils/each-axis.js
  function eachAxis(handler) {
    return [handler("x"), handler("y")];
  }

  // ../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js
  function applyConstraints(point, _a7, elastic) {
    var min = _a7.min, max = _a7.max;
    if (min !== void 0 && point < min) {
      point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);
    } else if (max !== void 0 && point > max) {
      point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);
    }
    return point;
  }
  function calcConstrainedMinPoint(point, length, progress2, constraints, elastic) {
    var min = point - length * progress2;
    return constraints ? applyConstraints(min, constraints, elastic) : min;
  }
  function calcRelativeAxisConstraints(axis, min, max) {
    return {
      min: min !== void 0 ? axis.min + min : void 0,
      max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
    };
  }
  function calcRelativeConstraints(layoutBox, _a7) {
    var top = _a7.top, left = _a7.left, bottom = _a7.bottom, right = _a7.right;
    return {
      x: calcRelativeAxisConstraints(layoutBox.x, left, right),
      y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
    };
  }
  function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    var _a7;
    var min = constraintsAxis.min - layoutAxis.min;
    var max = constraintsAxis.max - layoutAxis.max;
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
      _a7 = __read([max, min], 2), min = _a7[0], max = _a7[1];
    }
    return {
      min: layoutAxis.min + min,
      max: layoutAxis.min + max
    };
  }
  function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
      x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
      y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
  }
  function calcPositionFromProgress(axis, constraints, progress2) {
    var axisLength = axis.max - axis.min;
    var min = mix(constraints.min, constraints.max - axisLength, progress2);
    return { min, max: min + axisLength };
  }
  function rebaseAxisConstraints(layout2, constraints) {
    var relativeConstraints = {};
    if (constraints.min !== void 0) {
      relativeConstraints.min = constraints.min - layout2.min;
    }
    if (constraints.max !== void 0) {
      relativeConstraints.max = constraints.max - layout2.min;
    }
    return relativeConstraints;
  }
  var defaultElastic = 0.35;
  function resolveDragElastic(dragElastic) {
    if (dragElastic === false) {
      dragElastic = 0;
    } else if (dragElastic === true) {
      dragElastic = defaultElastic;
    }
    return {
      x: resolveAxisElastic(dragElastic, "left", "right"),
      y: resolveAxisElastic(dragElastic, "top", "bottom")
    };
  }
  function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
    return {
      min: resolvePointElastic(dragElastic, minLabel),
      max: resolvePointElastic(dragElastic, maxLabel)
    };
  }
  function resolvePointElastic(dragElastic, label) {
    var _a7;
    return typeof dragElastic === "number" ? dragElastic : (_a7 = dragElastic[label]) !== null && _a7 !== void 0 ? _a7 : 0;
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/projection/measure.js
  function getBoundingBox(element, transformPagePoint) {
    var box = element.getBoundingClientRect();
    return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));
  }

  // ../../node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js
  var clampProgress = function(v) {
    return clamp2(0, 1, v);
  };
  function isNear(value, target, maxDistance) {
    if (target === void 0) {
      target = 0;
    }
    if (maxDistance === void 0) {
      maxDistance = 0.01;
    }
    return distance(value, target) < maxDistance;
  }
  function calcLength(axis) {
    return axis.max - axis.min;
  }
  function calcOrigin2(source, target) {
    var origin = 0.5;
    var sourceLength = calcLength(source);
    var targetLength = calcLength(target);
    if (targetLength > sourceLength) {
      origin = progress(target.min, target.max - sourceLength, source.min);
    } else if (sourceLength > targetLength) {
      origin = progress(source.min, source.max - targetLength, target.min);
    }
    return clampProgress(origin);
  }
  function updateAxisDelta(delta2, source, target, origin) {
    if (origin === void 0) {
      origin = 0.5;
    }
    delta2.origin = origin;
    delta2.originPoint = mix(source.min, source.max, delta2.origin);
    delta2.scale = calcLength(target) / calcLength(source);
    if (isNear(delta2.scale, 1, 1e-4))
      delta2.scale = 1;
    delta2.translate = mix(target.min, target.max, delta2.origin) - delta2.originPoint;
    if (isNear(delta2.translate))
      delta2.translate = 0;
  }
  function updateBoxDelta(delta2, source, target, origin) {
    updateAxisDelta(delta2.x, source.x, target.x, defaultOrigin(origin.originX));
    updateAxisDelta(delta2.y, source.y, target.y, defaultOrigin(origin.originY));
  }
  function defaultOrigin(origin) {
    return typeof origin === "number" ? origin : 0.5;
  }
  function calcRelativeAxis(target, relative, parent) {
    target.min = parent.min + relative.min;
    target.max = target.min + calcLength(relative);
  }
  function calcRelativeBox(projection, parentProjection) {
    calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);
    calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js
  var compareByDepth = function(a2, b2) {
    return a2.depth - b2.depth;
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/projection/utils.js
  function isProjecting(visualElement2) {
    var isEnabled = visualElement2.projection.isEnabled;
    return isEnabled || visualElement2.shouldResetTransform();
  }
  function collectProjectingAncestors(visualElement2, ancestors) {
    if (ancestors === void 0) {
      ancestors = [];
    }
    var parent = visualElement2.parent;
    if (parent)
      collectProjectingAncestors(parent, ancestors);
    if (isProjecting(visualElement2))
      ancestors.push(visualElement2);
    return ancestors;
  }
  function collectProjectingChildren(visualElement2) {
    var children = [];
    var addChild = function(child) {
      if (isProjecting(child))
        children.push(child);
      child.children.forEach(addChild);
    };
    visualElement2.children.forEach(addChild);
    return children.sort(compareByDepth);
  }
  function updateLayoutMeasurement(visualElement2) {
    if (visualElement2.shouldResetTransform())
      return;
    var layoutState = visualElement2.getLayoutState();
    visualElement2.notifyBeforeLayoutMeasure(layoutState.layout);
    layoutState.isHydrated = true;
    layoutState.layout = visualElement2.measureViewportBox();
    layoutState.layoutCorrected = copyAxisBox(layoutState.layout);
    visualElement2.notifyLayoutMeasure(layoutState.layout, visualElement2.prevViewportBox || layoutState.layout);
    es_default.update(function() {
      return visualElement2.rebaseProjectionTarget();
    });
  }
  function snapshotViewportBox(visualElement2) {
    if (visualElement2.shouldResetTransform())
      return;
    visualElement2.prevViewportBox = visualElement2.measureViewportBox(false);
    visualElement2.rebaseProjectionTarget(false, visualElement2.prevViewportBox);
  }

  // ../../node_modules/framer-motion/dist/es/motion/features/layout/utils.js
  function tweenAxis(target, prev, next, p) {
    target.min = mix(prev.min, next.min, p);
    target.max = mix(prev.max, next.max, p);
  }
  function calcRelativeOffsetAxis(parent, child) {
    return {
      min: child.min - parent.min,
      max: child.max - parent.min
    };
  }
  function calcRelativeOffset(parent, child) {
    return {
      x: calcRelativeOffsetAxis(parent.x, child.x),
      y: calcRelativeOffsetAxis(parent.y, child.y)
    };
  }
  function checkIfParentHasChanged(prev, next) {
    var prevId = prev.getLayoutId();
    var nextId = next.getLayoutId();
    return prevId !== nextId || nextId === void 0 && prev !== next;
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/is-draggable.js
  function isDraggable(visualElement2) {
    var _a7 = visualElement2.getProps(), drag2 = _a7.drag, _dragX = _a7._dragX;
    return drag2 && !_dragX;
  }

  // ../../node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js
  function resetAxis(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
  }
  function resetBox(box, originBox) {
    resetAxis(box.x, originBox.x);
    resetAxis(box.y, originBox.y);
  }
  function scalePoint(point, scale2, originPoint) {
    var distanceFromOrigin = point - originPoint;
    var scaled = scale2 * distanceFromOrigin;
    return originPoint + scaled;
  }
  function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
    if (boxScale !== void 0) {
      point = scalePoint(point, boxScale, originPoint);
    }
    return scalePoint(point, scale2, originPoint) + translate;
  }
  function applyAxisDelta(axis, translate, scale2, originPoint, boxScale) {
    if (translate === void 0) {
      translate = 0;
    }
    if (scale2 === void 0) {
      scale2 = 1;
    }
    axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function applyBoxDelta(box, _a7) {
    var x = _a7.x, y = _a7.y;
    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
  }
  function applyAxisTransforms(final, axis, transforms, _a7) {
    var _b3 = __read(_a7, 3), key = _b3[0], scaleKey = _b3[1], originKey = _b3[2];
    final.min = axis.min;
    final.max = axis.max;
    var axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
    var originPoint = mix(axis.min, axis.max, axisOrigin);
    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
  }
  var xKeys = ["x", "scaleX", "originX"];
  var yKeys = ["y", "scaleY", "originY"];
  function applyBoxTransforms(finalBox, box, transforms) {
    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);
    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);
  }
  function removePointDelta(point, translate, scale2, originPoint, boxScale) {
    point -= translate;
    point = scalePoint(point, 1 / scale2, originPoint);
    if (boxScale !== void 0) {
      point = scalePoint(point, 1 / boxScale, originPoint);
    }
    return point;
  }
  function removeAxisDelta(axis, translate, scale2, origin, boxScale) {
    if (translate === void 0) {
      translate = 0;
    }
    if (scale2 === void 0) {
      scale2 = 1;
    }
    if (origin === void 0) {
      origin = 0.5;
    }
    var originPoint = mix(axis.min, axis.max, origin) - translate;
    axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function removeAxisTransforms(axis, transforms, _a7) {
    var _b3 = __read(_a7, 3), key = _b3[0], scaleKey = _b3[1], originKey = _b3[2];
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);
  }
  function removeBoxTransforms(box, transforms) {
    removeAxisTransforms(box.x, transforms, xKeys);
    removeAxisTransforms(box.y, transforms, yKeys);
  }
  function applyTreeDeltas(box, treeScale, treePath) {
    var treeLength = treePath.length;
    if (!treeLength)
      return;
    treeScale.x = treeScale.y = 1;
    var node;
    var delta2;
    for (var i = 0; i < treeLength; i++) {
      node = treePath[i];
      delta2 = node.getLayoutState().delta;
      treeScale.x *= delta2.x.scale;
      treeScale.y *= delta2.y.scale;
      applyBoxDelta(box, delta2);
      if (isDraggable(node)) {
        applyBoxTransforms(box, box, node.getLatestValues());
      }
    }
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js
  function convertToRelativeProjection(visualElement2, isLayoutDrag) {
    if (isLayoutDrag === void 0) {
      isLayoutDrag = true;
    }
    var projectionParent = visualElement2.getProjectionParent();
    if (!projectionParent)
      return false;
    var offset;
    if (isLayoutDrag) {
      offset = calcRelativeOffset(projectionParent.projection.target, visualElement2.projection.target);
      removeBoxTransforms(offset, projectionParent.getLatestValues());
    } else {
      offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
    }
    eachAxis(function(axis) {
      return visualElement2.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);
    });
    return true;
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js
  var unresolvedJobs = /* @__PURE__ */ new Set();
  function pushJob(stack, job, pointer) {
    if (!stack[pointer])
      stack[pointer] = [];
    stack[pointer].push(job);
  }
  function batchLayout(callback) {
    unresolvedJobs.add(callback);
    return function() {
      return unresolvedJobs.delete(callback);
    };
  }
  function flushLayout() {
    if (!unresolvedJobs.size)
      return;
    var pointer = 0;
    var reads = [[]];
    var writes = [];
    var setRead = function(job) {
      return pushJob(reads, job, pointer);
    };
    var setWrite = function(job) {
      pushJob(writes, job, pointer);
      pointer++;
    };
    unresolvedJobs.forEach(function(callback) {
      callback(setRead, setWrite);
      pointer = 0;
    });
    unresolvedJobs.clear();
    var numStacks = writes.length;
    for (var i = 0; i <= numStacks; i++) {
      reads[i] && reads[i].forEach(executeJob);
      writes[i] && writes[i].forEach(executeJob);
    }
  }
  var executeJob = function(job) {
    return job();
  };

  // ../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js
  var elementDragControls = /* @__PURE__ */ new WeakMap();
  var lastPointerEvent;
  var VisualElementDragControls = function() {
    function VisualElementDragControls2(_a7) {
      var visualElement2 = _a7.visualElement;
      this.isDragging = false;
      this.currentDirection = null;
      this.constraints = false;
      this.elastic = axisBox();
      this.props = {};
      this.hasMutatedConstraints = false;
      this.cursorProgress = {
        x: 0.5,
        y: 0.5
      };
      this.originPoint = {};
      this.openGlobalLock = null;
      this.panSession = null;
      this.visualElement = visualElement2;
      this.visualElement.enableLayoutProjection();
      elementDragControls.set(visualElement2, this);
    }
    VisualElementDragControls2.prototype.start = function(originEvent, _a7) {
      var _this = this;
      var _b3 = _a7 === void 0 ? {} : _a7, _c3 = _b3.snapToCursor, snapToCursor = _c3 === void 0 ? false : _c3, cursorProgress = _b3.cursorProgress;
      var onSessionStart = function(event) {
        var _a8;
        _this.stopMotion();
        var initialPoint = getViewportPointFromEvent(event).point;
        (_a8 = _this.cancelLayout) === null || _a8 === void 0 ? void 0 : _a8.call(_this);
        _this.cancelLayout = batchLayout(function(read, write) {
          var ancestors = collectProjectingAncestors(_this.visualElement);
          var children = collectProjectingChildren(_this.visualElement);
          var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));
          var hasManuallySetCursorOrigin = false;
          _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();
          write(function() {
            tree.forEach(function(element) {
              return element.resetTransform();
            });
          });
          read(function() {
            updateLayoutMeasurement(_this.visualElement);
            children.forEach(updateLayoutMeasurement);
          });
          write(function() {
            tree.forEach(function(element) {
              return element.restoreTransform();
            });
            if (snapToCursor) {
              hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);
            }
          });
          read(function() {
            var isRelativeDrag = Boolean(_this.getAxisMotionValue("x") && !_this.isExternalDrag());
            if (!isRelativeDrag) {
              _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));
            }
            _this.visualElement.scheduleUpdateLayoutProjection();
            var projection = _this.visualElement.projection;
            eachAxis(function(axis) {
              if (!hasManuallySetCursorOrigin) {
                var _a9 = projection.target[axis], min = _a9.min, max = _a9.max;
                _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress(min, max, initialPoint[axis]);
              }
              var axisValue = _this.getAxisMotionValue(axis);
              if (axisValue) {
                _this.originPoint[axis] = axisValue.get();
              }
            });
          });
          write(function() {
            flushSync.update();
            flushSync.preRender();
            flushSync.render();
            flushSync.postRender();
          });
          read(function() {
            return _this.resolveDragConstraints();
          });
        });
      };
      var onStart = function(event, info) {
        var _a8, _b4, _c4;
        var _d3 = _this.props, drag2 = _d3.drag, dragPropagation = _d3.dragPropagation;
        if (drag2 && !dragPropagation) {
          if (_this.openGlobalLock)
            _this.openGlobalLock();
          _this.openGlobalLock = getGlobalLock(drag2);
          if (!_this.openGlobalLock)
            return;
        }
        flushLayout();
        _this.isDragging = true;
        _this.currentDirection = null;
        (_b4 = (_a8 = _this.props).onDragStart) === null || _b4 === void 0 ? void 0 : _b4.call(_a8, event, info);
        (_c4 = _this.visualElement.animationState) === null || _c4 === void 0 ? void 0 : _c4.setActive(AnimationType.Drag, true);
      };
      var onMove = function(event, info) {
        var _a8, _b4, _c4, _d3;
        var _e2 = _this.props, dragPropagation = _e2.dragPropagation, dragDirectionLock = _e2.dragDirectionLock;
        if (!dragPropagation && !_this.openGlobalLock)
          return;
        var offset = info.offset;
        if (dragDirectionLock && _this.currentDirection === null) {
          _this.currentDirection = getCurrentDirection(offset);
          if (_this.currentDirection !== null) {
            (_b4 = (_a8 = _this.props).onDirectionLock) === null || _b4 === void 0 ? void 0 : _b4.call(_a8, _this.currentDirection);
          }
          return;
        }
        _this.updateAxis("x", info.point, offset);
        _this.updateAxis("y", info.point, offset);
        (_d3 = (_c4 = _this.props).onDrag) === null || _d3 === void 0 ? void 0 : _d3.call(_c4, event, info);
        lastPointerEvent = event;
      };
      var onSessionEnd = function(event, info) {
        return _this.stop(event, info);
      };
      var transformPagePoint = this.props.transformPagePoint;
      this.panSession = new PanSession(originEvent, {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd
      }, { transformPagePoint });
    };
    VisualElementDragControls2.prototype.resolveDragConstraints = function() {
      var _this = this;
      var _a7 = this.props, dragConstraints = _a7.dragConstraints, dragElastic = _a7.dragElastic;
      var layout2 = this.visualElement.getLayoutState().layoutCorrected;
      if (dragConstraints) {
        this.constraints = isRefObject(dragConstraints) ? this.resolveRefConstraints(layout2, dragConstraints) : calcRelativeConstraints(layout2, dragConstraints);
      } else {
        this.constraints = false;
      }
      this.elastic = resolveDragElastic(dragElastic);
      if (this.constraints && !this.hasMutatedConstraints) {
        eachAxis(function(axis) {
          if (_this.getAxisMotionValue(axis)) {
            _this.constraints[axis] = rebaseAxisConstraints(layout2[axis], _this.constraints[axis]);
          }
        });
      }
    };
    VisualElementDragControls2.prototype.resolveRefConstraints = function(layoutBox, constraints) {
      var _a7 = this.props, onMeasureDragConstraints = _a7.onMeasureDragConstraints, transformPagePoint = _a7.transformPagePoint;
      var constraintsElement = constraints.current;
      invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
      this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);
      var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);
      if (onMeasureDragConstraints) {
        var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));
        this.hasMutatedConstraints = !!userConstraints;
        if (userConstraints) {
          measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);
        }
      }
      return measuredConstraints;
    };
    VisualElementDragControls2.prototype.cancelDrag = function() {
      var _a7, _b3;
      this.visualElement.unlockProjectionTarget();
      (_a7 = this.cancelLayout) === null || _a7 === void 0 ? void 0 : _a7.call(this);
      this.isDragging = false;
      this.panSession && this.panSession.end();
      this.panSession = null;
      if (!this.props.dragPropagation && this.openGlobalLock) {
        this.openGlobalLock();
        this.openGlobalLock = null;
      }
      (_b3 = this.visualElement.animationState) === null || _b3 === void 0 ? void 0 : _b3.setActive(AnimationType.Drag, false);
    };
    VisualElementDragControls2.prototype.stop = function(event, info) {
      var _a7, _b3, _c3;
      (_a7 = this.panSession) === null || _a7 === void 0 ? void 0 : _a7.end();
      this.panSession = null;
      var isDragging = this.isDragging;
      this.cancelDrag();
      if (!isDragging)
        return;
      var velocity = info.velocity;
      this.animateDragEnd(velocity);
      (_c3 = (_b3 = this.props).onDragEnd) === null || _c3 === void 0 ? void 0 : _c3.call(_b3, event, info);
    };
    VisualElementDragControls2.prototype.snapToCursor = function(point) {
      var _this = this;
      return eachAxis(function(axis) {
        var drag2 = _this.props.drag;
        if (!shouldDrag(axis, drag2, _this.currentDirection))
          return;
        var axisValue = _this.getAxisMotionValue(axis);
        if (axisValue) {
          var box = _this.visualElement.getLayoutState().layout;
          var length_1 = box[axis].max - box[axis].min;
          var center = box[axis].min + length_1 / 2;
          var offset = point[axis] - center;
          _this.originPoint[axis] = point[axis];
          axisValue.set(offset);
        } else {
          _this.cursorProgress[axis] = 0.5;
          return true;
        }
      }).includes(true);
    };
    VisualElementDragControls2.prototype.updateAxis = function(axis, point, offset) {
      var drag2 = this.props.drag;
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset) : this.updateVisualElementAxis(axis, point);
    };
    VisualElementDragControls2.prototype.updateAxisMotionValue = function(axis, offset) {
      var axisValue = this.getAxisMotionValue(axis);
      if (!offset || !axisValue)
        return;
      var nextValue = this.originPoint[axis] + offset[axis];
      var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;
      axisValue.set(update);
    };
    VisualElementDragControls2.prototype.updateVisualElementAxis = function(axis, point) {
      var _a7;
      var axisLayout = this.visualElement.getLayoutState().layout[axis];
      var axisLength = axisLayout.max - axisLayout.min;
      var axisProgress = this.cursorProgress[axis];
      var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a7 = this.constraints) === null || _a7 === void 0 ? void 0 : _a7[axis], this.elastic[axis]);
      this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);
    };
    VisualElementDragControls2.prototype.setProps = function(_a7) {
      var _b3 = _a7.drag, drag2 = _b3 === void 0 ? false : _b3, _c3 = _a7.dragDirectionLock, dragDirectionLock = _c3 === void 0 ? false : _c3, _d3 = _a7.dragPropagation, dragPropagation = _d3 === void 0 ? false : _d3, _e2 = _a7.dragConstraints, dragConstraints = _e2 === void 0 ? false : _e2, _f2 = _a7.dragElastic, dragElastic = _f2 === void 0 ? defaultElastic : _f2, _g2 = _a7.dragMomentum, dragMomentum = _g2 === void 0 ? true : _g2, remainingProps = __rest(_a7, ["drag", "dragDirectionLock", "dragPropagation", "dragConstraints", "dragElastic", "dragMomentum"]);
      this.props = __assign({
        drag: drag2,
        dragDirectionLock,
        dragPropagation,
        dragConstraints,
        dragElastic,
        dragMomentum
      }, remainingProps);
    };
    VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
      var _a7 = this.props, layout2 = _a7.layout, layoutId = _a7.layoutId;
      var dragKey = "_drag" + axis.toUpperCase();
      if (this.props[dragKey]) {
        return this.props[dragKey];
      } else if (!layout2 && layoutId === void 0) {
        return this.visualElement.getValue(axis, 0);
      }
    };
    VisualElementDragControls2.prototype.isLayoutDrag = function() {
      return !this.getAxisMotionValue("x");
    };
    VisualElementDragControls2.prototype.isExternalDrag = function() {
      var _a7 = this.props, _dragX = _a7._dragX, _dragY = _a7._dragY;
      return _dragX || _dragY;
    };
    VisualElementDragControls2.prototype.animateDragEnd = function(velocity) {
      var _this = this;
      var _a7 = this.props, drag2 = _a7.drag, dragMomentum = _a7.dragMomentum, dragElastic = _a7.dragElastic, dragTransition = _a7.dragTransition;
      var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());
      var constraints = this.constraints || {};
      if (isRelative && Object.keys(constraints).length && this.isLayoutDrag()) {
        var projectionParent = this.visualElement.getProjectionParent();
        if (projectionParent) {
          var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);
          eachAxis(function(axis) {
            var _a8 = relativeConstraints_1[axis], min = _a8.min, max = _a8.max;
            constraints[axis] = {
              min: isNaN(min) ? void 0 : min,
              max: isNaN(max) ? void 0 : max
            };
          });
        }
      }
      var momentumAnimations = eachAxis(function(axis) {
        var _a8;
        if (!shouldDrag(axis, drag2, _this.currentDirection)) {
          return;
        }
        var transition3 = (_a8 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a8 !== void 0 ? _a8 : {};
        var bounceStiffness = dragElastic ? 200 : 1e6;
        var bounceDamping = dragElastic ? 40 : 1e7;
        var inertia2 = __assign(__assign({
          type: "inertia",
          velocity: dragMomentum ? velocity[axis] : 0,
          bounceStiffness,
          bounceDamping,
          timeConstant: 750,
          restDelta: 1,
          restSpeed: 10
        }, dragTransition), transition3);
        return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia2) : _this.visualElement.startLayoutAnimation(axis, inertia2, isRelative);
      });
      return Promise.all(momentumAnimations).then(function() {
        var _a8, _b3;
        (_b3 = (_a8 = _this.props).onDragTransitionEnd) === null || _b3 === void 0 ? void 0 : _b3.call(_a8);
      });
    };
    VisualElementDragControls2.prototype.stopMotion = function() {
      var _this = this;
      eachAxis(function(axis) {
        var axisValue = _this.getAxisMotionValue(axis);
        axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();
      });
    };
    VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition3) {
      var axisValue = this.getAxisMotionValue(axis);
      if (!axisValue)
        return;
      var currentValue = axisValue.get();
      axisValue.set(currentValue);
      axisValue.set(currentValue);
      return startAnimation(axis, axisValue, 0, transition3);
    };
    VisualElementDragControls2.prototype.scalePoint = function() {
      var _this = this;
      var _a7 = this.props, drag2 = _a7.drag, dragConstraints = _a7.dragConstraints;
      if (!isRefObject(dragConstraints) || !this.constraintsBox)
        return;
      this.stopMotion();
      var boxProgress = { x: 0, y: 0 };
      eachAxis(function(axis) {
        boxProgress[axis] = calcOrigin2(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);
      });
      this.updateConstraints(function() {
        eachAxis(function(axis) {
          if (!shouldDrag(axis, drag2, null))
            return;
          var _a8 = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a8.min, max = _a8.max;
          _this.visualElement.setProjectionTargetAxis(axis, min, max);
        });
      });
      setTimeout(flushLayout, 1);
    };
    VisualElementDragControls2.prototype.updateConstraints = function(onReady) {
      var _this = this;
      this.cancelLayout = batchLayout(function(read, write) {
        var ancestors = collectProjectingAncestors(_this.visualElement);
        write(function() {
          return ancestors.forEach(function(element) {
            return element.resetTransform();
          });
        });
        read(function() {
          return updateLayoutMeasurement(_this.visualElement);
        });
        write(function() {
          return ancestors.forEach(function(element) {
            return element.restoreTransform();
          });
        });
        read(function() {
          _this.resolveDragConstraints();
        });
        if (onReady)
          write(onReady);
      });
    };
    VisualElementDragControls2.prototype.mount = function(visualElement2) {
      var _this = this;
      var element = visualElement2.getInstance();
      var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
        var _a7 = _this.props, drag2 = _a7.drag, _b3 = _a7.dragListener, dragListener = _b3 === void 0 ? true : _b3;
        drag2 && dragListener && _this.start(event);
      });
      var stopResizeListener = addDomEvent(window, "resize", function() {
        _this.scalePoint();
      });
      var stopLayoutUpdateListener = visualElement2.onLayoutUpdate(function() {
        if (_this.isDragging) {
          _this.resolveDragConstraints();
        }
      });
      var prevDragCursor = visualElement2.prevDragCursor;
      if (prevDragCursor) {
        this.start(lastPointerEvent, { cursorProgress: prevDragCursor });
      }
      return function() {
        stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();
        stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();
        stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();
        _this.cancelDrag();
      };
    };
    return VisualElementDragControls2;
  }();
  function shouldDrag(direction2, drag2, currentDirection) {
    return (drag2 === true || drag2 === direction2) && (currentDirection === null || currentDirection === direction2);
  }
  function getCurrentDirection(offset, lockThreshold) {
    if (lockThreshold === void 0) {
      lockThreshold = 10;
    }
    var direction2 = null;
    if (Math.abs(offset.y) > lockThreshold) {
      direction2 = "y";
    } else if (Math.abs(offset.x) > lockThreshold) {
      direction2 = "x";
    }
    return direction2;
  }

  // ../../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
  function useDrag(props) {
    var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
    var transformPagePoint = (0, import_react41.useContext)(MotionConfigContext).transformPagePoint;
    var dragControls = useConstant(function() {
      return new VisualElementDragControls({
        visualElement: visualElement2
      });
    });
    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint }));
    (0, import_react41.useEffect)(function() {
      return groupDragControls && groupDragControls.subscribe(dragControls);
    }, [dragControls]);
    (0, import_react41.useEffect)(function() {
      return dragControls.mount(visualElement2);
    }, []);
  }

  // ../../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js
  var import_react42 = __toESM(require_react());
  function usePanGesture(_a7) {
    var onPan = _a7.onPan, onPanStart = _a7.onPanStart, onPanEnd = _a7.onPanEnd, onPanSessionStart = _a7.onPanSessionStart, visualElement2 = _a7.visualElement;
    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
    var panSession = (0, import_react42.useRef)(null);
    var transformPagePoint = (0, import_react42.useContext)(MotionConfigContext).transformPagePoint;
    var handlers = {
      onSessionStart: onPanSessionStart,
      onStart: onPanStart,
      onMove: onPan,
      onEnd: function(event, info) {
        panSession.current = null;
        onPanEnd && onPanEnd(event, info);
      }
    };
    (0, import_react42.useEffect)(function() {
      if (panSession.current !== null) {
        panSession.current.updateHandlers(handlers);
      }
    });
    function onPointerDown(event) {
      panSession.current = new PanSession(event, handlers, {
        transformPagePoint
      });
    }
    usePointerEvent(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
    useUnmountEffect(function() {
      return panSession.current && panSession.current.end();
    });
  }

  // ../../node_modules/framer-motion/dist/es/motion/features/drag.js
  var drag = {
    pan: makeRenderlessComponent(usePanGesture),
    drag: makeRenderlessComponent(useDrag)
  };

  // ../../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
  var React6 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/types.js
  var Presence;
  (function(Presence2) {
    Presence2[Presence2["Entering"] = 0] = "Entering";
    Presence2[Presence2["Present"] = 1] = "Present";
    Presence2[Presence2["Exiting"] = 2] = "Exiting";
  })(Presence || (Presence = {}));
  var VisibilityAction;
  (function(VisibilityAction2) {
    VisibilityAction2[VisibilityAction2["Hide"] = 0] = "Hide";
    VisibilityAction2[VisibilityAction2["Show"] = 1] = "Show";
  })(VisibilityAction || (VisibilityAction = {}));

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js
  function isCSSVariable2(value) {
    return typeof value === "string" && value.startsWith("var(--");
  }
  var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  function parseCSSVariable(current) {
    var match = cssVariableRegex.exec(current);
    if (!match)
      return [,];
    var _a7 = __read(match, 3), token = _a7[1], fallback = _a7[2];
    return [token, fallback];
  }
  var maxDepth = 4;
  function getVariableValue(current, element, depth) {
    if (depth === void 0) {
      depth = 1;
    }
    invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "' + current + '". This may indicate a circular fallback dependency.');
    var _a7 = __read(parseCSSVariable(current), 2), token = _a7[0], fallback = _a7[1];
    if (!token)
      return;
    var resolved = window.getComputedStyle(element).getPropertyValue(token);
    if (resolved) {
      return resolved.trim();
    } else if (isCSSVariable2(fallback)) {
      return getVariableValue(fallback, element, depth + 1);
    } else {
      return fallback;
    }
  }
  function resolveCSSVariables(visualElement2, _a7, transitionEnd) {
    var _b3;
    var target = __rest(_a7, []);
    var element = visualElement2.getInstance();
    if (!(element instanceof HTMLElement))
      return { target, transitionEnd };
    if (transitionEnd) {
      transitionEnd = __assign({}, transitionEnd);
    }
    visualElement2.forEachValue(function(value) {
      var current2 = value.get();
      if (!isCSSVariable2(current2))
        return;
      var resolved2 = getVariableValue(current2, element);
      if (resolved2)
        value.set(resolved2);
    });
    for (var key in target) {
      var current = target[key];
      if (!isCSSVariable2(current))
        continue;
      var resolved = getVariableValue(current, element);
      if (!resolved)
        continue;
      target[key] = resolved;
      if (transitionEnd)
        (_b3 = transitionEnd[key]) !== null && _b3 !== void 0 ? _b3 : transitionEnd[key] = current;
    }
    return { target, transitionEnd };
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js
  function pixelsToPercent(pixels, axis) {
    return pixels / (axis.max - axis.min) * 100;
  }
  function correctBorderRadius(latest, _layoutState, _a7) {
    var target = _a7.target;
    if (typeof latest === "string") {
      if (px2.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    var x = pixelsToPercent(latest, target.x);
    var y = pixelsToPercent(latest, target.y);
    return x + "% " + y + "%";
  }
  var varToken = "_$css";
  function correctBoxShadow(latest, _a7) {
    var delta2 = _a7.delta, treeScale = _a7.treeScale;
    var original = latest;
    var containsCSSVariables = latest.includes("var(");
    var cssVariables = [];
    if (containsCSSVariables) {
      latest = latest.replace(cssVariableRegex, function(match) {
        cssVariables.push(match);
        return varToken;
      });
    }
    var shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    var template = complex.createTransformer(latest);
    var offset = typeof shadow[0] !== "number" ? 1 : 0;
    var xScale = delta2.x.scale * treeScale.x;
    var yScale = delta2.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    var averageScale = mix(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset] === "number")
      shadow[2 + offset] /= averageScale;
    if (typeof shadow[3 + offset] === "number")
      shadow[3 + offset] /= averageScale;
    var output = template(shadow);
    if (containsCSSVariables) {
      var i_1 = 0;
      output = output.replace(varToken, function() {
        var cssVariable = cssVariables[i_1];
        i_1++;
        return cssVariable;
      });
    }
    return output;
  }
  var borderCorrectionDefinition = {
    process: correctBorderRadius
  };
  var defaultScaleCorrectors = {
    borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ] }),
    borderTopLeftRadius: borderCorrectionDefinition,
    borderTopRightRadius: borderCorrectionDefinition,
    borderBottomLeftRadius: borderCorrectionDefinition,
    borderBottomRightRadius: borderCorrectionDefinition,
    boxShadow: {
      process: correctBoxShadow
    }
  };

  // ../../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
  var progressTarget = 1e3;
  var Animate = function(_super) {
    __extends(Animate2, _super);
    function Animate2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.frameTarget = axisBox();
      _this.currentAnimationTarget = axisBox();
      _this.isAnimating = {
        x: false,
        y: false
      };
      _this.stopAxisAnimation = {
        x: void 0,
        y: void 0
      };
      _this.isAnimatingTree = false;
      _this.animate = function(target, origin, _a7) {
        if (_a7 === void 0) {
          _a7 = {};
        }
        var originBox = _a7.originBox, targetBox = _a7.targetBox, visibilityAction = _a7.visibilityAction, shouldStackAnimate = _a7.shouldStackAnimate, onComplete = _a7.onComplete, prevParent = _a7.prevParent, config2 = __rest(_a7, ["originBox", "targetBox", "visibilityAction", "shouldStackAnimate", "onComplete", "prevParent"]);
        var _b3 = _this.props, visualElement2 = _b3.visualElement, layout2 = _b3.layout;
        if (shouldStackAnimate === false) {
          _this.isAnimatingTree = false;
          return _this.safeToRemove();
        }
        if (_this.isAnimatingTree && shouldStackAnimate !== true) {
          return;
        } else if (shouldStackAnimate) {
          _this.isAnimatingTree = true;
        }
        origin = originBox || origin;
        target = targetBox || target;
        var isRelative = false;
        var projectionParent = visualElement2.getProjectionParent();
        if (projectionParent) {
          var prevParentViewportBox = projectionParent.prevViewportBox;
          var parentLayout = projectionParent.getLayoutState().layout;
          if (prevParent) {
            if (targetBox) {
              parentLayout = prevParent.getLayoutState().layout;
            }
            if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) {
              prevParentViewportBox = prevParent.prevViewportBox;
            }
          }
          if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {
            isRelative = true;
            origin = calcRelativeOffset(prevParentViewportBox, origin);
            target = calcRelativeOffset(parentLayout, target);
          }
        }
        var boxHasMoved = hasMoved(origin, target);
        var animations2 = eachAxis(function(axis) {
          var _a8, _b4;
          if (layout2 === "position") {
            var targetLength = target[axis].max - target[axis].min;
            origin[axis].max = origin[axis].min + targetLength;
          }
          if (visualElement2.projection.isTargetLocked) {
            return;
          } else if (visibilityAction !== void 0) {
            visualElement2.setVisibility(visibilityAction === VisibilityAction.Show);
          } else if (boxHasMoved) {
            return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config2), { isRelative }));
          } else {
            (_b4 = (_a8 = _this.stopAxisAnimation)[axis]) === null || _b4 === void 0 ? void 0 : _b4.call(_a8);
            return visualElement2.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);
          }
        });
        visualElement2.syncRender();
        return Promise.all(animations2).then(function() {
          _this.isAnimatingTree = false;
          onComplete && onComplete();
          visualElement2.notifyLayoutAnimationComplete();
        });
      };
      return _this;
    }
    Animate2.prototype.componentDidMount = function() {
      var _this = this;
      var visualElement2 = this.props.visualElement;
      visualElement2.animateMotionValue = startAnimation;
      visualElement2.enableLayoutProjection();
      this.unsubLayoutReady = visualElement2.onLayoutUpdate(this.animate);
      visualElement2.layoutSafeToRemove = function() {
        return _this.safeToRemove();
      };
      addScaleCorrection(defaultScaleCorrectors);
    };
    Animate2.prototype.componentWillUnmount = function() {
      var _this = this;
      this.unsubLayoutReady();
      eachAxis(function(axis) {
        var _a7, _b3;
        return (_b3 = (_a7 = _this.stopAxisAnimation)[axis]) === null || _b3 === void 0 ? void 0 : _b3.call(_a7);
      });
    };
    Animate2.prototype.animateAxis = function(axis, target, origin, _a7) {
      var _this = this;
      var _b3, _c3;
      var _d3 = _a7 === void 0 ? {} : _a7, transition3 = _d3.transition, isRelative = _d3.isRelative;
      if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {
        return;
      }
      (_c3 = (_b3 = this.stopAxisAnimation)[axis]) === null || _c3 === void 0 ? void 0 : _c3.call(_b3);
      this.isAnimating[axis] = true;
      var visualElement2 = this.props.visualElement;
      var frameTarget = this.frameTarget[axis];
      var layoutProgress = visualElement2.getProjectionAnimationProgress()[axis];
      layoutProgress.clearListeners();
      layoutProgress.set(0);
      layoutProgress.set(0);
      var frame2 = function() {
        var p = layoutProgress.get() / progressTarget;
        tweenAxis(frameTarget, origin, target, p);
        visualElement2.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);
      };
      frame2();
      var unsubscribeProgress = layoutProgress.onChange(frame2);
      this.stopAxisAnimation[axis] = function() {
        _this.isAnimating[axis] = false;
        layoutProgress.stop();
        unsubscribeProgress();
      };
      this.currentAnimationTarget[axis] = target;
      var layoutTransition = transition3 || visualElement2.getDefaultTransition() || defaultLayoutTransition;
      var animation = startAnimation(axis === "x" ? "layoutX" : "layoutY", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, "layout")).then(this.stopAxisAnimation[axis]);
      return animation;
    };
    Animate2.prototype.safeToRemove = function() {
      var _a7, _b3;
      (_b3 = (_a7 = this.props).safeToRemove) === null || _b3 === void 0 ? void 0 : _b3.call(_a7);
    };
    Animate2.prototype.render = function() {
      return null;
    };
    return Animate2;
  }(React6.Component);
  function AnimateLayoutContextProvider(props) {
    var _a7 = __read(usePresence(), 2), safeToRemove = _a7[1];
    return React6.createElement(Animate, __assign({}, props, { safeToRemove }));
  }
  function hasMoved(a2, b2) {
    return !isZeroBox(a2) && !isZeroBox(b2) && (!axisIsEqual(a2.x, b2.x) || !axisIsEqual(a2.y, b2.y));
  }
  var zeroAxis = { min: 0, max: 0 };
  function isZeroBox(a2) {
    return axisIsEqual(a2.x, zeroAxis) && axisIsEqual(a2.y, zeroAxis);
  }
  function axisIsEqual(a2, b2) {
    return a2.min === b2.min && a2.max === b2.max;
  }
  var defaultLayoutTransition = {
    duration: 0.45,
    ease: [0.4, 0, 0.1, 1]
  };
  function isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {
    return prevParent || !prevParent && !(originBox || targetBox);
  }

  // ../../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
  var import_react44 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
  var import_react43 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js
  var defaultHandler = {
    layoutReady: function(child) {
      return child.notifyLayoutReady();
    }
  };
  function createBatcher() {
    var queue = /* @__PURE__ */ new Set();
    return {
      add: function(child) {
        return queue.add(child);
      },
      flush: function(_a7) {
        var _b3 = _a7 === void 0 ? defaultHandler : _a7, layoutReady = _b3.layoutReady, parent = _b3.parent;
        batchLayout(function(read, write) {
          var order2 = Array.from(queue).sort(compareByDepth);
          var ancestors = parent ? collectProjectingAncestors(parent) : [];
          write(function() {
            var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order2));
            allElements.forEach(function(element) {
              return element.resetTransform();
            });
          });
          read(function() {
            order2.forEach(updateLayoutMeasurement);
          });
          write(function() {
            ancestors.forEach(function(element) {
              return element.restoreTransform();
            });
            order2.forEach(layoutReady);
          });
          read(function() {
            order2.forEach(function(child) {
              if (child.isPresent)
                child.presence = Presence.Present;
            });
          });
          write(function() {
            flushSync.preRender();
            flushSync.render();
          });
          read(function() {
            es_default.postRender(function() {
              return order2.forEach(assignProjectionToSnapshot);
            });
            queue.clear();
          });
        });
        flushLayout();
      }
    };
  }
  function assignProjectionToSnapshot(child) {
    child.prevViewportBox = child.projection.target;
  }

  // ../../node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
  var SharedLayoutContext = (0, import_react43.createContext)(createBatcher());
  var FramerTreeLayoutContext = (0, import_react43.createContext)(createBatcher());
  function isSharedLayout(context) {
    return !!context.forceUpdate;
  }

  // ../../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
  var Measure = function(_super) {
    __extends(Measure2, _super);
    function Measure2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Measure2.prototype.componentDidMount = function() {
      var _a7 = this.props, syncLayout = _a7.syncLayout, framerSyncLayout = _a7.framerSyncLayout, visualElement2 = _a7.visualElement;
      isSharedLayout(syncLayout) && syncLayout.register(visualElement2);
      isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement2);
      visualElement2.onUnmount(function() {
        if (isSharedLayout(syncLayout)) {
          syncLayout.remove(visualElement2);
        }
        if (isSharedLayout(framerSyncLayout)) {
          framerSyncLayout.remove(visualElement2);
        }
      });
    };
    Measure2.prototype.getSnapshotBeforeUpdate = function() {
      var _a7 = this.props, syncLayout = _a7.syncLayout, visualElement2 = _a7.visualElement;
      if (isSharedLayout(syncLayout)) {
        syncLayout.syncUpdate();
      } else {
        snapshotViewportBox(visualElement2);
        syncLayout.add(visualElement2);
      }
      return null;
    };
    Measure2.prototype.componentDidUpdate = function() {
      var syncLayout = this.props.syncLayout;
      if (!isSharedLayout(syncLayout))
        syncLayout.flush();
    };
    Measure2.prototype.render = function() {
      return null;
    };
    return Measure2;
  }(import_react44.default.Component);
  function MeasureContextProvider(props) {
    var syncLayout = (0, import_react44.useContext)(SharedLayoutContext);
    var framerSyncLayout = (0, import_react44.useContext)(FramerTreeLayoutContext);
    return import_react44.default.createElement(Measure, __assign({}, props, { syncLayout, framerSyncLayout }));
  }

  // ../../node_modules/framer-motion/dist/es/motion/features/layout/index.js
  var layoutAnimations = {
    measureLayout: MeasureContextProvider,
    layoutAnimation: AnimateLayoutContextProvider
  };

  // ../../node_modules/framer-motion/dist/es/render/utils/state.js
  var createProjectionState = function() {
    return {
      isEnabled: false,
      isHydrated: false,
      isTargetLocked: false,
      target: axisBox(),
      targetFinal: axisBox()
    };
  };
  function createLayoutState() {
    return {
      isHydrated: false,
      layout: axisBox(),
      layoutCorrected: axisBox(),
      treeScale: { x: 1, y: 1 },
      delta: delta(),
      deltaFinal: delta(),
      deltaTransform: ""
    };
  }
  var zeroLayout = createLayoutState();

  // ../../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js
  function buildLayoutProjectionTransform(_a7, treeScale, latestTransform) {
    var x = _a7.x, y = _a7.y;
    var xTranslate = x.translate / treeScale.x;
    var yTranslate = y.translate / treeScale.y;
    var transform2 = "translate3d(" + xTranslate + "px, " + yTranslate + "px, 0) ";
    if (latestTransform) {
      var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
      if (rotate)
        transform2 += "rotate(" + rotate + ") ";
      if (rotateX)
        transform2 += "rotateX(" + rotateX + ") ";
      if (rotateY)
        transform2 += "rotateY(" + rotateY + ") ";
    }
    transform2 += "scale(" + x.scale + ", " + y.scale + ")";
    return !latestTransform && transform2 === identityProjection ? "" : transform2;
  }
  function buildLayoutProjectionTransformOrigin(_a7) {
    var deltaFinal = _a7.deltaFinal;
    return deltaFinal.x.origin * 100 + "% " + deltaFinal.y.origin * 100 + "% 0";
  }
  var identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });

  // ../../node_modules/framer-motion/dist/es/render/utils/lifecycles.js
  var names = [
    "LayoutMeasure",
    "BeforeLayoutMeasure",
    "LayoutUpdate",
    "ViewportBoxUpdate",
    "Update",
    "Render",
    "AnimationComplete",
    "LayoutAnimationComplete",
    "AnimationStart",
    "SetAxisTarget",
    "Unmount"
  ];
  function createLifecycles() {
    var managers = names.map(function() {
      return new SubscriptionManager();
    });
    var propSubscriptions = {};
    var lifecycles = {
      clearAllListeners: function() {
        return managers.forEach(function(manager) {
          return manager.clear();
        });
      },
      updatePropListeners: function(props) {
        return names.forEach(function(name) {
          var _a7;
          (_a7 = propSubscriptions[name]) === null || _a7 === void 0 ? void 0 : _a7.call(propSubscriptions);
          var on = "on" + name;
          var propListener = props[on];
          if (propListener) {
            propSubscriptions[name] = lifecycles[on](propListener);
          }
        });
      }
    };
    managers.forEach(function(manager, i) {
      lifecycles["on" + names[i]] = function(handler) {
        return manager.add(handler);
      };
      lifecycles["notify" + names[i]] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return manager.notify.apply(manager, __spreadArray([], __read(args)));
      };
    });
    return lifecycles;
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/motion-values.js
  function updateMotionValuesFromProps(element, next, prev) {
    var _a7;
    for (var key in next) {
      var nextValue = next[key];
      var prevValue = prev[key];
      if (isMotionValue(nextValue)) {
        element.addValue(key, nextValue);
      } else if (isMotionValue(prevValue)) {
        element.addValue(key, motionValue(nextValue));
      } else if (prevValue !== nextValue) {
        if (element.hasValue(key)) {
          var existingValue = element.getValue(key);
          !existingValue.hasAnimated && existingValue.set(nextValue);
        } else {
          element.addValue(key, motionValue((_a7 = element.getStaticValue(key)) !== null && _a7 !== void 0 ? _a7 : nextValue));
        }
      }
    }
    for (var key in prev) {
      if (next[key] === void 0)
        element.removeValue(key);
    }
    return next;
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/projection.js
  function updateLayoutDeltas(_a7, _b3, treePath, transformOrigin) {
    var delta2 = _a7.delta, layout2 = _a7.layout, layoutCorrected = _a7.layoutCorrected, treeScale = _a7.treeScale;
    var target = _b3.target;
    resetBox(layoutCorrected, layout2);
    applyTreeDeltas(layoutCorrected, treeScale, treePath);
    updateBoxDelta(delta2, layoutCorrected, target, transformOrigin);
  }

  // ../../node_modules/framer-motion/dist/es/render/utils/flat-tree.js
  var FlatTree = function() {
    function FlatTree2() {
      this.children = [];
      this.isDirty = false;
    }
    FlatTree2.prototype.add = function(child) {
      addUniqueItem(this.children, child);
      this.isDirty = true;
    };
    FlatTree2.prototype.remove = function(child) {
      removeItem(this.children, child);
      this.isDirty = true;
    };
    FlatTree2.prototype.forEach = function(callback) {
      this.isDirty && this.children.sort(compareByDepth);
      this.isDirty = false;
      this.children.forEach(callback);
    };
    return FlatTree2;
  }();

  // ../../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js
  function setCurrentViewportBox(visualElement2) {
    var projectionParent = visualElement2.getProjectionParent();
    if (!projectionParent) {
      visualElement2.rebaseProjectionTarget();
      return;
    }
    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
    eachAxis(function(axis) {
      visualElement2.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);
    });
  }

  // ../../node_modules/framer-motion/dist/es/render/index.js
  var visualElement = function(_a7) {
    var _b3 = _a7.treeType, treeType = _b3 === void 0 ? "" : _b3, build = _a7.build, getBaseTarget = _a7.getBaseTarget, makeTargetAnimatable = _a7.makeTargetAnimatable, measureViewportBox = _a7.measureViewportBox, renderInstance = _a7.render, readValueFromInstance = _a7.readValueFromInstance, resetTransform = _a7.resetTransform, restoreTransform = _a7.restoreTransform, removeValueFromRenderState = _a7.removeValueFromRenderState, sortNodePosition = _a7.sortNodePosition, scrapeMotionValuesFromProps3 = _a7.scrapeMotionValuesFromProps;
    return function(_a8, options) {
      var parent = _a8.parent, props = _a8.props, presenceId2 = _a8.presenceId, blockInitialAnimation = _a8.blockInitialAnimation, visualState = _a8.visualState;
      if (options === void 0) {
        options = {};
      }
      var latestValues = visualState.latestValues, renderState = visualState.renderState;
      var instance;
      var lifecycles = createLifecycles();
      var projection = createProjectionState();
      var projectionParent;
      var leadProjection = projection;
      var leadLatestValues = latestValues;
      var unsubscribeFromLeadVisualElement;
      var layoutState = createLayoutState();
      var crossfader;
      var hasViewportBoxUpdated = false;
      var values = /* @__PURE__ */ new Map();
      var valueSubscriptions = /* @__PURE__ */ new Map();
      var prevMotionValues = {};
      var projectionTargetProgress;
      var baseTarget = __assign({}, latestValues);
      var removeFromVariantTree;
      function render() {
        if (!instance)
          return;
        if (element.isProjectionReady()) {
          applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);
          updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);
        }
        triggerBuild();
        renderInstance(instance, renderState);
      }
      function triggerBuild() {
        var valuesToRender = latestValues;
        if (crossfader && crossfader.isActive()) {
          var crossfadedValues = crossfader.getCrossfadeState(element);
          if (crossfadedValues)
            valuesToRender = crossfadedValues;
        }
        build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);
      }
      function update() {
        lifecycles.notifyUpdate(latestValues);
      }
      function updateLayoutProjection() {
        if (!element.isProjectionReady())
          return;
        var delta2 = layoutState.delta, treeScale = layoutState.treeScale;
        var prevTreeScaleX = treeScale.x;
        var prevTreeScaleY = treeScale.y;
        var prevDeltaTransform = layoutState.deltaTransform;
        updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);
        hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta2);
        hasViewportBoxUpdated = false;
        var deltaTransform = buildLayoutProjectionTransform(delta2, treeScale);
        if (deltaTransform !== prevDeltaTransform || prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {
          element.scheduleRender();
        }
        layoutState.deltaTransform = deltaTransform;
      }
      function updateTreeLayoutProjection() {
        element.layoutTree.forEach(fireUpdateLayoutProjection);
      }
      function bindToMotionValue(key2, value2) {
        var removeOnChange = value2.onChange(function(latestValue) {
          latestValues[key2] = latestValue;
          props.onUpdate && es_default.update(update, false, true);
        });
        var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
        valueSubscriptions.set(key2, function() {
          removeOnChange();
          removeOnRenderRequest();
        });
      }
      var initialMotionValues = scrapeMotionValuesFromProps3(props);
      for (var key in initialMotionValues) {
        var value = initialMotionValues[key];
        if (latestValues[key] !== void 0 && isMotionValue(value)) {
          value.set(latestValues[key], false);
        }
      }
      var isControllingVariants = checkIfControllingVariants(props);
      var isVariantNode = checkIfVariantNode(props);
      var element = __assign(__assign({
        treeType,
        current: null,
        depth: parent ? parent.depth + 1 : 0,
        parent,
        children: /* @__PURE__ */ new Set(),
        path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [],
        layoutTree: parent ? parent.layoutTree : new FlatTree(),
        presenceId: presenceId2,
        projection,
        variantChildren: isVariantNode ? /* @__PURE__ */ new Set() : void 0,
        isVisible: void 0,
        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
        blockInitialAnimation,
        isMounted: function() {
          return Boolean(instance);
        },
        mount: function(newInstance) {
          instance = element.current = newInstance;
          element.pointTo(element);
          if (isVariantNode && parent && !isControllingVariants) {
            removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
          }
          parent === null || parent === void 0 ? void 0 : parent.children.add(element);
        },
        unmount: function() {
          cancelSync.update(update);
          cancelSync.render(render);
          cancelSync.preRender(element.updateLayoutProjection);
          valueSubscriptions.forEach(function(remove) {
            return remove();
          });
          element.stopLayoutAnimation();
          element.layoutTree.remove(element);
          removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
          parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
          unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
          lifecycles.clearAllListeners();
        },
        addVariantChild: function(child) {
          var _a9;
          var closestVariantNode = element.getClosestVariantNode();
          if (closestVariantNode) {
            (_a9 = closestVariantNode.variantChildren) === null || _a9 === void 0 ? void 0 : _a9.add(child);
            return function() {
              return closestVariantNode.variantChildren.delete(child);
            };
          }
        },
        sortNodePosition: function(other) {
          if (!sortNodePosition || treeType !== other.treeType)
            return 0;
          return sortNodePosition(element.getInstance(), other.getInstance());
        },
        getClosestVariantNode: function() {
          return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
        },
        scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function() {
          return es_default.preRender(element.updateTreeLayoutProjection, false, true);
        },
        getLayoutId: function() {
          return props.layoutId;
        },
        getInstance: function() {
          return instance;
        },
        getStaticValue: function(key2) {
          return latestValues[key2];
        },
        setStaticValue: function(key2, value2) {
          return latestValues[key2] = value2;
        },
        getLatestValues: function() {
          return latestValues;
        },
        setVisibility: function(visibility) {
          if (element.isVisible === visibility)
            return;
          element.isVisible = visibility;
          element.scheduleRender();
        },
        makeTargetAnimatable: function(target, canMutate) {
          if (canMutate === void 0) {
            canMutate = true;
          }
          return makeTargetAnimatable(element, target, props, canMutate);
        },
        addValue: function(key2, value2) {
          if (element.hasValue(key2))
            element.removeValue(key2);
          values.set(key2, value2);
          latestValues[key2] = value2.get();
          bindToMotionValue(key2, value2);
        },
        removeValue: function(key2) {
          var _a9;
          values.delete(key2);
          (_a9 = valueSubscriptions.get(key2)) === null || _a9 === void 0 ? void 0 : _a9();
          valueSubscriptions.delete(key2);
          delete latestValues[key2];
          removeValueFromRenderState(key2, renderState);
        },
        hasValue: function(key2) {
          return values.has(key2);
        },
        getValue: function(key2, defaultValue) {
          var value2 = values.get(key2);
          if (value2 === void 0 && defaultValue !== void 0) {
            value2 = motionValue(defaultValue);
            element.addValue(key2, value2);
          }
          return value2;
        },
        forEachValue: function(callback) {
          return values.forEach(callback);
        },
        readValue: function(key2) {
          var _a9;
          return (_a9 = latestValues[key2]) !== null && _a9 !== void 0 ? _a9 : readValueFromInstance(instance, key2, options);
        },
        setBaseTarget: function(key2, value2) {
          baseTarget[key2] = value2;
        },
        getBaseTarget: function(key2) {
          if (getBaseTarget) {
            var target = getBaseTarget(props, key2);
            if (target !== void 0 && !isMotionValue(target))
              return target;
          }
          return baseTarget[key2];
        }
      }, lifecycles), {
        build: function() {
          triggerBuild();
          return renderState;
        },
        scheduleRender: function() {
          es_default.render(render, false, true);
        },
        syncRender: render,
        setProps: function(newProps) {
          props = newProps;
          lifecycles.updatePropListeners(newProps);
          prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps3(props), prevMotionValues);
        },
        getProps: function() {
          return props;
        },
        getVariant: function(name) {
          var _a9;
          return (_a9 = props.variants) === null || _a9 === void 0 ? void 0 : _a9[name];
        },
        getDefaultTransition: function() {
          return props.transition;
        },
        getVariantContext: function(startAtParent) {
          if (startAtParent === void 0) {
            startAtParent = false;
          }
          if (startAtParent)
            return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
          if (!isControllingVariants) {
            var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
            if (props.initial !== void 0) {
              context_1.initial = props.initial;
            }
            return context_1;
          }
          var context = {};
          for (var i = 0; i < numVariantProps; i++) {
            var name_1 = variantProps[i];
            var prop = props[name_1];
            if (isVariantLabel(prop) || prop === false) {
              context[name_1] = prop;
            }
          }
          return context;
        },
        enableLayoutProjection: function() {
          projection.isEnabled = true;
          element.layoutTree.add(element);
        },
        lockProjectionTarget: function() {
          projection.isTargetLocked = true;
        },
        unlockProjectionTarget: function() {
          element.stopLayoutAnimation();
          projection.isTargetLocked = false;
        },
        getLayoutState: function() {
          return layoutState;
        },
        setCrossfader: function(newCrossfader) {
          crossfader = newCrossfader;
        },
        isProjectionReady: function() {
          return projection.isEnabled && projection.isHydrated && layoutState.isHydrated;
        },
        startLayoutAnimation: function(axis, transition3, isRelative) {
          if (isRelative === void 0) {
            isRelative = false;
          }
          var progress2 = element.getProjectionAnimationProgress()[axis];
          var _a9 = isRelative ? projection.relativeTarget[axis] : projection.target[axis], min = _a9.min, max = _a9.max;
          var length = max - min;
          progress2.clearListeners();
          progress2.set(min);
          progress2.set(min);
          progress2.onChange(function(v) {
            element.setProjectionTargetAxis(axis, v, v + length, isRelative);
          });
          return element.animateMotionValue(axis, progress2, 0, transition3);
        },
        stopLayoutAnimation: function() {
          eachAxis(function(axis) {
            return element.getProjectionAnimationProgress()[axis].stop();
          });
        },
        measureViewportBox: function(withTransform) {
          if (withTransform === void 0) {
            withTransform = true;
          }
          var viewportBox = measureViewportBox(instance, options);
          if (!withTransform)
            removeBoxTransforms(viewportBox, latestValues);
          return viewportBox;
        },
        getProjectionAnimationProgress: function() {
          projectionTargetProgress || (projectionTargetProgress = {
            x: motionValue(0),
            y: motionValue(0)
          });
          return projectionTargetProgress;
        },
        setProjectionTargetAxis: function(axis, min, max, isRelative) {
          if (isRelative === void 0) {
            isRelative = false;
          }
          var target;
          if (isRelative) {
            if (!projection.relativeTarget) {
              projection.relativeTarget = axisBox();
            }
            target = projection.relativeTarget[axis];
          } else {
            projection.relativeTarget = void 0;
            target = projection.target[axis];
          }
          projection.isHydrated = true;
          target.min = min;
          target.max = max;
          hasViewportBoxUpdated = true;
          lifecycles.notifySetAxisTarget();
        },
        rebaseProjectionTarget: function(force, box) {
          if (box === void 0) {
            box = layoutState.layout;
          }
          var _a9 = element.getProjectionAnimationProgress(), x = _a9.x, y = _a9.y;
          var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();
          if (force || shouldRebase) {
            eachAxis(function(axis) {
              var _a10 = box[axis], min = _a10.min, max = _a10.max;
              element.setProjectionTargetAxis(axis, min, max);
            });
          }
        },
        notifyLayoutReady: function(config2) {
          setCurrentViewportBox(element);
          element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config2);
        },
        resetTransform: function() {
          return resetTransform(element, instance, props);
        },
        restoreTransform: function() {
          return restoreTransform(instance, renderState);
        },
        updateLayoutProjection,
        updateTreeLayoutProjection: function() {
          element.layoutTree.forEach(fireResolveRelativeTargetBox);
          es_default.preRender(updateTreeLayoutProjection, false, true);
        },
        getProjectionParent: function() {
          if (projectionParent === void 0) {
            var foundParent = false;
            for (var i = element.path.length - 1; i >= 0; i--) {
              var ancestor = element.path[i];
              if (ancestor.projection.isEnabled) {
                foundParent = ancestor;
                break;
              }
            }
            projectionParent = foundParent;
          }
          return projectionParent;
        },
        resolveRelativeTargetBox: function() {
          var relativeParent = element.getProjectionParent();
          if (!projection.relativeTarget || !relativeParent)
            return;
          calcRelativeBox(projection, relativeParent.projection);
          if (isDraggable(relativeParent)) {
            var target = projection.target;
            applyBoxTransforms(target, target, relativeParent.getLatestValues());
          }
        },
        shouldResetTransform: function() {
          return Boolean(props._layoutResetTransform);
        },
        pointTo: function(newLead) {
          leadProjection = newLead.projection;
          leadLatestValues = newLead.getLatestValues();
          unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
          unsubscribeFromLeadVisualElement = pipe2(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function() {
            var _a9;
            if (element.isPresent) {
              element.presence = Presence.Present;
            } else {
              (_a9 = element.layoutSafeToRemove) === null || _a9 === void 0 ? void 0 : _a9.call(element);
            }
          }));
        },
        isPresent: true,
        presence: Presence.Entering
      });
      return element;
    };
  };
  function fireResolveRelativeTargetBox(child) {
    child.resolveRelativeTargetBox();
  }
  function fireUpdateLayoutProjection(child) {
    child.updateLayoutProjection();
  }
  var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder));
  var numVariantProps = variantProps.length;

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js
  var positionalKeys = /* @__PURE__ */ new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y"
  ]);
  var isPositionalKey = function(key) {
    return positionalKeys.has(key);
  };
  var hasPositionalKey = function(target) {
    return Object.keys(target).some(isPositionalKey);
  };
  var setAndResetVelocity = function(value, to) {
    value.set(to, false);
    value.set(to);
  };
  var isNumOrPxType = function(v) {
    return v === number || v === px2;
  };
  var BoundingBoxDimension;
  (function(BoundingBoxDimension2) {
    BoundingBoxDimension2["width"] = "width";
    BoundingBoxDimension2["height"] = "height";
    BoundingBoxDimension2["left"] = "left";
    BoundingBoxDimension2["right"] = "right";
    BoundingBoxDimension2["top"] = "top";
    BoundingBoxDimension2["bottom"] = "bottom";
  })(BoundingBoxDimension || (BoundingBoxDimension = {}));
  var getPosFromMatrix = function(matrix, pos) {
    return parseFloat(matrix.split(", ")[pos]);
  };
  var getTranslateFromMatrix = function(pos2, pos3) {
    return function(_bbox, _a7) {
      var transform2 = _a7.transform;
      if (transform2 === "none" || !transform2)
        return 0;
      var matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
      if (matrix3d) {
        return getPosFromMatrix(matrix3d[1], pos3);
      } else {
        var matrix = transform2.match(/^matrix\((.+)\)$/);
        if (matrix) {
          return getPosFromMatrix(matrix[1], pos2);
        } else {
          return 0;
        }
      }
    };
  };
  var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
  var nonTranslationalTransformKeys = transformProps.filter(function(key) {
    return !transformKeys.has(key);
  });
  function removeNonTranslationalTransform(visualElement2) {
    var removedTransforms = [];
    nonTranslationalTransformKeys.forEach(function(key) {
      var value = visualElement2.getValue(key);
      if (value !== void 0) {
        removedTransforms.push([key, value.get()]);
        value.set(key.startsWith("scale") ? 1 : 0);
      }
    });
    if (removedTransforms.length)
      visualElement2.syncRender();
    return removedTransforms;
  }
  var positionalValues = {
    width: function(_a7) {
      var x = _a7.x;
      return x.max - x.min;
    },
    height: function(_a7) {
      var y = _a7.y;
      return y.max - y.min;
    },
    top: function(_bbox, _a7) {
      var top = _a7.top;
      return parseFloat(top);
    },
    left: function(_bbox, _a7) {
      var left = _a7.left;
      return parseFloat(left);
    },
    bottom: function(_a7, _b3) {
      var y = _a7.y;
      var top = _b3.top;
      return parseFloat(top) + (y.max - y.min);
    },
    right: function(_a7, _b3) {
      var x = _a7.x;
      var left = _b3.left;
      return parseFloat(left) + (x.max - x.min);
    },
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
  };
  var convertChangedValueTypes = function(target, visualElement2, changedKeys) {
    var originBbox = visualElement2.measureViewportBox();
    var element = visualElement2.getInstance();
    var elementComputedStyle = getComputedStyle(element);
    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform2 = elementComputedStyle.transform;
    var originComputedStyle = { top, left, bottom, right, transform: transform2 };
    if (display === "none") {
      visualElement2.setStaticValue("display", target.display || "block");
    }
    visualElement2.syncRender();
    var targetBbox = visualElement2.measureViewportBox();
    changedKeys.forEach(function(key) {
      var value = visualElement2.getValue(key);
      setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));
      target[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target;
  };
  var checkAndConvertChangedValueTypes = function(visualElement2, target, origin, transitionEnd) {
    if (origin === void 0) {
      origin = {};
    }
    if (transitionEnd === void 0) {
      transitionEnd = {};
    }
    target = __assign({}, target);
    transitionEnd = __assign({}, transitionEnd);
    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
    var removedTransformValues = [];
    var hasAttemptedToRemoveTransformValues = false;
    var changedValueTypeKeys = [];
    targetPositionalKeys.forEach(function(key) {
      var value = visualElement2.getValue(key);
      if (!visualElement2.hasValue(key))
        return;
      var from = origin[key];
      var to = target[key];
      var fromType = findDimensionValueType(from);
      var toType;
      if (isKeyframesTarget(to)) {
        var numKeyframes = to.length;
        for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {
          if (!toType) {
            toType = findDimensionValueType(to[i]);
            invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
          } else {
            invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
          }
        }
      } else {
        toType = findDimensionValueType(to);
      }
      if (fromType !== toType) {
        if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
          var current = value.get();
          if (typeof current === "string") {
            value.set(parseFloat(current));
          }
          if (typeof to === "string") {
            target[key] = parseFloat(to);
          } else if (Array.isArray(to) && toType === px2) {
            target[key] = to.map(parseFloat);
          }
        } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
          if (from === 0) {
            value.set(toType.transform(from));
          } else {
            target[key] = fromType.transform(to);
          }
        } else {
          if (!hasAttemptedToRemoveTransformValues) {
            removedTransformValues = removeNonTranslationalTransform(visualElement2);
            hasAttemptedToRemoveTransformValues = true;
          }
          changedValueTypeKeys.push(key);
          transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
          setAndResetVelocity(value, to);
        }
      }
    });
    if (changedValueTypeKeys.length) {
      var convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
      if (removedTransformValues.length) {
        removedTransformValues.forEach(function(_a7) {
          var _b3 = __read(_a7, 2), key = _b3[0], value = _b3[1];
          visualElement2.getValue(key).set(value);
        });
      }
      visualElement2.syncRender();
      return { target: convertedTarget, transitionEnd };
    } else {
      return { target, transitionEnd };
    }
  };
  function unitConversion(visualElement2, target, origin, transitionEnd) {
    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
  }

  // ../../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js
  var parseDomVariant = function(visualElement2, target, origin, transitionEnd) {
    var resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
    target = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return unitConversion(visualElement2, target, origin, transitionEnd);
  };

  // ../../node_modules/framer-motion/dist/es/render/html/visual-element.js
  function getComputedStyle2(element) {
    return window.getComputedStyle(element);
  }
  var htmlConfig = {
    treeType: "dom",
    readValueFromInstance: function(domElement, key) {
      if (isTransformProp(key)) {
        var defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      } else {
        var computedStyle = getComputedStyle2(domElement);
        return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      }
    },
    sortNodePosition: function(a2, b2) {
      return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
    },
    getBaseTarget: function(props, key) {
      var _a7;
      return (_a7 = props.style) === null || _a7 === void 0 ? void 0 : _a7[key];
    },
    measureViewportBox: function(element, _a7) {
      var transformPagePoint = _a7.transformPagePoint;
      return getBoundingBox(element, transformPagePoint);
    },
    resetTransform: function(element, domElement, props) {
      var transformTemplate2 = props.transformTemplate;
      domElement.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
      element.scheduleRender();
    },
    restoreTransform: function(instance, mutableState) {
      instance.style.transform = mutableState.style.transform;
    },
    removeValueFromRenderState: function(key, _a7) {
      var vars = _a7.vars, style = _a7.style;
      delete vars[key];
      delete style[key];
    },
    makeTargetAnimatable: function(element, _a7, _b3, isMounted) {
      var transformValues = _b3.transformValues;
      if (isMounted === void 0) {
        isMounted = true;
      }
      var transition3 = _a7.transition, transitionEnd = _a7.transitionEnd, target = __rest(_a7, ["transition", "transitionEnd"]);
      var origin = getOrigin(target, transition3 || {}, element);
      if (transformValues) {
        if (transitionEnd)
          transitionEnd = transformValues(transitionEnd);
        if (target)
          target = transformValues(target);
        if (origin)
          origin = transformValues(origin);
      }
      if (isMounted) {
        checkTargetForNewValues(element, target, origin);
        var parsed = parseDomVariant(element, target, origin, transitionEnd);
        transitionEnd = parsed.transitionEnd;
        target = parsed.target;
      }
      return __assign({
        transition: transition3,
        transitionEnd
      }, target);
    },
    scrapeMotionValuesFromProps,
    build: function(element, renderState, latestValues, projection, layoutState, options, props) {
      if (element.isVisible !== void 0) {
        renderState.style.visibility = element.isVisible ? "visible" : "hidden";
      }
      var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
      buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
    },
    render: renderHTML
  };
  var htmlVisualElement = visualElement(htmlConfig);

  // ../../node_modules/framer-motion/dist/es/render/svg/visual-element.js
  var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), {
    getBaseTarget: function(props, key) {
      return props[key];
    },
    readValueFromInstance: function(domElement, key) {
      var _a7;
      if (isTransformProp(key)) {
        return ((_a7 = getDefaultValueType(key)) === null || _a7 === void 0 ? void 0 : _a7.default) || 0;
      }
      key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
      return domElement.getAttribute(key);
    },
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    build: function(_element, renderState, latestValues, projection, layoutState, options, props) {
      var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
      buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
    },
    render: renderSVG
  }));

  // ../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js
  var createDomVisualElement = function(Component2, options) {
    return isSVGComponent(Component2) ? svgVisualElement(options, { enableHardwareAcceleration: false }) : htmlVisualElement(options, { enableHardwareAcceleration: true });
  };

  // ../../node_modules/framer-motion/dist/es/render/dom/motion.js
  var featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutAnimations);
  var motion = /* @__PURE__ */ createMotionProxy(function(Component2, config2) {
    return createDomMotionConfig(Component2, config2, featureBundle, createDomVisualElement);
  });

  // ../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
  var React8 = __toESM(require_react());
  var import_react47 = __toESM(require_react());

  // ../../node_modules/framer-motion/dist/es/utils/use-force-update.js
  var import_react45 = __toESM(require_react());
  function useForceUpdate() {
    var unloadingRef = (0, import_react45.useRef)(false);
    var _a7 = __read((0, import_react45.useState)(0), 2), forcedRenderCount = _a7[0], setForcedRenderCount = _a7[1];
    useUnmountEffect(function() {
      return unloadingRef.current = true;
    });
    return (0, import_react45.useCallback)(function() {
      !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [forcedRenderCount]);
  }

  // ../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
  var React7 = __toESM(require_react());
  var import_react46 = __toESM(require_react());
  var presenceId = 0;
  function getPresenceId() {
    var id = presenceId;
    presenceId++;
    return id;
  }
  var PresenceChild = function(_a7) {
    var children = _a7.children, initial = _a7.initial, isPresent2 = _a7.isPresent, onExitComplete = _a7.onExitComplete, custom = _a7.custom, presenceAffectsLayout = _a7.presenceAffectsLayout;
    var presenceChildren = useConstant(newChildrenMap);
    var id = useConstant(getPresenceId);
    var context = (0, import_react46.useMemo)(function() {
      return {
        id,
        initial,
        isPresent: isPresent2,
        custom,
        onExitComplete: function(childId) {
          presenceChildren.set(childId, true);
          var allComplete = true;
          presenceChildren.forEach(function(isComplete) {
            if (!isComplete)
              allComplete = false;
          });
          allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
        },
        register: function(childId) {
          presenceChildren.set(childId, false);
          return function() {
            return presenceChildren.delete(childId);
          };
        }
      };
    }, presenceAffectsLayout ? void 0 : [isPresent2]);
    (0, import_react46.useMemo)(function() {
      presenceChildren.forEach(function(_, key) {
        return presenceChildren.set(key, false);
      });
    }, [isPresent2]);
    React7.useEffect(function() {
      !isPresent2 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
    }, [isPresent2]);
    return React7.createElement(PresenceContext.Provider, { value: context }, children);
  };
  function newChildrenMap() {
    return /* @__PURE__ */ new Map();
  }

  // ../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
  function getChildKey(child) {
    return child.key || "";
  }
  function updateChildLookup(children, allChildren) {
    var seenChildren = true ? /* @__PURE__ */ new Set() : null;
    children.forEach(function(child) {
      var key = getChildKey(child);
      if (seenChildren) {
        if (seenChildren.has(key)) {
          console.warn('Children of AnimatePresence require unique keys. "' + key + '" is a duplicate.');
        }
        seenChildren.add(key);
      }
      allChildren.set(key, child);
    });
  }
  function onlyElements(children) {
    var filtered = [];
    import_react47.Children.forEach(children, function(child) {
      if ((0, import_react47.isValidElement)(child))
        filtered.push(child);
    });
    return filtered;
  }
  var AnimatePresence = function(_a7) {
    var children = _a7.children, custom = _a7.custom, _b3 = _a7.initial, initial = _b3 === void 0 ? true : _b3, onExitComplete = _a7.onExitComplete, exitBeforeEnter = _a7.exitBeforeEnter, _c3 = _a7.presenceAffectsLayout, presenceAffectsLayout = _c3 === void 0 ? true : _c3;
    var forceRender = useForceUpdate();
    var layoutContext = (0, import_react47.useContext)(SharedLayoutContext);
    if (isSharedLayout(layoutContext)) {
      forceRender = layoutContext.forceUpdate;
    }
    var isInitialRender = (0, import_react47.useRef)(true);
    var filteredChildren = onlyElements(children);
    var presentChildren = (0, import_react47.useRef)(filteredChildren);
    var allChildren = (0, import_react47.useRef)(/* @__PURE__ */ new Map()).current;
    var exiting = (0, import_react47.useRef)(/* @__PURE__ */ new Set()).current;
    updateChildLookup(filteredChildren, allChildren);
    if (isInitialRender.current) {
      isInitialRender.current = false;
      return React8.createElement(React8.Fragment, null, filteredChildren.map(function(child) {
        return React8.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout }, child);
      }));
    }
    var childrenToRender = __spreadArray([], __read(filteredChildren));
    var presentKeys = presentChildren.current.map(getChildKey);
    var targetKeys = filteredChildren.map(getChildKey);
    var numPresent = presentKeys.length;
    for (var i = 0; i < numPresent; i++) {
      var key = presentKeys[i];
      if (targetKeys.indexOf(key) === -1) {
        exiting.add(key);
      } else {
        exiting.delete(key);
      }
    }
    if (exitBeforeEnter && exiting.size) {
      childrenToRender = [];
    }
    exiting.forEach(function(key2) {
      if (targetKeys.indexOf(key2) !== -1)
        return;
      var child = allChildren.get(key2);
      if (!child)
        return;
      var insertionIndex = presentKeys.indexOf(key2);
      var onExit = function() {
        allChildren.delete(key2);
        exiting.delete(key2);
        var removeIndex = presentChildren.current.findIndex(function(presentChild) {
          return presentChild.key === key2;
        });
        presentChildren.current.splice(removeIndex, 1);
        if (!exiting.size) {
          presentChildren.current = filteredChildren;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      childrenToRender.splice(insertionIndex, 0, React8.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout }, child));
    });
    childrenToRender = childrenToRender.map(function(child) {
      var key2 = child.key;
      return exiting.has(key2) ? child : React8.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
    });
    presentChildren.current = childrenToRender;
    if (exitBeforeEnter && childrenToRender.length > 1) {
      console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
    }
    return React8.createElement(React8.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
      return (0, import_react47.cloneElement)(child);
    }));
  };

  // ../../node_modules/@chakra-ui/alert/dist/index.esm.js
  var import_react49 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/spinner/dist/index.esm.js
  var import_react48 = __toESM(require_react());
  var cx2 = (...classNames2) => classNames2.filter(Boolean).join(" ");
  var spin = (0, import_react8.keyframes)({
    "0%": {
      transform: "rotate(0deg)"
    },
    "100%": {
      transform: "rotate(360deg)"
    }
  });
  var Spinner = forwardRef((props, ref) => {
    const styles2 = useStyleConfig("Spinner", props);
    const {
      label = "Loading...",
      thickness = "2px",
      speed = "0.45s",
      emptyColor = "transparent",
      className,
      ...rest
    } = omitThemingProps(props);
    const _className = cx2("chakra-spinner", className);
    const spinnerStyles = {
      display: "inline-block",
      borderColor: "currentColor",
      borderStyle: "solid",
      borderRadius: "99999px",
      borderWidth: thickness,
      borderBottomColor: emptyColor,
      borderLeftColor: emptyColor,
      animation: `${spin} ${speed} linear infinite`,
      ...styles2
    };
    return /* @__PURE__ */ import_react48.default.createElement(chakra.div, {
      ref,
      __css: spinnerStyles,
      className: _className,
      ...rest
    }, label && /* @__PURE__ */ import_react48.default.createElement(chakra.span, {
      srOnly: true
    }, label));
  });
  Spinner.displayName = "Spinner";

  // ../../node_modules/@chakra-ui/alert/dist/index.esm.js
  var cx3 = (...classNames2) => classNames2.filter(Boolean).join(" ");
  function CheckIcon(props) {
    return /* @__PURE__ */ import_react49.default.createElement(Icon, {
      viewBox: "0 0 24 24",
      ...props
    }, /* @__PURE__ */ import_react49.default.createElement("path", {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    }));
  }
  function InfoIcon(props) {
    return /* @__PURE__ */ import_react49.default.createElement(Icon, {
      viewBox: "0 0 24 24",
      ...props
    }, /* @__PURE__ */ import_react49.default.createElement("path", {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    }));
  }
  function WarningIcon(props) {
    return /* @__PURE__ */ import_react49.default.createElement(Icon, {
      viewBox: "0 0 24 24",
      ...props
    }, /* @__PURE__ */ import_react49.default.createElement("path", {
      fill: "currentColor",
      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    }));
  }
  var [AlertProvider, useAlertContext] = createContext3({
    name: "AlertContext",
    hookName: "useAlertContext",
    providerName: "<Alert />"
  });
  var [AlertStylesProvider, useAlertStyles] = createContext3({
    name: `AlertStylesContext`,
    hookName: `useAlertStyles`,
    providerName: "<Alert />"
  });
  var STATUSES = {
    info: { icon: InfoIcon, colorScheme: "blue" },
    warning: { icon: WarningIcon, colorScheme: "orange" },
    success: { icon: CheckIcon, colorScheme: "green" },
    error: { icon: WarningIcon, colorScheme: "red" },
    loading: { icon: Spinner, colorScheme: "blue" }
  };
  function getStatusColorScheme(status) {
    return STATUSES[status].colorScheme;
  }
  function getStatusIcon(status) {
    return STATUSES[status].icon;
  }
  var Alert = forwardRef(function Alert2(props, ref) {
    const { status = "info", addRole = true, ...rest } = omitThemingProps(props);
    const colorScheme = props.colorScheme ?? getStatusColorScheme(status);
    const styles2 = useMultiStyleConfig("Alert", { ...props, colorScheme });
    const alertStyles = {
      width: "100%",
      display: "flex",
      alignItems: "center",
      position: "relative",
      overflow: "hidden",
      ...styles2.container
    };
    return /* @__PURE__ */ import_react49.default.createElement(AlertProvider, {
      value: { status }
    }, /* @__PURE__ */ import_react49.default.createElement(AlertStylesProvider, {
      value: styles2
    }, /* @__PURE__ */ import_react49.default.createElement(chakra.div, {
      role: addRole ? "alert" : void 0,
      ref,
      ...rest,
      className: cx3("chakra-alert", props.className),
      __css: alertStyles
    })));
  });
  Alert.displayName = "Alert";
  var AlertDescription = forwardRef(function AlertDescription2(props, ref) {
    const styles2 = useAlertStyles();
    const descriptionStyles = {
      display: "inline",
      ...styles2.description
    };
    return /* @__PURE__ */ import_react49.default.createElement(chakra.div, {
      ref,
      ...props,
      className: cx3("chakra-alert__desc", props.className),
      __css: descriptionStyles
    });
  });
  AlertDescription.displayName = "AlertDescription";
  function AlertIcon(props) {
    const { status } = useAlertContext();
    const BaseIcon = getStatusIcon(status);
    const styles2 = useAlertStyles();
    const css2 = status === "loading" ? styles2.spinner : styles2.icon;
    return /* @__PURE__ */ import_react49.default.createElement(chakra.span, {
      display: "inherit",
      ...props,
      className: cx3("chakra-alert__icon", props.className),
      __css: css2
    }, props.children || /* @__PURE__ */ import_react49.default.createElement(BaseIcon, {
      h: "100%",
      w: "100%"
    }));
  }
  AlertIcon.displayName = "AlertIcon";
  var AlertTitle = forwardRef(function AlertTitle2(props, ref) {
    const styles2 = useAlertStyles();
    return /* @__PURE__ */ import_react49.default.createElement(chakra.div, {
      ref,
      ...props,
      className: cx3("chakra-alert__title", props.className),
      __css: styles2.title
    });
  });
  AlertTitle.displayName = "AlertTitle";

  // ../../node_modules/@chakra-ui/react-children-utils/dist/index.esm.js
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __commonJS2 = (cb2, mod) => function __require() {
    return mod || (0, cb2[__getOwnPropNames2(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var require_react_production_min = __commonJS2({
    "../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      var l = Symbol.for("react.element");
      var n = Symbol.for("react.portal");
      var p = Symbol.for("react.fragment");
      var q = Symbol.for("react.strict_mode");
      var r = Symbol.for("react.profiler");
      var t2 = Symbol.for("react.provider");
      var u = Symbol.for("react.context");
      var v = Symbol.for("react.forward_ref");
      var w = Symbol.for("react.suspense");
      var x = Symbol.for("react.memo");
      var y = Symbol.for("react.lazy");
      var z = Symbol.iterator;
      function A(a2) {
        if (a2 === null || typeof a2 !== "object")
          return null;
        a2 = z && a2[z] || a2["@@iterator"];
        return typeof a2 === "function" ? a2 : null;
      }
      var B = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } };
      var C = Object.assign;
      var D = {};
      function E(a2, b2, e) {
        this.props = a2;
        this.context = b2;
        this.refs = D;
        this.updater = e || B;
      }
      E.prototype.isReactComponent = {};
      E.prototype.setState = function(a2, b2) {
        if (typeof a2 !== "object" && typeof a2 !== "function" && a2 != null)
          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, a2, b2, "setState");
      };
      E.prototype.forceUpdate = function(a2) {
        this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
      };
      function F() {
      }
      F.prototype = E.prototype;
      function G(a2, b2, e) {
        this.props = a2;
        this.context = b2;
        this.refs = D;
        this.updater = e || B;
      }
      var H = G.prototype = new F();
      H.constructor = G;
      C(H, E.prototype);
      H.isPureReactComponent = true;
      var I = Array.isArray;
      var J = Object.prototype.hasOwnProperty;
      var K = { current: null };
      var L = { key: true, ref: true, __self: true, __source: true };
      function M(a2, b2, e) {
        var d, c2 = {}, k = null, h = null;
        if (b2 != null)
          for (d in b2.ref !== void 0 && (h = b2.ref), b2.key !== void 0 && (k = "" + b2.key), b2)
            J.call(b2, d) && !L.hasOwnProperty(d) && (c2[d] = b2[d]);
        var g = arguments.length - 2;
        if (g === 1)
          c2.children = e;
        else if (1 < g) {
          for (var f = Array(g), m = 0; m < g; m++)
            f[m] = arguments[m + 2];
          c2.children = f;
        }
        if (a2 && a2.defaultProps)
          for (d in g = a2.defaultProps, g)
            c2[d] === void 0 && (c2[d] = g[d]);
        return { $$typeof: l, type: a2, key: k, ref: h, props: c2, _owner: K.current };
      }
      function N(a2, b2) {
        return { $$typeof: l, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
      }
      function O(a2) {
        return typeof a2 === "object" && a2 !== null && a2.$$typeof === l;
      }
      function escape3(a2) {
        var b2 = { "=": "=0", ":": "=2" };
        return "$" + a2.replace(/[=:]/g, function(a22) {
          return b2[a22];
        });
      }
      var P = /\/+/g;
      function Q(a2, b2) {
        return typeof a2 === "object" && a2 !== null && a2.key != null ? escape3("" + a2.key) : b2.toString(36);
      }
      function R(a2, b2, e, d, c2) {
        var k = typeof a2;
        if (k === "undefined" || k === "boolean")
          a2 = null;
        var h = false;
        if (a2 === null)
          h = true;
        else
          switch (k) {
            case "string":
            case "number":
              h = true;
              break;
            case "object":
              switch (a2.$$typeof) {
                case l:
                case n:
                  h = true;
              }
          }
        if (h)
          return h = a2, c2 = c2(h), a2 = d === "" ? "." + Q(h, 0) : d, I(c2) ? (e = "", a2 != null && (e = a2.replace(P, "$&/") + "/"), R(c2, b2, e, "", function(a22) {
            return a22;
          })) : c2 != null && (O(c2) && (c2 = N(c2, e + (!c2.key || h && h.key === c2.key ? "" : ("" + c2.key).replace(P, "$&/") + "/") + a2)), b2.push(c2)), 1;
        h = 0;
        d = d === "" ? "." : d + ":";
        if (I(a2))
          for (var g = 0; g < a2.length; g++) {
            k = a2[g];
            var f = d + Q(k, g);
            h += R(k, b2, e, f, c2);
          }
        else if (f = A(a2), typeof f === "function")
          for (a2 = f.call(a2), g = 0; !(k = a2.next()).done; )
            k = k.value, f = d + Q(k, g++), h += R(k, b2, e, f, c2);
        else if (k === "object")
          throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + (b2 === "[object Object]" ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
        return h;
      }
      function S(a2, b2, e) {
        if (a2 == null)
          return a2;
        var d = [], c2 = 0;
        R(a2, d, "", "", function(a22) {
          return b2.call(e, a22, c2++);
        });
        return d;
      }
      function T(a2) {
        if (a2._status === -1) {
          var b2 = a2._result;
          b2 = b2();
          b2.then(function(b22) {
            if (a2._status === 0 || a2._status === -1)
              a2._status = 1, a2._result = b22;
          }, function(b22) {
            if (a2._status === 0 || a2._status === -1)
              a2._status = 2, a2._result = b22;
          });
          a2._status === -1 && (a2._status = 0, a2._result = b2);
        }
        if (a2._status === 1)
          return a2._result.default;
        throw a2._result;
      }
      var U = { current: null };
      var V = { transition: null };
      var W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
      exports.Children = { map: S, forEach: function(a2, b2, e) {
        S(a2, function() {
          b2.apply(this, arguments);
        }, e);
      }, count: function(a2) {
        var b2 = 0;
        S(a2, function() {
          b2++;
        });
        return b2;
      }, toArray: function(a2) {
        return S(a2, function(a22) {
          return a22;
        }) || [];
      }, only: function(a2) {
        if (!O(a2))
          throw Error("React.Children.only expected to receive a single React element child.");
        return a2;
      } };
      exports.Component = E;
      exports.Fragment = p;
      exports.Profiler = r;
      exports.PureComponent = G;
      exports.StrictMode = q;
      exports.Suspense = w;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
      exports.cloneElement = function(a2, b2, e) {
        if (a2 === null || a2 === void 0)
          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
        var d = C({}, a2.props), c2 = a2.key, k = a2.ref, h = a2._owner;
        if (b2 != null) {
          b2.ref !== void 0 && (k = b2.ref, h = K.current);
          b2.key !== void 0 && (c2 = "" + b2.key);
          if (a2.type && a2.type.defaultProps)
            var g = a2.type.defaultProps;
          for (f in b2)
            J.call(b2, f) && !L.hasOwnProperty(f) && (d[f] = b2[f] === void 0 && g !== void 0 ? g[f] : b2[f]);
        }
        var f = arguments.length - 2;
        if (f === 1)
          d.children = e;
        else if (1 < f) {
          g = Array(f);
          for (var m = 0; m < f; m++)
            g[m] = arguments[m + 2];
          d.children = g;
        }
        return { $$typeof: l, type: a2.type, key: c2, ref: k, props: d, _owner: h };
      };
      exports.createContext = function(a2) {
        a2 = { $$typeof: u, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
        a2.Provider = { $$typeof: t2, _context: a2 };
        return a2.Consumer = a2;
      };
      exports.createElement = M;
      exports.createFactory = function(a2) {
        var b2 = M.bind(null, a2);
        b2.type = a2;
        return b2;
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(a2) {
        return { $$typeof: v, render: a2 };
      };
      exports.isValidElement = O;
      exports.lazy = function(a2) {
        return { $$typeof: y, _payload: { _status: -1, _result: a2 }, _init: T };
      };
      exports.memo = function(a2, b2) {
        return { $$typeof: x, type: a2, compare: b2 === void 0 ? null : b2 };
      };
      exports.startTransition = function(a2) {
        var b2 = V.transition;
        V.transition = {};
        try {
          a2();
        } finally {
          V.transition = b2;
        }
      };
      exports.unstable_act = function() {
        throw Error("act(...) is not supported in production builds of React.");
      };
      exports.useCallback = function(a2, b2) {
        return U.current.useCallback(a2, b2);
      };
      exports.useContext = function(a2) {
        return U.current.useContext(a2);
      };
      exports.useDebugValue = function() {
      };
      exports.useDeferredValue = function(a2) {
        return U.current.useDeferredValue(a2);
      };
      exports.useEffect = function(a2, b2) {
        return U.current.useEffect(a2, b2);
      };
      exports.useId = function() {
        return U.current.useId();
      };
      exports.useImperativeHandle = function(a2, b2, e) {
        return U.current.useImperativeHandle(a2, b2, e);
      };
      exports.useInsertionEffect = function(a2, b2) {
        return U.current.useInsertionEffect(a2, b2);
      };
      exports.useLayoutEffect = function(a2, b2) {
        return U.current.useLayoutEffect(a2, b2);
      };
      exports.useMemo = function(a2, b2) {
        return U.current.useMemo(a2, b2);
      };
      exports.useReducer = function(a2, b2, e) {
        return U.current.useReducer(a2, b2, e);
      };
      exports.useRef = function(a2) {
        return U.current.useRef(a2);
      };
      exports.useState = function(a2) {
        return U.current.useState(a2);
      };
      exports.useSyncExternalStore = function(a2, b2, e) {
        return U.current.useSyncExternalStore(a2, b2, e);
      };
      exports.useTransition = function() {
        return U.current.useTransition();
      };
      exports.version = "18.2.0";
    }
  });
  var require_react_development2 = __commonJS2({
    "../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement7(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement3(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement22(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape3(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape3("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement22(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement22(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext11(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef3(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext16(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState6(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef11(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect18(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback6(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo11(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component22) {
            var prototype = Component22.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement22(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement22(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement22(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement7.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement3.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition2(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children23 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children23;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext11;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef3;
          exports.isValidElement = isValidElement22;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition2;
          exports.unstable_act = act;
          exports.useCallback = useCallback6;
          exports.useContext = useContext16;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect18;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo11;
          exports.useReducer = useReducer;
          exports.useRef = useRef11;
          exports.useState = useState6;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });
  var require_react2 = __commonJS2({
    "../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = require_react_production_min();
      } else {
        module.exports = require_react_development2();
      }
    }
  });
  var import_react50 = __toESM2(require_react2());
  function getValidChildren(children) {
    return import_react50.Children.toArray(children).filter((child) => (0, import_react50.isValidElement)(child));
  }

  // ../../node_modules/@chakra-ui/react-use-update-effect/dist/index.esm.js
  var import_react51 = __toESM(require_react());
  function useUpdateEffect(callback, deps) {
    const renderCycleRef = (0, import_react51.useRef)(false);
    const effectCycleRef = (0, import_react51.useRef)(false);
    (0, import_react51.useEffect)(() => {
      const mounted = renderCycleRef.current;
      const run = mounted && effectCycleRef.current;
      if (run) {
        return callback();
      }
      effectCycleRef.current = true;
    }, deps);
    (0, import_react51.useEffect)(() => {
      renderCycleRef.current = true;
      return () => {
        renderCycleRef.current = false;
      };
    }, []);
  }

  // ../../node_modules/@chakra-ui/close-button/dist/index.esm.js
  var import_react52 = __toESM(require_react());
  function CloseIcon(props) {
    return /* @__PURE__ */ import_react52.default.createElement(Icon, {
      focusable: "false",
      "aria-hidden": true,
      ...props
    }, /* @__PURE__ */ import_react52.default.createElement("path", {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }));
  }
  var CloseButton = forwardRef(function CloseButton2(props, ref) {
    const styles2 = useStyleConfig("CloseButton", props);
    const { children, isDisabled, __css, ...rest } = omitThemingProps(props);
    const baseStyle41 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return /* @__PURE__ */ import_react52.default.createElement(chakra.button, {
      type: "button",
      "aria-label": "Close",
      ref,
      disabled: isDisabled,
      __css: {
        ...baseStyle41,
        ...styles2,
        ...__css
      },
      ...rest
    }, children || /* @__PURE__ */ import_react52.default.createElement(CloseIcon, {
      width: "1em",
      height: "1em"
    }));
  });
  CloseButton.displayName = "CloseButton";

  // ../../node_modules/@chakra-ui/css-reset/dist/index.esm.js
  var import_react53 = __toESM(require_react());
  var import_react54 = __toESM(require_emotion_react_cjs());
  var vhPolyfill = `
  :root {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100lvh) {
    :root {
      --chakra-vh: 100lvh;
    }
  }
`;
  var CSSPolyfill = () => /* @__PURE__ */ import_react53.default.createElement(import_react54.Global, {
    styles: vhPolyfill
  });
  var CSSReset = () => /* @__PURE__ */ import_react53.default.createElement(import_react54.Global, {
    styles: `
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        font-feature-settings: 'kern';
      }

      *,
      *::before,
      *::after {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
      }

      main {
        display: block;
      }

      hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      pre,
      code,
      kbd,
      samp {
        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      b,
      strong {
        font-weight: bold;
      }

      small {
        font-size: 80%;
      }

      sub,
      sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      sub {
        bottom: -0.25em;
      }

      sup {
        top: -0.5em;
      }

      img {
        border-style: none;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      button,
      input {
        overflow: visible;
      }

      button,
      select {
        text-transform: none;
      }

      button::-moz-focus-inner,
      [type="button"]::-moz-focus-inner,
      [type="reset"]::-moz-focus-inner,
      [type="submit"]::-moz-focus-inner {
        border-style: none;
        padding: 0;
      }

      fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      progress {
        vertical-align: baseline;
      }

      textarea {
        overflow: auto;
      }

      [type="checkbox"],
      [type="radio"] {
        box-sizing: border-box;
        padding: 0;
      }

      [type="number"]::-webkit-inner-spin-button,
      [type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      input[type="number"] {
        -moz-appearance: textfield;
      }

      [type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      [type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      details {
        display: block;
      }

      summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      body,
      blockquote,
      dl,
      dd,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      hr,
      figure,
      p,
      pre {
        margin: 0;
      }

      button {
        background: transparent;
        padding: 0;
      }

      fieldset {
        margin: 0;
        padding: 0;
      }

      ol,
      ul {
        margin: 0;
        padding: 0;
      }

      textarea {
        resize: vertical;
      }

      button,
      [role="button"] {
        cursor: pointer;
      }

      button::-moz-focus-inner {
        border: 0 !important;
      }

      table {
        border-collapse: collapse;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: inherit;
        font-weight: inherit;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      img,
      svg,
      video,
      canvas,
      audio,
      iframe,
      embed,
      object {
        display: block;
      }

      img,
      video {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible] :focus:not([data-focus-visible-added]):not([data-focus-visible-disabled]) {
        outline: none;
        box-shadow: none;
      }

      select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
  });

  // ../../node_modules/@chakra-ui/object-utils/dist/index.esm.js
  function compact(object) {
    const clone = Object.assign({}, object);
    for (let key in clone) {
      if (clone[key] === void 0)
        delete clone[key];
    }
    return clone;
  }

  // ../../node_modules/@chakra-ui/layout/dist/index.esm.js
  var import_react55 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/breakpoint-utils/dist/index.esm.js
  function isObject3(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !Array.isArray(value);
  }
  var breakpoints3 = Object.freeze([
    "base",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl"
  ]);
  function mapResponsive(prop, mapper) {
    if (Array.isArray(prop)) {
      return prop.map((item) => item === null ? null : mapper(item));
    }
    if (isObject3(prop)) {
      return Object.keys(prop).reduce((result, key) => {
        result[key] = mapper(prop[key]);
        return result;
      }, {});
    }
    if (prop != null) {
      return mapper(prop);
    }
    return null;
  }

  // ../../node_modules/@chakra-ui/layout/dist/index.esm.js
  var import_react56 = __toESM(require_react());
  var import_react57 = __toESM(require_react());
  var import_react58 = __toESM(require_react());
  var import_react59 = __toESM(require_react());
  var AspectRatio = forwardRef(function(props, ref) {
    const { ratio = 4 / 3, children, className, ...rest } = props;
    const child = import_react56.Children.only(children);
    const _className = cx("chakra-aspect-ratio", className);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      position: "relative",
      className: _className,
      _before: {
        height: 0,
        content: `""`,
        display: "block",
        paddingBottom: mapResponsive(ratio, (r) => `${1 / r * 100}%`)
      },
      __css: {
        "& > *:not(style)": {
          overflow: "hidden",
          position: "absolute",
          top: "0",
          right: "0",
          bottom: "0",
          left: "0",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          height: "100%"
        },
        "& > img, & > video": {
          objectFit: "cover"
        }
      },
      ...rest
    }, child);
  });
  AspectRatio.displayName = "AspectRatio";
  var Badge = forwardRef(function Badge2(props, ref) {
    const styles2 = useStyleConfig("Badge", props);
    const { className, ...rest } = omitThemingProps(props);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.span, {
      ref,
      className: cx("chakra-badge", props.className),
      ...rest,
      __css: {
        display: "inline-block",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        ...styles2
      }
    });
  });
  Badge.displayName = "Badge";
  var Box = chakra("div");
  Box.displayName = "Box";
  var Square = forwardRef(function Square2(props, ref) {
    const { size: size2, centerContent = true, ...rest } = props;
    const styles2 = centerContent ? { display: "flex", alignItems: "center", justifyContent: "center" } : {};
    return /* @__PURE__ */ import_react55.default.createElement(Box, {
      ref,
      boxSize: size2,
      __css: {
        ...styles2,
        flexShrink: 0,
        flexGrow: 0
      },
      ...rest
    });
  });
  Square.displayName = "Square";
  var Circle = forwardRef(function Circle2(props, ref) {
    const { size: size2, ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(Square, {
      size: size2,
      ref,
      borderRadius: "9999px",
      ...rest
    });
  });
  Circle.displayName = "Circle";
  var Center = chakra("div", {
    baseStyle: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }
  });
  Center.displayName = "Center";
  var centerStyles = {
    horizontal: {
      insetStart: "50%",
      transform: "translateX(-50%)"
    },
    vertical: {
      top: "50%",
      transform: "translateY(-50%)"
    },
    both: {
      insetStart: "50%",
      top: "50%",
      transform: "translate(-50%, -50%)"
    }
  };
  var AbsoluteCenter = forwardRef(function AbsoluteCenter2(props, ref) {
    const { axis = "both", ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      __css: centerStyles[axis],
      ...rest,
      position: "absolute"
    });
  });
  var Code = forwardRef(function Code2(props, ref) {
    const styles2 = useStyleConfig("Code", props);
    const { className, ...rest } = omitThemingProps(props);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.code, {
      ref,
      className: cx("chakra-code", props.className),
      ...rest,
      __css: {
        display: "inline-block",
        ...styles2
      }
    });
  });
  Code.displayName = "Code";
  var Container = forwardRef(function Container2(props, ref) {
    const { className, centerContent, ...rest } = omitThemingProps(props);
    const styles2 = useStyleConfig("Container", props);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      className: cx("chakra-container", className),
      ...rest,
      __css: {
        ...styles2,
        ...centerContent && {
          display: "flex",
          flexDirection: "column",
          alignItems: "center"
        }
      }
    });
  });
  Container.displayName = "Container";
  var Divider = forwardRef(function Divider2(props, ref) {
    const {
      borderLeftWidth,
      borderBottomWidth,
      borderTopWidth,
      borderRightWidth,
      borderWidth,
      borderStyle,
      borderColor,
      ...styles2
    } = useStyleConfig("Divider", props);
    const {
      className,
      orientation = "horizontal",
      __css,
      ...rest
    } = omitThemingProps(props);
    const dividerStyles = {
      vertical: {
        borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
        height: "100%"
      },
      horizontal: {
        borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
        width: "100%"
      }
    };
    return /* @__PURE__ */ import_react55.default.createElement(chakra.hr, {
      ref,
      "aria-orientation": orientation,
      ...rest,
      __css: {
        ...styles2,
        border: "0",
        borderColor,
        borderStyle,
        ...dividerStyles[orientation],
        ...__css
      },
      className: cx("chakra-divider", className)
    });
  });
  Divider.displayName = "Divider";
  var Flex = forwardRef(function Flex2(props, ref) {
    const { direction: direction2, align, justify, wrap: wrap2, basis, grow, shrink, ...rest } = props;
    const styles2 = {
      display: "flex",
      flexDirection: direction2,
      alignItems: align,
      justifyContent: justify,
      flexWrap: wrap2,
      flexBasis: basis,
      flexGrow: grow,
      flexShrink: shrink
    };
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      __css: styles2,
      ...rest
    });
  });
  Flex.displayName = "Flex";
  var Grid = forwardRef(function Grid2(props, ref) {
    const {
      templateAreas,
      gap,
      rowGap,
      columnGap,
      column,
      row,
      autoFlow,
      autoRows,
      templateRows,
      autoColumns,
      templateColumns,
      ...rest
    } = props;
    const styles2 = {
      display: "grid",
      gridTemplateAreas: templateAreas,
      gridGap: gap,
      gridRowGap: rowGap,
      gridColumnGap: columnGap,
      gridAutoColumns: autoColumns,
      gridColumn: column,
      gridRow: row,
      gridAutoFlow: autoFlow,
      gridAutoRows: autoRows,
      gridTemplateRows: templateRows,
      gridTemplateColumns: templateColumns
    };
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      __css: styles2,
      ...rest
    });
  });
  Grid.displayName = "Grid";
  function spanFn(span) {
    return mapResponsive(span, (value) => value === "auto" ? "auto" : `span ${value}/span ${value}`);
  }
  var GridItem = forwardRef(function GridItem2(props, ref) {
    const {
      area,
      colSpan,
      colStart,
      colEnd,
      rowEnd,
      rowSpan,
      rowStart,
      ...rest
    } = props;
    const styles2 = compact({
      gridArea: area,
      gridColumn: spanFn(colSpan),
      gridRow: spanFn(rowSpan),
      gridColumnStart: colStart,
      gridColumnEnd: colEnd,
      gridRowStart: rowStart,
      gridRowEnd: rowEnd
    });
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      __css: styles2,
      ...rest
    });
  });
  GridItem.displayName = "GridItem";
  var Heading = forwardRef(function Heading2(props, ref) {
    const styles2 = useStyleConfig("Heading", props);
    const { className, ...rest } = omitThemingProps(props);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.h2, {
      ref,
      className: cx("chakra-heading", props.className),
      ...rest,
      __css: styles2
    });
  });
  Heading.displayName = "Heading";
  var Mark = forwardRef(function Mark2(props, ref) {
    const styles2 = useStyleConfig("Mark", props);
    const ownProps = omitThemingProps(props);
    return /* @__PURE__ */ import_react55.default.createElement(Box, {
      ref,
      ...ownProps,
      as: "mark",
      __css: { bg: "transparent", whiteSpace: "nowrap", ...styles2 }
    });
  });
  var Kbd = forwardRef(function Kbd2(props, ref) {
    const styles2 = useStyleConfig("Kbd", props);
    const { className, ...rest } = omitThemingProps(props);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.kbd, {
      ref,
      className: cx("chakra-kbd", className),
      ...rest,
      __css: {
        fontFamily: "mono",
        ...styles2
      }
    });
  });
  Kbd.displayName = "Kbd";
  var Link = forwardRef(function Link2(props, ref) {
    const styles2 = useStyleConfig("Link", props);
    const { className, isExternal, ...rest } = omitThemingProps(props);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.a, {
      target: isExternal ? "_blank" : void 0,
      rel: isExternal ? "noopener" : void 0,
      ref,
      className: cx("chakra-link", className),
      ...rest,
      __css: styles2
    });
  });
  Link.displayName = "Link";
  var LinkOverlay = forwardRef(function LinkOverlay2(props, ref) {
    const { isExternal, target, rel, className, ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(chakra.a, {
      ...rest,
      ref,
      className: cx("chakra-linkbox__overlay", className),
      rel: isExternal ? "noopener noreferrer" : rel,
      target: isExternal ? "_blank" : target,
      __css: {
        position: "static",
        "&::before": {
          content: "''",
          cursor: "inherit",
          display: "block",
          position: "absolute",
          top: 0,
          left: 0,
          zIndex: 0,
          width: "100%",
          height: "100%"
        }
      }
    });
  });
  var LinkBox = forwardRef(function LinkBox2(props, ref) {
    const { className, ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      position: "relative",
      ...rest,
      className: cx("chakra-linkbox", className),
      __css: {
        "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
          position: "relative",
          zIndex: 1
        }
      }
    });
  });
  var [ListStylesProvider, useListStyles] = createContext3({
    name: `ListStylesContext`,
    errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in "<List />" `
  });
  var List = forwardRef(function List2(props, ref) {
    const styles2 = useMultiStyleConfig("List", props);
    const {
      children,
      styleType = "none",
      stylePosition,
      spacing: spacing2,
      ...rest
    } = omitThemingProps(props);
    const validChildren = getValidChildren(children);
    const selector2 = "& > *:not(style) ~ *:not(style)";
    const spacingStyle = spacing2 ? { [selector2]: { mt: spacing2 } } : {};
    return /* @__PURE__ */ import_react55.default.createElement(ListStylesProvider, {
      value: styles2
    }, /* @__PURE__ */ import_react55.default.createElement(chakra.ul, {
      ref,
      listStyleType: styleType,
      listStylePosition: stylePosition,
      role: "list",
      __css: { ...styles2.container, ...spacingStyle },
      ...rest
    }, validChildren));
  });
  List.displayName = "List";
  var OrderedList = forwardRef((props, ref) => {
    const { as, ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(List, {
      ref,
      as: "ol",
      styleType: "decimal",
      marginStart: "1em",
      ...rest
    });
  });
  OrderedList.displayName = "OrderedList";
  var UnorderedList = forwardRef(function UnorderedList2(props, ref) {
    const { as, ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(List, {
      ref,
      as: "ul",
      styleType: "initial",
      marginStart: "1em",
      ...rest
    });
  });
  UnorderedList.displayName = "UnorderedList";
  var ListItem = forwardRef(function ListItem2(props, ref) {
    const styles2 = useListStyles();
    return /* @__PURE__ */ import_react55.default.createElement(chakra.li, {
      ref,
      ...props,
      __css: styles2.item
    });
  });
  ListItem.displayName = "ListItem";
  var ListIcon = forwardRef(function ListIcon2(props, ref) {
    const styles2 = useListStyles();
    return /* @__PURE__ */ import_react55.default.createElement(Icon, {
      ref,
      role: "presentation",
      ...props,
      __css: styles2.icon
    });
  });
  ListIcon.displayName = "ListIcon";
  var SimpleGrid = forwardRef(function SimpleGrid2(props, ref) {
    const { columns, spacingX, spacingY, spacing: spacing2, minChildWidth, ...rest } = props;
    const theme2 = useTheme();
    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme2) : countToColumns(columns);
    return /* @__PURE__ */ import_react55.default.createElement(Grid, {
      ref,
      gap: spacing2,
      columnGap: spacingX,
      rowGap: spacingY,
      templateColumns,
      ...rest
    });
  });
  SimpleGrid.displayName = "SimpleGrid";
  function toPx(n) {
    return typeof n === "number" ? `${n}px` : n;
  }
  function widthToColumns(width, theme2) {
    return mapResponsive(width, (value) => {
      const _value = getToken("sizes", value, toPx(value))(theme2);
      return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;
    });
  }
  function countToColumns(count) {
    return mapResponsive(count, (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`);
  }
  var Spacer = chakra("div", {
    baseStyle: {
      flex: 1,
      justifySelf: "stretch",
      alignSelf: "stretch"
    }
  });
  Spacer.displayName = "Spacer";
  var selector = "& > *:not(style) ~ *:not(style)";
  function getStackStyles(options) {
    const { spacing: spacing2, direction: direction2 } = options;
    const directionStyles = {
      column: {
        marginTop: spacing2,
        marginEnd: 0,
        marginBottom: 0,
        marginStart: 0
      },
      row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing2 },
      "column-reverse": {
        marginTop: 0,
        marginEnd: 0,
        marginBottom: spacing2,
        marginStart: 0
      },
      "row-reverse": {
        marginTop: 0,
        marginEnd: spacing2,
        marginBottom: 0,
        marginStart: 0
      }
    };
    return {
      flexDirection: direction2,
      [selector]: mapResponsive(direction2, (value) => directionStyles[value])
    };
  }
  function getDividerStyles(options) {
    const { spacing: spacing2, direction: direction2 } = options;
    const dividerStyles = {
      column: {
        my: spacing2,
        mx: 0,
        borderLeftWidth: 0,
        borderBottomWidth: "1px"
      },
      "column-reverse": {
        my: spacing2,
        mx: 0,
        borderLeftWidth: 0,
        borderBottomWidth: "1px"
      },
      row: {
        mx: spacing2,
        my: 0,
        borderLeftWidth: "1px",
        borderBottomWidth: 0
      },
      "row-reverse": {
        mx: spacing2,
        my: 0,
        borderLeftWidth: "1px",
        borderBottomWidth: 0
      }
    };
    return {
      "&": mapResponsive(direction2, (value) => dividerStyles[value])
    };
  }
  var StackItem = (props) => /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
    className: "chakra-stack__item",
    ...props,
    __css: {
      display: "inline-block",
      flex: "0 0 auto",
      minWidth: 0,
      ...props["__css"]
    }
  });
  StackItem.displayName = "StackItem";
  var Stack = forwardRef((props, ref) => {
    const {
      isInline,
      direction: directionProp,
      align,
      justify,
      spacing: spacing2 = "0.5rem",
      wrap: wrap2,
      children,
      divider,
      className,
      shouldWrapChildren,
      ...rest
    } = props;
    const direction2 = isInline ? "row" : directionProp ?? "column";
    const styles2 = (0, import_react58.useMemo)(() => getStackStyles({ direction: direction2, spacing: spacing2 }), [direction2, spacing2]);
    const dividerStyle = (0, import_react58.useMemo)(() => getDividerStyles({ spacing: spacing2, direction: direction2 }), [spacing2, direction2]);
    const hasDivider = !!divider;
    const shouldUseChildren = !shouldWrapChildren && !hasDivider;
    const clones = (0, import_react58.useMemo)(() => {
      const validChildren = getValidChildren(children);
      return shouldUseChildren ? validChildren : validChildren.map((child, index) => {
        const key = typeof child.key !== "undefined" ? child.key : index;
        const isLast = index + 1 === validChildren.length;
        const wrappedChild = /* @__PURE__ */ import_react55.default.createElement(StackItem, {
          key
        }, child);
        const _child = shouldWrapChildren ? wrappedChild : child;
        if (!hasDivider)
          return _child;
        const clonedDivider = (0, import_react58.cloneElement)(divider, {
          __css: dividerStyle
        });
        const _divider = isLast ? null : clonedDivider;
        return /* @__PURE__ */ import_react55.default.createElement(import_react58.Fragment, {
          key
        }, _child, _divider);
      });
    }, [
      divider,
      dividerStyle,
      hasDivider,
      shouldUseChildren,
      shouldWrapChildren,
      children
    ]);
    const _className = cx("chakra-stack", className);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      display: "flex",
      alignItems: align,
      justifyContent: justify,
      flexDirection: styles2.flexDirection,
      flexWrap: wrap2,
      className: _className,
      __css: hasDivider ? {} : { [selector]: styles2[selector] },
      ...rest
    }, clones);
  });
  Stack.displayName = "Stack";
  var HStack = forwardRef((props, ref) => /* @__PURE__ */ import_react55.default.createElement(Stack, {
    align: "center",
    ...props,
    direction: "row",
    ref
  }));
  HStack.displayName = "HStack";
  var StackDivider = (props) => /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
    className: "chakra-stack__divider",
    ...props,
    __css: {
      ...props["__css"],
      borderWidth: 0,
      alignSelf: "stretch",
      borderColor: "inherit",
      width: "auto",
      height: "auto"
    }
  });
  StackDivider.displayName = "StackDivider";
  var VStack = forwardRef((props, ref) => /* @__PURE__ */ import_react55.default.createElement(Stack, {
    align: "center",
    ...props,
    direction: "column",
    ref
  }));
  VStack.displayName = "VStack";
  var Text = forwardRef(function Text2(props, ref) {
    const styles2 = useStyleConfig("Text", props);
    const { className, align, decoration, casing, ...rest } = omitThemingProps(props);
    const aliasedProps = compact({
      textAlign: props.align,
      textDecoration: props.decoration,
      textTransform: props.casing
    });
    return /* @__PURE__ */ import_react55.default.createElement(chakra.p, {
      ref,
      className: cx("chakra-text", props.className),
      ...aliasedProps,
      ...rest,
      __css: styles2
    });
  });
  Text.displayName = "Text";
  function px3(value) {
    return typeof value === "number" ? `${value}px` : value;
  }
  var Wrap = forwardRef(function Wrap2(props, ref) {
    const {
      spacing: spacing2 = "0.5rem",
      spacingX,
      spacingY,
      children,
      justify,
      direction: direction2,
      align,
      className,
      shouldWrapChildren,
      ...rest
    } = props;
    const styles2 = (0, import_react59.useMemo)(() => {
      const { spacingX: x = spacing2, spacingY: y = spacing2 } = {
        spacingX,
        spacingY
      };
      return {
        "--chakra-wrap-x-spacing": (theme2) => mapResponsive(x, (value) => px3(tokenToCSSVar("space", value)(theme2))),
        "--chakra-wrap-y-spacing": (theme2) => mapResponsive(y, (value) => px3(tokenToCSSVar("space", value)(theme2))),
        "--wrap-x-spacing": "calc(var(--chakra-wrap-x-spacing) / 2)",
        "--wrap-y-spacing": "calc(var(--chakra-wrap-y-spacing) / 2)",
        display: "flex",
        flexWrap: "wrap",
        justifyContent: justify,
        alignItems: align,
        flexDirection: direction2,
        listStyleType: "none",
        padding: "0",
        margin: "calc(var(--wrap-y-spacing) * -1) calc(var(--wrap-x-spacing) * -1)",
        "& > *:not(style)": {
          margin: "var(--wrap-y-spacing) var(--wrap-x-spacing)"
        }
      };
    }, [spacing2, spacingX, spacingY, justify, align, direction2]);
    const childrenToRender = (0, import_react59.useMemo)(() => shouldWrapChildren ? import_react59.Children.map(children, (child, index) => /* @__PURE__ */ import_react55.default.createElement(WrapItem, {
      key: index
    }, child)) : children, [children, shouldWrapChildren]);
    return /* @__PURE__ */ import_react55.default.createElement(chakra.div, {
      ref,
      className: cx("chakra-wrap", className),
      overflow: "hidden",
      ...rest
    }, /* @__PURE__ */ import_react55.default.createElement(chakra.ul, {
      className: "chakra-wrap__list",
      __css: styles2
    }, childrenToRender));
  });
  Wrap.displayName = "Wrap";
  var WrapItem = forwardRef(function WrapItem2(props, ref) {
    const { className, ...rest } = props;
    return /* @__PURE__ */ import_react55.default.createElement(chakra.li, {
      ref,
      __css: { display: "flex", alignItems: "flex-start" },
      className: cx("chakra-wrap__listitem", className),
      ...rest
    });
  });
  WrapItem.displayName = "WrapItem";

  // ../../node_modules/@chakra-ui/react-env/dist/index.esm.js
  var import_react60 = __toESM(require_react());
  var import_react61 = __toESM(require_react());
  var doc = {
    body: {
      classList: {
        add() {
        },
        remove() {
        }
      }
    },
    addEventListener() {
    },
    removeEventListener() {
    },
    activeElement: {
      blur() {
      },
      nodeName: ""
    },
    querySelector() {
      return null;
    },
    querySelectorAll() {
      return [];
    },
    getElementById() {
      return null;
    },
    createEvent() {
      return {
        initEvent() {
        }
      };
    },
    createElement() {
      return {
        children: [],
        childNodes: [],
        style: {},
        setAttribute() {
        },
        getElementsByTagName() {
          return [];
        }
      };
    }
  };
  var ssrDocument = doc;
  var noop3 = () => {
  };
  var win = {
    document: ssrDocument,
    navigator: {
      userAgent: ""
    },
    CustomEvent: function CustomEvent() {
      return this;
    },
    addEventListener: noop3,
    removeEventListener: noop3,
    getComputedStyle() {
      return {
        getPropertyValue() {
          return "";
        }
      };
    },
    matchMedia() {
      return {
        matches: false,
        addListener: noop3,
        removeListener: noop3
      };
    },
    requestAnimationFrame(callback) {
      if (typeof setTimeout === "undefined") {
        callback();
        return null;
      }
      return setTimeout(callback, 0);
    },
    cancelAnimationFrame(id) {
      if (typeof setTimeout === "undefined")
        return;
      clearTimeout(id);
    },
    setTimeout: () => 0,
    clearTimeout: noop3,
    setInterval: () => 0,
    clearInterval: noop3
  };
  var ssrWindow = win;
  var mockEnv = {
    window: ssrWindow,
    document: ssrDocument
  };
  var defaultEnv = typeof window !== "undefined" ? { window, document } : mockEnv;
  var EnvironmentContext = (0, import_react61.createContext)(defaultEnv);
  EnvironmentContext.displayName = "EnvironmentContext";
  function EnvironmentProvider(props) {
    const { children, environment: environmentProp } = props;
    const [node, setNode] = (0, import_react61.useState)(null);
    const [mounted, setMounted] = (0, import_react61.useState)(false);
    (0, import_react61.useEffect)(() => setMounted(true), []);
    const context = (0, import_react61.useMemo)(() => {
      if (environmentProp) {
        return environmentProp;
      }
      const doc2 = node == null ? void 0 : node.ownerDocument;
      const win2 = node == null ? void 0 : node.ownerDocument.defaultView;
      const env = doc2 ? { document: doc2, window: win2 } : defaultEnv;
      return env;
    }, [node, environmentProp]);
    return /* @__PURE__ */ import_react60.default.createElement(EnvironmentContext.Provider, {
      value: context
    }, children, !environmentProp && mounted && /* @__PURE__ */ import_react60.default.createElement("span", {
      id: "__chakra_env",
      hidden: true,
      ref: (el) => {
        (0, import_react61.startTransition)(() => {
          if (el)
            setNode(el);
        });
      }
    }));
  }
  EnvironmentProvider.displayName = "EnvironmentProvider";

  // ../../node_modules/@chakra-ui/portal/dist/index.esm.js
  var import_react62 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  var import_react63 = __toESM(require_react());
  var [PortalManagerContextProvider, usePortalManager] = createContext3({
    strict: false,
    name: "PortalManagerContext"
  });
  function PortalManager(props) {
    const { children, zIndex } = props;
    return /* @__PURE__ */ import_react62.default.createElement(PortalManagerContextProvider, {
      value: { zIndex }
    }, children);
  }
  PortalManager.displayName = "PortalManager";
  var [PortalContextProvider, usePortalContext] = createContext3({
    strict: false,
    name: "PortalContext"
  });
  var PORTAL_CLASSNAME = "chakra-portal";
  var PORTAL_SELECTOR = `.chakra-portal`;
  var Container3 = (props) => /* @__PURE__ */ import_react62.default.createElement("div", {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props.zIndex,
      top: 0,
      left: 0,
      right: 0
    }
  }, props.children);
  var DefaultPortal = (props) => {
    const { appendToParentPortal, children } = props;
    const [tempNode, setTempNode] = (0, import_react63.useState)(null);
    const portal = (0, import_react63.useRef)(null);
    const [, forceUpdate] = (0, import_react63.useState)({});
    (0, import_react63.useEffect)(() => forceUpdate({}), []);
    const parentPortal = usePortalContext();
    const manager = usePortalManager();
    useSafeLayoutEffect(() => {
      if (!tempNode)
        return;
      const doc2 = tempNode.ownerDocument;
      const host = appendToParentPortal ? parentPortal ?? doc2.body : doc2.body;
      if (!host)
        return;
      portal.current = doc2.createElement("div");
      portal.current.className = PORTAL_CLASSNAME;
      host.appendChild(portal.current);
      forceUpdate({});
      const portalNode = portal.current;
      return () => {
        if (host.contains(portalNode)) {
          host.removeChild(portalNode);
        }
      };
    }, [tempNode]);
    const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */ import_react62.default.createElement(Container3, {
      zIndex: manager == null ? void 0 : manager.zIndex
    }, children) : children;
    return portal.current ? (0, import_react_dom.createPortal)(/* @__PURE__ */ import_react62.default.createElement(PortalContextProvider, {
      value: portal.current
    }, _children), portal.current) : /* @__PURE__ */ import_react62.default.createElement("span", {
      ref: (el) => {
        if (el)
          setTempNode(el);
      }
    });
  };
  var ContainerPortal = (props) => {
    const { children, containerRef, appendToParentPortal } = props;
    const containerEl = containerRef.current;
    const host = containerEl ?? (typeof window !== "undefined" ? document.body : void 0);
    const portal = (0, import_react63.useMemo)(() => {
      const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
      if (node)
        node.className = PORTAL_CLASSNAME;
      return node;
    }, [containerEl]);
    const [, forceUpdate] = (0, import_react63.useState)({});
    useSafeLayoutEffect(() => forceUpdate({}), []);
    useSafeLayoutEffect(() => {
      if (!portal || !host)
        return;
      host.appendChild(portal);
      return () => {
        host.removeChild(portal);
      };
    }, [portal, host]);
    if (host && portal) {
      return (0, import_react_dom.createPortal)(/* @__PURE__ */ import_react62.default.createElement(PortalContextProvider, {
        value: appendToParentPortal ? portal : null
      }, children), portal);
    }
    return null;
  };
  function Portal(props) {
    const { containerRef, ...rest } = props;
    return containerRef ? /* @__PURE__ */ import_react62.default.createElement(ContainerPortal, {
      containerRef,
      ...rest
    }) : /* @__PURE__ */ import_react62.default.createElement(DefaultPortal, {
      ...rest
    });
  }
  Portal.defaultProps = {
    appendToParentPortal: true
  };
  Portal.className = PORTAL_CLASSNAME;
  Portal.selector = PORTAL_SELECTOR;
  Portal.displayName = "Portal";

  // ../../node_modules/@chakra-ui/anatomy/dist/index.esm.js
  function anatomy(name, map = {}) {
    let called = false;
    function assert() {
      if (!called) {
        called = true;
        return;
      }
      throw new Error("[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?");
    }
    function parts(...values) {
      assert();
      for (const part of values) {
        ;
        map[part] = toPart(part);
      }
      return anatomy(name, map);
    }
    function extend(...parts2) {
      for (const part of parts2) {
        if (part in map)
          continue;
        map[part] = toPart(part);
      }
      return anatomy(name, map);
    }
    function selectors() {
      const value = Object.fromEntries(Object.entries(map).map(([key, part]) => [key, part.selector]));
      return value;
    }
    function classnames() {
      const value = Object.fromEntries(Object.entries(map).map(([key, part]) => [key, part.className]));
      return value;
    }
    function toPart(part) {
      const el = ["container", "root"].includes(part ?? "") ? [name] : [name, part];
      const attr = el.filter(Boolean).join("__");
      const className = `chakra-${attr}`;
      const partObj = {
        className,
        selector: `.${className}`,
        toString: () => part
      };
      return partObj;
    }
    const __type = {};
    return {
      parts,
      toPart,
      extend,
      selectors,
      classnames,
      get keys() {
        return Object.keys(map);
      },
      __type
    };
  }
  var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
  var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
  var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
  var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
  var buttonAnatomy = anatomy("button").parts();
  var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
  var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
  var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
  var editableAnatomy = anatomy("editable").parts("preview", "input", "textarea");
  var formAnatomy = anatomy("form").parts("container", "requiredIndicator", "helperText");
  var formErrorAnatomy = anatomy("formError").parts("text", "icon");
  var inputAnatomy = anatomy("input").parts("addon", "field", "element");
  var listAnatomy = anatomy("list").parts("container", "item", "icon");
  var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "command", "divider");
  var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
  var numberInputAnatomy = anatomy("numberinput").parts("root", "field", "stepperGroup", "stepper");
  var pinInputAnatomy = anatomy("pininput").parts("field");
  var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
  var progressAnatomy = anatomy("progress").parts("label", "filledTrack", "track");
  var radioAnatomy = anatomy("radio").parts("container", "control", "label");
  var selectAnatomy = anatomy("select").parts("field", "icon");
  var sliderAnatomy = anatomy("slider").parts("container", "track", "thumb", "filledTrack", "mark");
  var statAnatomy = anatomy("stat").parts("container", "label", "helpText", "number", "icon");
  var switchAnatomy = anatomy("switch").parts("container", "track", "thumb");
  var tableAnatomy = anatomy("table").parts("table", "thead", "tbody", "tr", "th", "td", "tfoot", "caption");
  var tabsAnatomy = anatomy("tabs").parts("root", "tab", "tablist", "tabpanel", "tabpanels", "indicator");
  var tagAnatomy = anatomy("tag").parts("container", "label", "closeButton");

  // ../../node_modules/@ctrl/tinycolor/dist/module/util.js
  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = "100%";
    }
    var isPercent = isPercentage(n);
    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
    if (isPercent) {
      n = parseInt(String(n * max), 10) / 100;
    }
    if (Math.abs(n - max) < 1e-6) {
      return 1;
    }
    if (max === 360) {
      n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
    } else {
      n = n % max / parseFloat(String(max));
    }
    return n;
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function isOnePointZero(n) {
    return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
  }
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") !== -1;
  }
  function boundAlpha(a2) {
    a2 = parseFloat(a2);
    if (isNaN(a2) || a2 < 0 || a2 > 1) {
      a2 = 1;
    }
    return a2;
  }
  function convertToPercentage(n) {
    if (n <= 1) {
      return "".concat(Number(n) * 100, "%");
    }
    return n;
  }
  function pad2(c2) {
    return c2.length === 1 ? "0" + c2 : String(c2);
  }

  // ../../node_modules/@ctrl/tinycolor/dist/module/conversion.js
  function rgbToRgb(r, g, b2) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b2, 255) * 255
    };
  }
  function rgbToHsl(r, g, b2) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r, g, b2);
    var min = Math.min(r, g, b2);
    var h = 0;
    var s = 0;
    var l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = 0;
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b2) / d + (g < b2 ? 6 : 0);
          break;
        case g:
          h = (b2 - r) / d + 2;
          break;
        case b2:
          h = (r - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return { h, s, l };
  }
  function hue2rgb(p, q, t2) {
    if (t2 < 0) {
      t2 += 1;
    }
    if (t2 > 1) {
      t2 -= 1;
    }
    if (t2 < 1 / 6) {
      return p + (q - p) * (6 * t2);
    }
    if (t2 < 1 / 2) {
      return q;
    }
    if (t2 < 2 / 3) {
      return p + (q - p) * (2 / 3 - t2) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var r;
    var g;
    var b2;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    if (s === 0) {
      g = l;
      b2 = l;
      r = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b2 = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: r * 255, g: g * 255, b: b2 * 255 };
  }
  function rgbToHsv(r, g, b2) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b2 = bound01(b2, 255);
    var max = Math.max(r, g, b2);
    var min = Math.min(r, g, b2);
    var h = 0;
    var v = max;
    var d = max - min;
    var s = max === 0 ? 0 : d / max;
    if (max === min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b2) / d + (g < b2 ? 6 : 0);
          break;
        case g:
          h = (b2 - r) / d + 2;
          break;
        case b2:
          h = (r - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return { h, s, v };
  }
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t2 = v * (1 - (1 - f) * s);
    var mod = i % 6;
    var r = [v, q, p, p, t2, v][mod];
    var g = [t2, v, v, q, p, p][mod];
    var b2 = [p, p, t2, v, v, q][mod];
    return { r: r * 255, g: g * 255, b: b2 * 255 };
  }
  function rgbToHex(r, g, b2, allow3Char) {
    var hex2 = [
      pad2(Math.round(r).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b2).toString(16))
    ];
    if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
    }
    return hex2.join("");
  }
  function rgbaToHex(r, g, b2, a2, allow4Char) {
    var hex2 = [
      pad2(Math.round(r).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b2).toString(16)),
      pad2(convertDecimalToHex(a2))
    ];
    if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
    }
    return hex2.join("");
  }
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function numberInputToObject(color3) {
    return {
      r: color3 >> 16,
      g: (color3 & 65280) >> 8,
      b: color3 & 255
    };
  }

  // ../../node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
  var names2 = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };

  // ../../node_modules/@ctrl/tinycolor/dist/module/format-input.js
  function inputToRGB(color3) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a2 = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color3 === "string") {
      color3 = stringInputToObject(color3);
    }
    if (typeof color3 === "object") {
      if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
        rgb = rgbToRgb(color3.r, color3.g, color3.b);
        ok = true;
        format = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
        s = convertToPercentage(color3.s);
        v = convertToPercentage(color3.v);
        rgb = hsvToRgb(color3.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
        s = convertToPercentage(color3.s);
        l = convertToPercentage(color3.l);
        rgb = hslToRgb(color3.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (Object.prototype.hasOwnProperty.call(color3, "a")) {
        a2 = color3.a;
      }
    }
    a2 = boundAlpha(a2);
    return {
      ok,
      format: color3.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a2
    };
  }
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  function stringInputToObject(color3) {
    color3 = color3.trim().toLowerCase();
    if (color3.length === 0) {
      return false;
    }
    var named = false;
    if (names2[color3]) {
      color3 = names2[color3];
      named = true;
    } else if (color3 === "transparent") {
      return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }
    var match = matchers.rgb.exec(color3);
    if (match) {
      return { r: match[1], g: match[2], b: match[3] };
    }
    match = matchers.rgba.exec(color3);
    if (match) {
      return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    match = matchers.hsl.exec(color3);
    if (match) {
      return { h: match[1], s: match[2], l: match[3] };
    }
    match = matchers.hsla.exec(color3);
    if (match) {
      return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    match = matchers.hsv.exec(color3);
    if (match) {
      return { h: match[1], s: match[2], v: match[3] };
    }
    match = matchers.hsva.exec(color3);
    if (match) {
      return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    match = matchers.hex8.exec(color3);
    if (match) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    match = matchers.hex6.exec(color3);
    if (match) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    match = matchers.hex4.exec(color3);
    if (match) {
      return {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        a: convertHexToDecimal(match[4] + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    match = matchers.hex3.exec(color3);
    if (match) {
      return {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function isValidCSSUnit(color3) {
    return Boolean(matchers.CSS_UNIT.exec(String(color3)));
  }

  // ../../node_modules/@ctrl/tinycolor/dist/module/index.js
  var TinyColor = function() {
    function TinyColor2(color3, opts) {
      if (color3 === void 0) {
        color3 = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a7;
      if (color3 instanceof TinyColor2) {
        return color3;
      }
      if (typeof color3 === "number") {
        color3 = numberInputToObject(color3);
      }
      this.originalInput = color3;
      var rgb = inputToRGB(color3);
      this.originalInput = color3;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a7 = opts.format) !== null && _a7 !== void 0 ? _a7 : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R;
      var G;
      var B;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R = RsRGB / 12.92;
      } else {
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G = GsRGB / 12.92;
      } else {
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B = BsRGB / 12.92;
      } else {
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha2) {
      this.a = boundAlpha(alpha2);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h = Math.round(hsv.h * 360);
      var s = Math.round(hsv.s * 100);
      var v = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h = Math.round(hsl.h * 360);
      var s = Math.round(hsl.s * 100);
      var l = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)") : "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r = Math.round(this.r);
      var g = Math.round(this.g);
      var b2 = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(r, ", ").concat(g, ", ").concat(b2, ")") : "rgba(".concat(r, ", ").concat(g, ", ").concat(b2, ", ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return "".concat(Math.round(bound01(x, 255) * 100), "%");
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i = 0, _a7 = Object.entries(names2); _i < _a7.length; _i++) {
        var _b3 = _a7[_i], key = _b3[0], value = _b3[1];
        if (hex2 === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format) {
      var formatSet = Boolean(format);
      format = format !== null && format !== void 0 ? format : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith("hex") || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color3, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color3).toRgb();
      var p = amount / 100;
      var rgba2 = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      return new TinyColor2(rgba2);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h = hsv.h;
      var s = hsv.s;
      var v = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({ h, s, v }));
        v = (v + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h = hsl.h;
      return [
        this,
        new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground = function(background2) {
      var fg = this.toRgb();
      var bg = new TinyColor2(background2).toRgb();
      return new TinyColor2({
        r: bg.r + (fg.r - bg.r) * fg.a,
        g: bg.g + (fg.g - bg.g) * fg.a,
        b: bg.b + (fg.b - bg.b) * fg.a
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i = 1; i < n; i++) {
        result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color3) {
      return this.toRgbString() === new TinyColor2(color3).toRgbString();
    };
    return TinyColor2;
  }();

  // ../../node_modules/@ctrl/tinycolor/dist/module/random.js
  function random(options) {
    if (options === void 0) {
      options = {};
    }
    if (options.count !== void 0 && options.count !== null) {
      var totalColors = options.count;
      var colors2 = [];
      options.count = void 0;
      while (totalColors > colors2.length) {
        options.count = null;
        if (options.seed) {
          options.seed += 1;
        }
        colors2.push(random(options));
      }
      options.count = totalColors;
      return colors2;
    }
    var h = pickHue(options.hue, options.seed);
    var s = pickSaturation(h, options);
    var v = pickBrightness(h, s, options);
    var res = { h, s, v };
    if (options.alpha !== void 0) {
      res.a = options.alpha;
    }
    return new TinyColor(res);
  }
  function pickHue(hue, seed) {
    var hueRange = getHueRange(hue);
    var res = randomWithin(hueRange, seed);
    if (res < 0) {
      res = 360 + res;
    }
    return res;
  }
  function pickSaturation(hue, options) {
    if (options.hue === "monochrome") {
      return 0;
    }
    if (options.luminosity === "random") {
      return randomWithin([0, 100], options.seed);
    }
    var saturationRange = getColorInfo(hue).saturationRange;
    var sMin = saturationRange[0];
    var sMax = saturationRange[1];
    switch (options.luminosity) {
      case "bright":
        sMin = 55;
        break;
      case "dark":
        sMin = sMax - 10;
        break;
      case "light":
        sMax = 55;
        break;
      default:
        break;
    }
    return randomWithin([sMin, sMax], options.seed);
  }
  function pickBrightness(H, S, options) {
    var bMin = getMinimumBrightness(H, S);
    var bMax = 100;
    switch (options.luminosity) {
      case "dark":
        bMax = bMin + 20;
        break;
      case "light":
        bMin = (bMax + bMin) / 2;
        break;
      case "random":
        bMin = 0;
        bMax = 100;
        break;
      default:
        break;
    }
    return randomWithin([bMin, bMax], options.seed);
  }
  function getMinimumBrightness(H, S) {
    var lowerBounds = getColorInfo(H).lowerBounds;
    for (var i = 0; i < lowerBounds.length - 1; i++) {
      var s1 = lowerBounds[i][0];
      var v1 = lowerBounds[i][1];
      var s2 = lowerBounds[i + 1][0];
      var v2 = lowerBounds[i + 1][1];
      if (S >= s1 && S <= s2) {
        var m = (v2 - v1) / (s2 - s1);
        var b2 = v1 - m * s1;
        return m * S + b2;
      }
    }
    return 0;
  }
  function getHueRange(colorInput) {
    var num = parseInt(colorInput, 10);
    if (!Number.isNaN(num) && num < 360 && num > 0) {
      return [num, num];
    }
    if (typeof colorInput === "string") {
      var namedColor = bounds.find(function(n) {
        return n.name === colorInput;
      });
      if (namedColor) {
        var color3 = defineColor(namedColor);
        if (color3.hueRange) {
          return color3.hueRange;
        }
      }
      var parsed = new TinyColor(colorInput);
      if (parsed.isValid) {
        var hue = parsed.toHsv().h;
        return [hue, hue];
      }
    }
    return [0, 360];
  }
  function getColorInfo(hue) {
    if (hue >= 334 && hue <= 360) {
      hue -= 360;
    }
    for (var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++) {
      var bound = bounds_1[_i];
      var color3 = defineColor(bound);
      if (color3.hueRange && hue >= color3.hueRange[0] && hue <= color3.hueRange[1]) {
        return color3;
      }
    }
    throw Error("Color not found");
  }
  function randomWithin(range, seed) {
    if (seed === void 0) {
      return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));
    }
    var max = range[1] || 1;
    var min = range[0] || 0;
    seed = (seed * 9301 + 49297) % 233280;
    var rnd = seed / 233280;
    return Math.floor(min + rnd * (max - min));
  }
  function defineColor(bound) {
    var sMin = bound.lowerBounds[0][0];
    var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];
    var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];
    var bMax = bound.lowerBounds[0][1];
    return {
      name: bound.name,
      hueRange: bound.hueRange,
      lowerBounds: bound.lowerBounds,
      saturationRange: [sMin, sMax],
      brightnessRange: [bMin, bMax]
    };
  }
  var bounds = [
    {
      name: "monochrome",
      hueRange: null,
      lowerBounds: [
        [0, 0],
        [100, 0]
      ]
    },
    {
      name: "red",
      hueRange: [-26, 18],
      lowerBounds: [
        [20, 100],
        [30, 92],
        [40, 89],
        [50, 85],
        [60, 78],
        [70, 70],
        [80, 60],
        [90, 55],
        [100, 50]
      ]
    },
    {
      name: "orange",
      hueRange: [19, 46],
      lowerBounds: [
        [20, 100],
        [30, 93],
        [40, 88],
        [50, 86],
        [60, 85],
        [70, 70],
        [100, 70]
      ]
    },
    {
      name: "yellow",
      hueRange: [47, 62],
      lowerBounds: [
        [25, 100],
        [40, 94],
        [50, 89],
        [60, 86],
        [70, 84],
        [80, 82],
        [90, 80],
        [100, 75]
      ]
    },
    {
      name: "green",
      hueRange: [63, 178],
      lowerBounds: [
        [30, 100],
        [40, 90],
        [50, 85],
        [60, 81],
        [70, 74],
        [80, 64],
        [90, 50],
        [100, 40]
      ]
    },
    {
      name: "blue",
      hueRange: [179, 257],
      lowerBounds: [
        [20, 100],
        [30, 86],
        [40, 80],
        [50, 74],
        [60, 60],
        [70, 52],
        [80, 44],
        [90, 39],
        [100, 35]
      ]
    },
    {
      name: "purple",
      hueRange: [258, 282],
      lowerBounds: [
        [20, 100],
        [30, 87],
        [40, 79],
        [50, 70],
        [60, 65],
        [70, 59],
        [80, 52],
        [90, 45],
        [100, 42]
      ]
    },
    {
      name: "pink",
      hueRange: [283, 334],
      lowerBounds: [
        [20, 100],
        [30, 90],
        [40, 86],
        [60, 84],
        [80, 80],
        [90, 75],
        [100, 73]
      ]
    }
  ];

  // ../../node_modules/@chakra-ui/theme-tools/dist/index.esm.js
  function dlv_es_default(t2, e, l, n, r) {
    for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
      t2 = t2 ? t2[e[n]] : r;
    return t2 === r ? l : t2;
  }
  var isEmptyObject = (obj) => Object.keys(obj).length === 0;
  var getColor = (theme2, color3, fallback) => {
    const hex2 = dlv_es_default(theme2, `colors.${color3}`, color3);
    const { isValid } = new TinyColor(hex2);
    return isValid ? hex2 : fallback;
  };
  var tone = (color3) => (theme2) => {
    const hex2 = getColor(theme2, color3);
    const isDark2 = new TinyColor(hex2).isDark();
    return isDark2 ? "dark" : "light";
  };
  var isDark = (color3) => (theme2) => tone(color3)(theme2) === "dark";
  var transparentize = (color3, opacity) => (theme2) => {
    const raw = getColor(theme2, color3);
    return new TinyColor(raw).setAlpha(opacity).toRgbString();
  };
  function generateStripe(size2 = "1rem", color3 = "rgba(255, 255, 255, 0.15)") {
    return {
      backgroundImage: `linear-gradient(
    45deg,
    ${color3} 25%,
    transparent 25%,
    transparent 50%,
    ${color3} 50%,
    ${color3} 75%,
    transparent 75%,
    transparent
  )`,
      backgroundSize: `${size2} ${size2}`
    };
  }
  function randomColor(opts) {
    const fallback = random().toHexString();
    if (!opts || isEmptyObject(opts)) {
      return fallback;
    }
    if (opts.string && opts.colors) {
      return randomColorFromList(opts.string, opts.colors);
    }
    if (opts.string && !opts.colors) {
      return randomColorFromString(opts.string);
    }
    if (opts.colors && !opts.string) {
      return randomFromList(opts.colors);
    }
    return fallback;
  }
  function randomColorFromString(str) {
    let hash = 0;
    if (str.length === 0)
      return hash.toString();
    for (let i = 0; i < str.length; i += 1) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
      hash = hash & hash;
    }
    let color3 = "#";
    for (let j = 0; j < 3; j += 1) {
      const value = hash >> j * 8 & 255;
      color3 += `00${value.toString(16)}`.substr(-2);
    }
    return color3;
  }
  function randomColorFromList(str, list2) {
    let index = 0;
    if (str.length === 0)
      return list2[0];
    for (let i = 0; i < str.length; i += 1) {
      index = str.charCodeAt(i) + ((index << 5) - index);
      index = index & index;
    }
    index = (index % list2.length + list2.length) % list2.length;
    return list2[index];
  }
  function randomFromList(list2) {
    return list2[Math.floor(Math.random() * list2.length)];
  }
  function mode(light, dark) {
    return (props) => props.colorMode === "dark" ? dark : light;
  }
  function orient(options) {
    const { orientation, vertical, horizontal } = options;
    if (!orientation)
      return {};
    return orientation === "vertical" ? vertical : horizontal;
  }
  function isObject4(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !Array.isArray(value);
  }
  function toRef(operand) {
    if (isObject4(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
  var add2 = (...operands) => `calc(${toExpr("+", ...operands)})`;
  var subtract3 = (...operands) => `calc(${toExpr("-", ...operands)})`;
  var multiply2 = (...operands) => `calc(${toExpr("*", ...operands)})`;
  var divide2 = (...operands) => `calc(${toExpr("/", ...operands)})`;
  var negate2 = (x) => {
    const value = toRef(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    }
    return multiply2(value, -1);
  };
  var calc2 = Object.assign((x) => ({
    add: (...operands) => calc2(add2(x, ...operands)),
    subtract: (...operands) => calc2(subtract3(x, ...operands)),
    multiply: (...operands) => calc2(multiply2(x, ...operands)),
    divide: (...operands) => calc2(divide2(x, ...operands)),
    negate: () => calc2(negate2(x)),
    toString: () => x.toString()
  }), {
    add: add2,
    subtract: subtract3,
    multiply: multiply2,
    divide: divide2,
    negate: negate2
  });
  function isDecimal(value) {
    return !Number.isInteger(parseFloat(value.toString()));
  }
  function replaceWhiteSpace2(value, replaceValue = "-") {
    return value.replace(/\s+/g, replaceValue);
  }
  function escape2(value) {
    const valueStr = replaceWhiteSpace2(value.toString());
    if (valueStr.includes("\\."))
      return value;
    return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
  }
  function addPrefix2(value, prefix = "") {
    return [prefix, escape2(value)].filter(Boolean).join("-");
  }
  function toVarRef(name, fallback) {
    return `var(${escape2(name)}${fallback ? `, ${fallback}` : ""})`;
  }
  function toVar(value, prefix = "") {
    return `--${addPrefix2(value, prefix)}`;
  }
  function cssVar2(name, options) {
    const cssVariable = toVar(name, options == null ? void 0 : options.prefix);
    return {
      variable: cssVariable,
      reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
    };
  }
  function getFallback(fallback) {
    if (typeof fallback === "string")
      return fallback;
    return fallback == null ? void 0 : fallback.reference;
  }

  // ../../node_modules/@chakra-ui/theme/dist/index.esm.js
  var { definePartsStyle, defineMultiStyleConfig } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
  var baseStyleContainer = defineStyle({
    borderTopWidth: "1px",
    borderColor: "inherit",
    _last: {
      borderBottomWidth: "1px"
    }
  });
  var baseStyleButton = defineStyle({
    transitionProperty: "common",
    transitionDuration: "normal",
    fontSize: "md",
    _focusVisible: {
      boxShadow: "outline"
    },
    _hover: {
      bg: "blackAlpha.50"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    px: "4",
    py: "2"
  });
  var baseStylePanel = defineStyle({
    pt: "2",
    px: "4",
    pb: "5"
  });
  var baseStyleIcon = defineStyle({
    fontSize: "1.25em"
  });
  var baseStyle = definePartsStyle({
    container: baseStyleContainer,
    button: baseStyleButton,
    panel: baseStylePanel,
    icon: baseStyleIcon
  });
  var accordionTheme = defineMultiStyleConfig({ baseStyle });
  var { definePartsStyle: definePartsStyle2, defineMultiStyleConfig: defineMultiStyleConfig2 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
  var $fg = cssVar("alert-fg");
  var $bg = cssVar("alert-bg");
  var baseStyle2 = definePartsStyle2({
    container: {
      bg: $bg.reference,
      px: "4",
      py: "3"
    },
    title: {
      fontWeight: "bold",
      lineHeight: "6",
      marginEnd: "2"
    },
    description: {
      lineHeight: "6"
    },
    icon: {
      color: $fg.reference,
      flexShrink: 0,
      marginEnd: "3",
      w: "5",
      h: "6"
    },
    spinner: {
      color: $fg.reference,
      flexShrink: 0,
      marginEnd: "3",
      w: "5",
      h: "5"
    }
  });
  function getBg(props) {
    const { theme: theme2, colorScheme: c2 } = props;
    const lightBg = getColor(theme2, `${c2}.100`, c2);
    const darkBg = transparentize(`${c2}.200`, 0.16)(theme2);
    return mode(lightBg, darkBg)(props);
  }
  var variantSubtle = definePartsStyle2((props) => {
    const { colorScheme: c2 } = props;
    const fg = mode(`${c2}.500`, `${c2}.200`)(props);
    return {
      container: {
        [$bg.variable]: getBg(props),
        [$fg.variable]: `colors.${fg}`
      }
    };
  });
  var variantLeftAccent = definePartsStyle2((props) => {
    const { colorScheme: c2 } = props;
    const fg = mode(`${c2}.500`, `${c2}.200`)(props);
    return {
      container: {
        [$bg.variable]: getBg(props),
        [$fg.variable]: `colors.${fg}`,
        paddingStart: "3",
        borderStartWidth: "4px",
        borderStartColor: $fg.reference
      }
    };
  });
  var variantTopAccent = definePartsStyle2((props) => {
    const { colorScheme: c2 } = props;
    const fg = mode(`${c2}.500`, `${c2}.200`)(props);
    return {
      container: {
        [$bg.variable]: getBg(props),
        [$fg.variable]: `colors.${fg}`,
        pt: "2",
        borderTopWidth: "4px",
        borderTopColor: $fg.reference
      }
    };
  });
  var variantSolid = definePartsStyle2((props) => {
    const { colorScheme: c2 } = props;
    const bg = mode(`${c2}.500`, `${c2}.200`)(props);
    const fg = mode(`white`, `gray.900`)(props);
    return {
      container: {
        [$bg.variable]: `colors.${bg}`,
        [$fg.variable]: `colors.${fg}`,
        color: $fg.reference
      }
    };
  });
  var variants = {
    subtle: variantSubtle,
    "left-accent": variantLeftAccent,
    "top-accent": variantTopAccent,
    solid: variantSolid
  };
  var alertTheme = defineMultiStyleConfig2({
    baseStyle: baseStyle2,
    variants,
    defaultProps: {
      variant: "subtle",
      colorScheme: "blue"
    }
  });
  var spacing = {
    px: "1px",
    0.5: "0.125rem",
    1: "0.25rem",
    1.5: "0.375rem",
    2: "0.5rem",
    2.5: "0.625rem",
    3: "0.75rem",
    3.5: "0.875rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
  };
  var largeSizes = {
    max: "max-content",
    min: "min-content",
    full: "100%",
    "3xs": "14rem",
    "2xs": "16rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    "8xl": "90rem",
    prose: "60ch"
  };
  var container = {
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px"
  };
  var sizes = {
    ...spacing,
    ...largeSizes,
    container
  };
  var sizes_default = sizes;
  var isFunction3 = (value) => typeof value === "function";
  function runIfFn3(valueOrFn, ...args) {
    return isFunction3(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }
  var { definePartsStyle: definePartsStyle3, defineMultiStyleConfig: defineMultiStyleConfig3 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
  var baseStyleBadge = defineStyle((props) => {
    return {
      borderRadius: "full",
      border: "0.2em solid",
      borderColor: mode("white", "gray.800")(props)
    };
  });
  var baseStyleExcessLabel = defineStyle((props) => {
    return {
      bg: mode("gray.200", "whiteAlpha.400")(props)
    };
  });
  var baseStyleContainer2 = defineStyle((props) => {
    const { name, theme: theme2 } = props;
    const bg = name ? randomColor({ string: name }) : "gray.400";
    const isBgDark = isDark(bg)(theme2);
    let color3 = "white";
    if (!isBgDark)
      color3 = "gray.800";
    const borderColor = mode("white", "gray.800")(props);
    return {
      bg,
      color: color3,
      borderColor,
      verticalAlign: "top"
    };
  });
  var baseStyle3 = definePartsStyle3((props) => ({
    badge: runIfFn3(baseStyleBadge, props),
    excessLabel: runIfFn3(baseStyleExcessLabel, props),
    container: runIfFn3(baseStyleContainer2, props)
  }));
  function getSize(size2) {
    const themeSize = size2 !== "100%" ? sizes_default[size2] : void 0;
    return definePartsStyle3({
      container: {
        width: size2,
        height: size2,
        fontSize: `calc(${themeSize ?? size2} / 2.5)`
      },
      excessLabel: {
        width: size2,
        height: size2
      },
      label: {
        fontSize: `calc(${themeSize ?? size2} / 2.5)`,
        lineHeight: size2 !== "100%" ? themeSize ?? size2 : void 0
      }
    });
  }
  var sizes2 = {
    "2xs": getSize(4),
    xs: getSize(6),
    sm: getSize(8),
    md: getSize(12),
    lg: getSize(16),
    xl: getSize(24),
    "2xl": getSize(32),
    full: getSize("100%")
  };
  var avatarTheme = defineMultiStyleConfig3({
    baseStyle: baseStyle3,
    sizes: sizes2,
    defaultProps: { size: "md" }
  });
  var baseStyle4 = defineStyle({
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold"
  });
  var variantSolid2 = defineStyle((props) => {
    const { colorScheme: c2, theme: theme2 } = props;
    const dark = transparentize(`${c2}.500`, 0.6)(theme2);
    return {
      bg: mode(`${c2}.500`, dark)(props),
      color: mode(`white`, `whiteAlpha.800`)(props)
    };
  });
  var variantSubtle2 = defineStyle((props) => {
    const { colorScheme: c2, theme: theme2 } = props;
    const darkBg = transparentize(`${c2}.200`, 0.16)(theme2);
    return {
      bg: mode(`${c2}.100`, darkBg)(props),
      color: mode(`${c2}.800`, `${c2}.200`)(props)
    };
  });
  var variantOutline = defineStyle((props) => {
    const { colorScheme: c2, theme: theme2 } = props;
    const darkColor = transparentize(`${c2}.200`, 0.8)(theme2);
    const lightColor = getColor(theme2, `${c2}.500`);
    const color3 = mode(lightColor, darkColor)(props);
    return {
      color: color3,
      boxShadow: `inset 0 0 0px 1px ${color3}`
    };
  });
  var variants2 = {
    solid: variantSolid2,
    subtle: variantSubtle2,
    outline: variantOutline
  };
  var badgeTheme = defineStyleConfig({
    baseStyle: baseStyle4,
    variants: variants2,
    defaultProps: {
      variant: "subtle",
      colorScheme: "gray"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig4, definePartsStyle: definePartsStyle4 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
  var baseStyleLink = defineStyle({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  });
  var baseStyle5 = definePartsStyle4({
    link: baseStyleLink
  });
  var breadcrumbTheme = defineMultiStyleConfig4({
    baseStyle: baseStyle5
  });
  var baseStyle6 = defineStyle({
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      _disabled: {
        bg: "initial"
      }
    }
  });
  var variantGhost = defineStyle((props) => {
    const { colorScheme: c2, theme: theme2 } = props;
    if (c2 === "gray") {
      return {
        color: mode(`inherit`, `whiteAlpha.900`)(props),
        _hover: {
          bg: mode(`gray.100`, `whiteAlpha.200`)(props)
        },
        _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
      };
    }
    const darkHoverBg = transparentize(`${c2}.200`, 0.12)(theme2);
    const darkActiveBg = transparentize(`${c2}.200`, 0.24)(theme2);
    return {
      color: mode(`${c2}.600`, `${c2}.200`)(props),
      bg: "transparent",
      _hover: {
        bg: mode(`${c2}.50`, darkHoverBg)(props)
      },
      _active: {
        bg: mode(`${c2}.100`, darkActiveBg)(props)
      }
    };
  });
  var variantOutline2 = defineStyle((props) => {
    const { colorScheme: c2 } = props;
    const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
    return {
      border: "1px solid",
      borderColor: c2 === "gray" ? borderColor : "currentColor",
      ".chakra-button__group[data-attached] > &:not(:last-of-type)": {
        marginEnd: "-1px"
      },
      ...runIfFn3(variantGhost, props)
    };
  });
  var accessibleColorMap = {
    yellow: {
      bg: "yellow.400",
      color: "black",
      hoverBg: "yellow.500",
      activeBg: "yellow.600"
    },
    cyan: {
      bg: "cyan.400",
      color: "black",
      hoverBg: "cyan.500",
      activeBg: "cyan.600"
    }
  };
  var variantSolid3 = defineStyle((props) => {
    const { colorScheme: c2 } = props;
    if (c2 === "gray") {
      const bg2 = mode(`gray.100`, `whiteAlpha.200`)(props);
      return {
        bg: bg2,
        _hover: {
          bg: mode(`gray.200`, `whiteAlpha.300`)(props),
          _disabled: {
            bg: bg2
          }
        },
        _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
      };
    }
    const {
      bg = `${c2}.500`,
      color: color3 = "white",
      hoverBg = `${c2}.600`,
      activeBg = `${c2}.700`
    } = accessibleColorMap[c2] ?? {};
    const background2 = mode(bg, `${c2}.200`)(props);
    return {
      bg: background2,
      color: mode(color3, `gray.800`)(props),
      _hover: {
        bg: mode(hoverBg, `${c2}.300`)(props),
        _disabled: {
          bg: background2
        }
      },
      _active: { bg: mode(activeBg, `${c2}.400`)(props) }
    };
  });
  var variantLink = defineStyle((props) => {
    const { colorScheme: c2 } = props;
    return {
      padding: 0,
      height: "auto",
      lineHeight: "normal",
      verticalAlign: "baseline",
      color: mode(`${c2}.500`, `${c2}.200`)(props),
      _hover: {
        textDecoration: "underline",
        _disabled: {
          textDecoration: "none"
        }
      },
      _active: {
        color: mode(`${c2}.700`, `${c2}.500`)(props)
      }
    };
  });
  var variantUnstyled = defineStyle({
    bg: "none",
    color: "inherit",
    display: "inline",
    lineHeight: "inherit",
    m: "0",
    p: "0"
  });
  var variants3 = {
    ghost: variantGhost,
    outline: variantOutline2,
    solid: variantSolid3,
    link: variantLink,
    unstyled: variantUnstyled
  };
  var sizes3 = {
    lg: defineStyle({
      h: "12",
      minW: "12",
      fontSize: "lg",
      px: "6"
    }),
    md: defineStyle({
      h: "10",
      minW: "10",
      fontSize: "md",
      px: "4"
    }),
    sm: defineStyle({
      h: "8",
      minW: "8",
      fontSize: "sm",
      px: "3"
    }),
    xs: defineStyle({
      h: "6",
      minW: "6",
      fontSize: "xs",
      px: "2"
    })
  };
  var buttonTheme = defineStyleConfig({
    baseStyle: baseStyle6,
    variants: variants3,
    sizes: sizes3,
    defaultProps: {
      variant: "solid",
      size: "md",
      colorScheme: "gray"
    }
  });
  var { definePartsStyle: definePartsStyle5, defineMultiStyleConfig: defineMultiStyleConfig5 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
  var $size = cssVar("checkbox-size");
  var baseStyleControl = defineStyle((props) => {
    const { colorScheme: c2 } = props;
    return {
      w: $size.reference,
      h: $size.reference,
      transitionProperty: "box-shadow",
      transitionDuration: "normal",
      border: "2px solid",
      borderRadius: "sm",
      borderColor: "inherit",
      color: "white",
      _checked: {
        bg: mode(`${c2}.500`, `${c2}.200`)(props),
        borderColor: mode(`${c2}.500`, `${c2}.200`)(props),
        color: mode("white", "gray.900")(props),
        _hover: {
          bg: mode(`${c2}.600`, `${c2}.300`)(props),
          borderColor: mode(`${c2}.600`, `${c2}.300`)(props)
        },
        _disabled: {
          borderColor: mode("gray.200", "transparent")(props),
          bg: mode("gray.200", "whiteAlpha.300")(props),
          color: mode("gray.500", "whiteAlpha.500")(props)
        }
      },
      _indeterminate: {
        bg: mode(`${c2}.500`, `${c2}.200`)(props),
        borderColor: mode(`${c2}.500`, `${c2}.200`)(props),
        color: mode("white", "gray.900")(props)
      },
      _disabled: {
        bg: mode("gray.100", "whiteAlpha.100")(props),
        borderColor: mode("gray.100", "transparent")(props)
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: mode("red.500", "red.300")(props)
      }
    };
  });
  var baseStyleContainer3 = defineStyle({
    _disabled: { cursor: "not-allowed" }
  });
  var baseStyleLabel = defineStyle({
    userSelect: "none",
    _disabled: { opacity: 0.4 }
  });
  var baseStyleIcon2 = defineStyle({
    transitionProperty: "transform",
    transitionDuration: "normal"
  });
  var baseStyle7 = definePartsStyle5((props) => ({
    icon: baseStyleIcon2,
    container: baseStyleContainer3,
    control: runIfFn3(baseStyleControl, props),
    label: baseStyleLabel
  }));
  var sizes4 = {
    sm: definePartsStyle5({
      control: { [$size.variable]: "sizes.3" },
      label: { fontSize: "sm" },
      icon: { fontSize: "3xs" }
    }),
    md: definePartsStyle5({
      control: { [$size.variable]: "sizes.4" },
      label: { fontSize: "md" },
      icon: { fontSize: "2xs" }
    }),
    lg: definePartsStyle5({
      control: { [$size.variable]: "sizes.5" },
      label: { fontSize: "lg" },
      icon: { fontSize: "2xs" }
    })
  };
  var checkboxTheme = defineMultiStyleConfig5({
    baseStyle: baseStyle7,
    sizes: sizes4,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });
  var $size2 = cssVar2("close-button-size");
  var baseStyle8 = defineStyle((props) => {
    const hoverBg = mode(`blackAlpha.100`, `whiteAlpha.100`)(props);
    const activeBg = mode(`blackAlpha.200`, `whiteAlpha.200`)(props);
    return {
      w: [$size2.reference],
      h: [$size2.reference],
      borderRadius: "md",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
      },
      _hover: { bg: hoverBg },
      _active: { bg: activeBg },
      _focusVisible: {
        boxShadow: "outline"
      }
    };
  });
  var sizes5 = {
    lg: defineStyle({
      [$size2.variable]: "sizes.10",
      fontSize: "md"
    }),
    md: defineStyle({
      [$size2.variable]: "sizes.8",
      fontSize: "xs"
    }),
    sm: defineStyle({
      [$size2.variable]: "sizes.6",
      fontSize: "2xs"
    })
  };
  var closeButtonTheme = defineStyleConfig({
    baseStyle: baseStyle8,
    sizes: sizes5,
    defaultProps: {
      size: "md"
    }
  });
  var { variants: variants4, defaultProps } = badgeTheme;
  var baseStyle9 = defineStyle({
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm"
  });
  var codeTheme = defineStyleConfig({
    baseStyle: baseStyle9,
    variants: variants4,
    defaultProps
  });
  var baseStyle10 = defineStyle({
    w: "100%",
    mx: "auto",
    maxW: "prose",
    px: "4"
  });
  var containerTheme = defineStyleConfig({
    baseStyle: baseStyle10
  });
  var baseStyle11 = defineStyle({
    opacity: 0.6,
    borderColor: "inherit"
  });
  var variantSolid4 = defineStyle({
    borderStyle: "solid"
  });
  var variantDashed = defineStyle({
    borderStyle: "dashed"
  });
  var variants5 = {
    solid: variantSolid4,
    dashed: variantDashed
  };
  var dividerTheme = defineStyleConfig({
    baseStyle: baseStyle11,
    variants: variants5,
    defaultProps: {
      variant: "solid"
    }
  });
  var { definePartsStyle: definePartsStyle6, defineMultiStyleConfig: defineMultiStyleConfig6 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
  function getSize2(value) {
    if (value === "full") {
      return definePartsStyle6({
        dialog: { maxW: "100vw", h: "100vh" }
      });
    }
    return definePartsStyle6({
      dialog: { maxW: value }
    });
  }
  var baseStyleOverlay = defineStyle({
    bg: "blackAlpha.600",
    zIndex: "overlay"
  });
  var baseStyleDialogContainer = defineStyle({
    display: "flex",
    zIndex: "modal",
    justifyContent: "center"
  });
  var baseStyleDialog = defineStyle((props) => {
    const { isFullHeight } = props;
    return {
      ...isFullHeight && { height: "100vh" },
      zIndex: "modal",
      maxH: "100vh",
      bg: mode("white", "gray.700")(props),
      color: "inherit",
      boxShadow: mode("lg", "dark-lg")(props)
    };
  });
  var baseStyleHeader = defineStyle({
    px: "6",
    py: "4",
    fontSize: "xl",
    fontWeight: "semibold"
  });
  var baseStyleCloseButton = defineStyle({
    position: "absolute",
    top: "2",
    insetEnd: "3"
  });
  var baseStyleBody = defineStyle({
    px: "6",
    py: "2",
    flex: "1",
    overflow: "auto"
  });
  var baseStyleFooter = defineStyle({
    px: "6",
    py: "4"
  });
  var baseStyle12 = definePartsStyle6((props) => ({
    overlay: baseStyleOverlay,
    dialogContainer: baseStyleDialogContainer,
    dialog: runIfFn3(baseStyleDialog, props),
    header: baseStyleHeader,
    closeButton: baseStyleCloseButton,
    body: baseStyleBody,
    footer: baseStyleFooter
  }));
  var sizes6 = {
    xs: getSize2("xs"),
    sm: getSize2("md"),
    md: getSize2("lg"),
    lg: getSize2("2xl"),
    xl: getSize2("4xl"),
    full: getSize2("full")
  };
  var drawerTheme = defineMultiStyleConfig6({
    baseStyle: baseStyle12,
    sizes: sizes6,
    defaultProps: {
      size: "xs"
    }
  });
  var { definePartsStyle: definePartsStyle7, defineMultiStyleConfig: defineMultiStyleConfig7 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
  var baseStylePreview = defineStyle({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal"
  });
  var baseStyleInput = defineStyle({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focusVisible: { boxShadow: "outline" },
    _placeholder: { opacity: 0.6 }
  });
  var baseStyleTextarea = defineStyle({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focusVisible: { boxShadow: "outline" },
    _placeholder: { opacity: 0.6 }
  });
  var baseStyle13 = definePartsStyle7({
    preview: baseStylePreview,
    input: baseStyleInput,
    textarea: baseStyleTextarea
  });
  var editableTheme = defineMultiStyleConfig7({
    baseStyle: baseStyle13
  });
  var { definePartsStyle: definePartsStyle8, defineMultiStyleConfig: defineMultiStyleConfig8 } = createMultiStyleConfigHelpers(formAnatomy.keys);
  var baseStyleRequiredIndicator = defineStyle((props) => {
    return {
      marginStart: "1",
      color: mode("red.500", "red.300")(props)
    };
  });
  var baseStyleHelperText = defineStyle((props) => {
    return {
      mt: "2",
      color: mode("gray.600", "whiteAlpha.600")(props),
      lineHeight: "normal",
      fontSize: "sm"
    };
  });
  var baseStyle14 = definePartsStyle8((props) => ({
    container: {
      width: "100%",
      position: "relative"
    },
    requiredIndicator: runIfFn3(baseStyleRequiredIndicator, props),
    helperText: runIfFn3(baseStyleHelperText, props)
  }));
  var formTheme = defineMultiStyleConfig8({
    baseStyle: baseStyle14
  });
  var { definePartsStyle: definePartsStyle9, defineMultiStyleConfig: defineMultiStyleConfig9 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
  var baseStyleText = defineStyle((props) => {
    return {
      color: mode("red.500", "red.300")(props),
      mt: "2",
      fontSize: "sm",
      lineHeight: "normal"
    };
  });
  var baseStyleIcon3 = defineStyle((props) => {
    return {
      marginEnd: "0.5em",
      color: mode("red.500", "red.300")(props)
    };
  });
  var baseStyle15 = definePartsStyle9((props) => ({
    text: runIfFn3(baseStyleText, props),
    icon: runIfFn3(baseStyleIcon3, props)
  }));
  var formErrorTheme = defineMultiStyleConfig9({
    baseStyle: baseStyle15
  });
  var baseStyle16 = defineStyle({
    fontSize: "md",
    marginEnd: "3",
    mb: "2",
    fontWeight: "medium",
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  });
  var formLabelTheme = defineStyleConfig({
    baseStyle: baseStyle16
  });
  var baseStyle17 = defineStyle({
    fontFamily: "heading",
    fontWeight: "bold"
  });
  var sizes7 = {
    "4xl": defineStyle({
      fontSize: ["6xl", null, "7xl"],
      lineHeight: 1
    }),
    "3xl": defineStyle({
      fontSize: ["5xl", null, "6xl"],
      lineHeight: 1
    }),
    "2xl": defineStyle({
      fontSize: ["4xl", null, "5xl"],
      lineHeight: [1.2, null, 1]
    }),
    xl: defineStyle({
      fontSize: ["3xl", null, "4xl"],
      lineHeight: [1.33, null, 1.2]
    }),
    lg: defineStyle({
      fontSize: ["2xl", null, "3xl"],
      lineHeight: [1.33, null, 1.2]
    }),
    md: defineStyle({
      fontSize: "xl",
      lineHeight: 1.2
    }),
    sm: defineStyle({
      fontSize: "md",
      lineHeight: 1.2
    }),
    xs: defineStyle({
      fontSize: "sm",
      lineHeight: 1.2
    })
  };
  var headingTheme = defineStyleConfig({
    baseStyle: baseStyle17,
    sizes: sizes7,
    defaultProps: {
      size: "xl"
    }
  });
  var { definePartsStyle: definePartsStyle10, defineMultiStyleConfig: defineMultiStyleConfig10 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
  var baseStyle18 = definePartsStyle10({
    field: {
      width: "100%",
      minWidth: 0,
      outline: 0,
      position: "relative",
      appearance: "none",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    }
  });
  var size = {
    lg: defineStyle({
      fontSize: "lg",
      px: "4",
      h: "12",
      borderRadius: "md"
    }),
    md: defineStyle({
      fontSize: "md",
      px: "4",
      h: "10",
      borderRadius: "md"
    }),
    sm: defineStyle({
      fontSize: "sm",
      px: "3",
      h: "8",
      borderRadius: "sm"
    }),
    xs: defineStyle({
      fontSize: "xs",
      px: "2",
      h: "6",
      borderRadius: "sm"
    })
  };
  var sizes8 = {
    lg: definePartsStyle10({
      field: size.lg,
      addon: size.lg
    }),
    md: definePartsStyle10({
      field: size.md,
      addon: size.md
    }),
    sm: definePartsStyle10({
      field: size.sm,
      addon: size.sm
    }),
    xs: definePartsStyle10({
      field: size.xs,
      addon: size.xs
    })
  };
  function getDefaults(props) {
    const { focusBorderColor: fc, errorBorderColor: ec } = props;
    return {
      focusBorderColor: fc || mode("blue.500", "blue.300")(props),
      errorBorderColor: ec || mode("red.500", "red.300")(props)
    };
  }
  var variantOutline3 = definePartsStyle10((props) => {
    const { theme: theme2 } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
      field: {
        border: "1px solid",
        borderColor: "inherit",
        bg: "inherit",
        _hover: {
          borderColor: mode("gray.300", "whiteAlpha.400")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme2, ec),
          boxShadow: `0 0 0 1px ${getColor(theme2, ec)}`
        },
        _focusVisible: {
          zIndex: 1,
          borderColor: getColor(theme2, fc),
          boxShadow: `0 0 0 1px ${getColor(theme2, fc)}`
        }
      },
      addon: {
        border: "1px solid",
        borderColor: mode("inherit", "whiteAlpha.50")(props),
        bg: mode("gray.100", "whiteAlpha.300")(props)
      }
    };
  });
  var variantFilled = definePartsStyle10((props) => {
    const { theme: theme2 } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
      field: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props),
        _hover: {
          bg: mode("gray.200", "whiteAlpha.100")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme2, ec)
        },
        _focusVisible: {
          bg: "transparent",
          borderColor: getColor(theme2, fc)
        }
      },
      addon: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props)
      }
    };
  });
  var variantFlushed = definePartsStyle10((props) => {
    const { theme: theme2 } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
      field: {
        borderBottom: "1px solid",
        borderColor: "inherit",
        borderRadius: "0",
        px: "0",
        bg: "transparent",
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme2, ec),
          boxShadow: `0px 1px 0px 0px ${getColor(theme2, ec)}`
        },
        _focusVisible: {
          borderColor: getColor(theme2, fc),
          boxShadow: `0px 1px 0px 0px ${getColor(theme2, fc)}`
        }
      },
      addon: {
        borderBottom: "2px solid",
        borderColor: "inherit",
        borderRadius: "0",
        px: "0",
        bg: "transparent"
      }
    };
  });
  var variantUnstyled2 = definePartsStyle10({
    field: {
      bg: "transparent",
      px: "0",
      height: "auto"
    },
    addon: {
      bg: "transparent",
      px: "0",
      height: "auto"
    }
  });
  var variants6 = {
    outline: variantOutline3,
    filled: variantFilled,
    flushed: variantFlushed,
    unstyled: variantUnstyled2
  };
  var inputTheme = defineMultiStyleConfig10({
    baseStyle: baseStyle18,
    sizes: sizes8,
    variants: variants6,
    defaultProps: {
      size: "md",
      variant: "outline"
    }
  });
  var baseStyle19 = defineStyle((props) => {
    return {
      bg: mode("gray.100", "whiteAlpha")(props),
      borderRadius: "md",
      borderWidth: "1px",
      borderBottomWidth: "3px",
      fontSize: "0.8em",
      fontWeight: "bold",
      lineHeight: "normal",
      px: "0.4em",
      whiteSpace: "nowrap"
    };
  });
  var kbdTheme = defineStyleConfig({
    baseStyle: baseStyle19
  });
  var baseStyle20 = defineStyle({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  });
  var linkTheme = defineStyleConfig({
    baseStyle: baseStyle20
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig11, definePartsStyle: definePartsStyle11 } = createMultiStyleConfigHelpers(listAnatomy.keys);
  var baseStyleIcon4 = defineStyle({
    marginEnd: "2",
    display: "inline",
    verticalAlign: "text-bottom"
  });
  var baseStyle21 = definePartsStyle11({
    icon: baseStyleIcon4
  });
  var listTheme = defineMultiStyleConfig11({
    baseStyle: baseStyle21
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig12, definePartsStyle: definePartsStyle12 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
  var baseStyleList = defineStyle((props) => {
    return {
      bg: mode("#fff", "gray.700")(props),
      boxShadow: mode("sm", "dark-lg")(props),
      color: "inherit",
      minW: "3xs",
      py: "2",
      zIndex: 1,
      borderRadius: "md",
      borderWidth: "1px"
    };
  });
  var baseStyleItem = defineStyle((props) => {
    return {
      py: "1.5",
      px: "3",
      transitionProperty: "background",
      transitionDuration: "ultra-fast",
      transitionTimingFunction: "ease-in",
      _focus: {
        bg: mode("gray.100", "whiteAlpha.100")(props)
      },
      _active: {
        bg: mode("gray.200", "whiteAlpha.200")(props)
      },
      _expanded: {
        bg: mode("gray.100", "whiteAlpha.100")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    };
  });
  var baseStyleGroupTitle = defineStyle({
    mx: 4,
    my: 2,
    fontWeight: "semibold",
    fontSize: "sm"
  });
  var baseStyleCommand = defineStyle({
    opacity: 0.6
  });
  var baseStyleDivider = defineStyle({
    border: 0,
    borderBottom: "1px solid",
    borderColor: "inherit",
    my: "2",
    opacity: 0.6
  });
  var baseStyleButton2 = defineStyle({
    transitionProperty: "common",
    transitionDuration: "normal"
  });
  var baseStyle22 = definePartsStyle12((props) => ({
    button: baseStyleButton2,
    list: runIfFn3(baseStyleList, props),
    item: runIfFn3(baseStyleItem, props),
    groupTitle: baseStyleGroupTitle,
    command: baseStyleCommand,
    divider: baseStyleDivider
  }));
  var menuTheme = defineMultiStyleConfig12({
    baseStyle: baseStyle22
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig13, definePartsStyle: definePartsStyle13 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
  var baseStyleOverlay2 = defineStyle({
    bg: "blackAlpha.600",
    zIndex: "modal"
  });
  var baseStyleDialogContainer2 = defineStyle((props) => {
    const { isCentered, scrollBehavior } = props;
    return {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      alignItems: isCentered ? "center" : "flex-start",
      overflow: scrollBehavior === "inside" ? "hidden" : "auto"
    };
  });
  var baseStyleDialog2 = defineStyle((props) => {
    const { scrollBehavior } = props;
    return {
      borderRadius: "md",
      bg: mode("white", "gray.700")(props),
      color: "inherit",
      my: "16",
      zIndex: "modal",
      maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
      boxShadow: mode("lg", "dark-lg")(props)
    };
  });
  var baseStyleHeader2 = defineStyle({
    px: "6",
    py: "4",
    fontSize: "xl",
    fontWeight: "semibold"
  });
  var baseStyleCloseButton2 = defineStyle({
    position: "absolute",
    top: "2",
    insetEnd: "3"
  });
  var baseStyleBody2 = defineStyle((props) => {
    const { scrollBehavior } = props;
    return {
      px: "6",
      py: "2",
      flex: "1",
      overflow: scrollBehavior === "inside" ? "auto" : void 0
    };
  });
  var baseStyleFooter2 = defineStyle({
    px: "6",
    py: "4"
  });
  var baseStyle23 = definePartsStyle13((props) => ({
    overlay: baseStyleOverlay2,
    dialogContainer: runIfFn3(baseStyleDialogContainer2, props),
    dialog: runIfFn3(baseStyleDialog2, props),
    header: baseStyleHeader2,
    closeButton: baseStyleCloseButton2,
    body: runIfFn3(baseStyleBody2, props),
    footer: baseStyleFooter2
  }));
  function getSize3(value) {
    if (value === "full") {
      return definePartsStyle13({
        dialog: {
          maxW: "100vw",
          minH: "$100vh",
          my: "0",
          borderRadius: "0"
        }
      });
    }
    return definePartsStyle13({
      dialog: { maxW: value }
    });
  }
  var sizes9 = {
    xs: getSize3("xs"),
    sm: getSize3("sm"),
    md: getSize3("md"),
    lg: getSize3("lg"),
    xl: getSize3("xl"),
    "2xl": getSize3("2xl"),
    "3xl": getSize3("3xl"),
    "4xl": getSize3("4xl"),
    "5xl": getSize3("5xl"),
    "6xl": getSize3("6xl"),
    full: getSize3("full")
  };
  var modalTheme = defineMultiStyleConfig13({
    baseStyle: baseStyle23,
    sizes: sizes9,
    defaultProps: { size: "md" }
  });
  var typography2 = {
    letterSpacings: {
      tighter: "-0.05em",
      tight: "-0.025em",
      normal: "0",
      wide: "0.025em",
      wider: "0.05em",
      widest: "0.1em"
    },
    lineHeights: {
      normal: "normal",
      none: 1,
      shorter: 1.25,
      short: 1.375,
      base: 1.5,
      tall: 1.625,
      taller: "2",
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem"
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900
    },
    fonts: {
      heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
      body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
      mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
    },
    fontSizes: {
      "3xs": "0.45rem",
      "2xs": "0.625rem",
      xs: "0.75rem",
      sm: "0.875rem",
      md: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
      "2xl": "1.5rem",
      "3xl": "1.875rem",
      "4xl": "2.25rem",
      "5xl": "3rem",
      "6xl": "3.75rem",
      "7xl": "4.5rem",
      "8xl": "6rem",
      "9xl": "8rem"
    }
  };
  var typography_default = typography2;
  var { defineMultiStyleConfig: defineMultiStyleConfig14, definePartsStyle: definePartsStyle14 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
  var $stepperWidth = cssVar2("number-input-stepper-width");
  var $inputPadding = cssVar2("number-input-input-padding");
  var inputPaddingValue = calc2($stepperWidth).add("0.5rem").toString();
  var baseStyleRoot = defineStyle({
    [$stepperWidth.variable]: "sizes.6",
    [$inputPadding.variable]: inputPaddingValue
  });
  var baseStyleField = defineStyle((props) => {
    var _a7;
    return ((_a7 = runIfFn3(inputTheme.baseStyle, props)) == null ? void 0 : _a7.field) ?? {};
  });
  var baseStyleStepperGroup = defineStyle({
    width: [$stepperWidth.reference]
  });
  var baseStyleStepper = defineStyle((props) => {
    return {
      borderStart: "1px solid",
      borderStartColor: mode("inherit", "whiteAlpha.300")(props),
      color: mode("inherit", "whiteAlpha.800")(props),
      _active: {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    };
  });
  var baseStyle24 = definePartsStyle14((props) => ({
    root: baseStyleRoot,
    field: baseStyleField,
    stepperGroup: baseStyleStepperGroup,
    stepper: runIfFn3(baseStyleStepper, props) ?? {}
  }));
  function getSize4(size2) {
    var _a7, _b3;
    const sizeStyle = (_a7 = inputTheme.sizes) == null ? void 0 : _a7[size2];
    const radius = {
      lg: "md",
      md: "md",
      sm: "sm",
      xs: "sm"
    };
    const _fontSize = ((_b3 = sizeStyle.field) == null ? void 0 : _b3.fontSize) ?? "md";
    const fontSize = typography_default.fontSizes[_fontSize];
    return definePartsStyle14({
      field: {
        ...sizeStyle.field,
        paddingInlineEnd: $inputPadding.reference,
        verticalAlign: "top"
      },
      stepper: {
        fontSize: calc2(fontSize).multiply(0.75).toString(),
        _first: {
          borderTopEndRadius: radius[size2]
        },
        _last: {
          borderBottomEndRadius: radius[size2],
          mt: "-1px",
          borderTopWidth: 1
        }
      }
    });
  }
  var sizes10 = {
    xs: getSize4("xs"),
    sm: getSize4("sm"),
    md: getSize4("md"),
    lg: getSize4("lg")
  };
  var numberInputTheme = defineMultiStyleConfig14({
    baseStyle: baseStyle24,
    sizes: sizes10,
    variants: inputTheme.variants,
    defaultProps: inputTheme.defaultProps
  });
  var _a;
  var baseStyle25 = defineStyle({
    ...(_a = inputTheme.baseStyle) == null ? void 0 : _a.field,
    textAlign: "center"
  });
  var sizes11 = {
    lg: defineStyle({
      fontSize: "lg",
      w: 12,
      h: 12,
      borderRadius: "md"
    }),
    md: defineStyle({
      fontSize: "md",
      w: 10,
      h: 10,
      borderRadius: "md"
    }),
    sm: defineStyle({
      fontSize: "sm",
      w: 8,
      h: 8,
      borderRadius: "sm"
    }),
    xs: defineStyle({
      fontSize: "xs",
      w: 6,
      h: 6,
      borderRadius: "sm"
    })
  };
  var _a2;
  var variants7 = {
    outline: defineStyle((props) => {
      var _a7, _b3;
      return ((_b3 = runIfFn3((_a7 = inputTheme.variants) == null ? void 0 : _a7.outline, props)) == null ? void 0 : _b3.field) ?? {};
    }),
    flushed: defineStyle((props) => {
      var _a7, _b3;
      return ((_b3 = runIfFn3((_a7 = inputTheme.variants) == null ? void 0 : _a7.flushed, props)) == null ? void 0 : _b3.field) ?? {};
    }),
    filled: defineStyle((props) => {
      var _a7, _b3;
      return ((_b3 = runIfFn3((_a7 = inputTheme.variants) == null ? void 0 : _a7.filled, props)) == null ? void 0 : _b3.field) ?? {};
    }),
    unstyled: ((_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) ?? {}
  };
  var pinInputTheme = defineStyleConfig({
    baseStyle: baseStyle25,
    sizes: sizes11,
    variants: variants7,
    defaultProps: inputTheme.defaultProps
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig15, definePartsStyle: definePartsStyle15 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
  var $popperBg = cssVar2("popper-bg");
  var $arrowBg = cssVar2("popper-arrow-bg");
  var $arrowShadowColor = cssVar2("popper-arrow-shadow-color");
  var baseStylePopper = defineStyle({ zIndex: 10 });
  var baseStyleContent = defineStyle((props) => {
    const bg = mode("white", "gray.700")(props);
    const shadowColor = mode("gray.200", "whiteAlpha.300")(props);
    return {
      [$popperBg.variable]: `colors.${bg}`,
      bg: $popperBg.reference,
      [$arrowBg.variable]: $popperBg.reference,
      [$arrowShadowColor.variable]: `colors.${shadowColor}`,
      width: "xs",
      border: "1px solid",
      borderColor: "inherit",
      borderRadius: "md",
      boxShadow: "sm",
      zIndex: "inherit",
      _focusVisible: {
        outline: 0,
        boxShadow: "outline"
      }
    };
  });
  var baseStyleHeader3 = defineStyle({
    px: 3,
    py: 2,
    borderBottomWidth: "1px"
  });
  var baseStyleBody3 = defineStyle({
    px: 3,
    py: 2
  });
  var baseStyleFooter3 = defineStyle({
    px: 3,
    py: 2,
    borderTopWidth: "1px"
  });
  var baseStyleCloseButton3 = defineStyle({
    position: "absolute",
    borderRadius: "md",
    top: 1,
    insetEnd: 2,
    padding: 2
  });
  var baseStyle26 = definePartsStyle15((props) => ({
    popper: baseStylePopper,
    content: baseStyleContent(props),
    header: baseStyleHeader3,
    body: baseStyleBody3,
    footer: baseStyleFooter3,
    closeButton: baseStyleCloseButton3
  }));
  var popoverTheme = defineMultiStyleConfig15({
    baseStyle: baseStyle26
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig16, definePartsStyle: definePartsStyle16 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
  var filledStyle = defineStyle((props) => {
    const { colorScheme: c2, theme: t2, isIndeterminate, hasStripe } = props;
    const stripeStyle = mode(generateStripe(), generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
    const bgColor = mode(`${c2}.500`, `${c2}.200`)(props);
    const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t2, bgColor)} 50%,
    transparent 100%
  )`;
    const addStripe = !isIndeterminate && hasStripe;
    return {
      ...addStripe && stripeStyle,
      ...isIndeterminate ? { bgImage: gradient } : { bgColor }
    };
  });
  var baseStyleLabel2 = defineStyle({
    lineHeight: "1",
    fontSize: "0.25em",
    fontWeight: "bold",
    color: "white"
  });
  var baseStyleTrack = defineStyle((props) => {
    return {
      bg: mode("gray.100", "whiteAlpha.300")(props)
    };
  });
  var baseStyleFilledTrack = defineStyle((props) => {
    return {
      transitionProperty: "common",
      transitionDuration: "slow",
      ...filledStyle(props)
    };
  });
  var baseStyle27 = definePartsStyle16((props) => ({
    label: baseStyleLabel2,
    filledTrack: baseStyleFilledTrack(props),
    track: baseStyleTrack(props)
  }));
  var sizes12 = {
    xs: definePartsStyle16({
      track: { h: "1" }
    }),
    sm: definePartsStyle16({
      track: { h: "2" }
    }),
    md: definePartsStyle16({
      track: { h: "3" }
    }),
    lg: definePartsStyle16({
      track: { h: "4" }
    })
  };
  var progressTheme = defineMultiStyleConfig16({
    sizes: sizes12,
    baseStyle: baseStyle27,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig17, definePartsStyle: definePartsStyle17 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
  var baseStyleControl2 = defineStyle((props) => {
    var _a7;
    const controlStyle = (_a7 = runIfFn3(checkboxTheme.baseStyle, props)) == null ? void 0 : _a7.control;
    return {
      ...controlStyle,
      borderRadius: "full",
      _checked: {
        ...controlStyle == null ? void 0 : controlStyle["_checked"],
        _before: {
          content: `""`,
          display: "inline-block",
          pos: "relative",
          w: "50%",
          h: "50%",
          borderRadius: "50%",
          bg: "currentColor"
        }
      }
    };
  });
  var baseStyle28 = definePartsStyle17((props) => {
    var _a7, _b3, _c3, _d3;
    return {
      label: (_b3 = (_a7 = checkboxTheme).baseStyle) == null ? void 0 : _b3.call(_a7, props).label,
      container: (_d3 = (_c3 = checkboxTheme).baseStyle) == null ? void 0 : _d3.call(_c3, props).container,
      control: baseStyleControl2(props)
    };
  });
  var sizes13 = {
    md: definePartsStyle17({
      control: { w: "4", h: "4" },
      label: { fontSize: "md" }
    }),
    lg: definePartsStyle17({
      control: { w: "5", h: "5" },
      label: { fontSize: "lg" }
    }),
    sm: definePartsStyle17({
      control: { width: "3", height: "3" },
      label: { fontSize: "sm" }
    })
  };
  var radioTheme = defineMultiStyleConfig17({
    baseStyle: baseStyle28,
    sizes: sizes13,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig18, definePartsStyle: definePartsStyle18 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
  var baseStyleField2 = defineStyle((props) => {
    var _a7;
    return {
      ...(_a7 = inputTheme.baseStyle) == null ? void 0 : _a7.field,
      bg: mode("white", "gray.700")(props),
      appearance: "none",
      paddingBottom: "1px",
      lineHeight: "normal",
      "> option, > optgroup": {
        bg: mode("white", "gray.700")(props)
      }
    };
  });
  var baseStyleIcon5 = defineStyle({
    width: "6",
    height: "100%",
    insetEnd: "2",
    position: "relative",
    color: "currentColor",
    fontSize: "xl",
    _disabled: {
      opacity: 0.5
    }
  });
  var baseStyle29 = definePartsStyle18((props) => ({
    field: baseStyleField2(props),
    icon: baseStyleIcon5
  }));
  var iconSpacing = defineStyle({
    paddingInlineEnd: "8"
  });
  var _a3;
  var _b;
  var _c;
  var _d;
  var _e;
  var _f;
  var _g;
  var _h;
  var sizes14 = {
    lg: {
      ...(_a3 = inputTheme.sizes) == null ? void 0 : _a3.lg,
      field: {
        ...(_b = inputTheme.sizes) == null ? void 0 : _b.lg.field,
        ...iconSpacing
      }
    },
    md: {
      ...(_c = inputTheme.sizes) == null ? void 0 : _c.md,
      field: {
        ...(_d = inputTheme.sizes) == null ? void 0 : _d.md.field,
        ...iconSpacing
      }
    },
    sm: {
      ...(_e = inputTheme.sizes) == null ? void 0 : _e.sm,
      field: {
        ...(_f = inputTheme.sizes) == null ? void 0 : _f.sm.field,
        ...iconSpacing
      }
    },
    xs: {
      ...(_g = inputTheme.sizes) == null ? void 0 : _g.xs,
      field: {
        ...(_h = inputTheme.sizes) == null ? void 0 : _h.xs.field,
        ...iconSpacing
      },
      icon: {
        insetEnd: "1"
      }
    }
  };
  var selectTheme = defineMultiStyleConfig18({
    baseStyle: baseStyle29,
    sizes: sizes14,
    variants: inputTheme.variants,
    defaultProps: inputTheme.defaultProps
  });
  var $startColor = cssVar("skeleton-start-color");
  var $endColor = cssVar("skeleton-end-color");
  var baseStyle30 = defineStyle((props) => {
    const defaultStartColor = mode("gray.100", "gray.800")(props);
    const defaultEndColor = mode("gray.400", "gray.600")(props);
    const {
      startColor = defaultStartColor,
      endColor = defaultEndColor,
      theme: theme2
    } = props;
    const start = getColor(theme2, startColor);
    const end = getColor(theme2, endColor);
    return {
      [$startColor.variable]: start,
      [$endColor.variable]: end,
      opacity: 0.7,
      borderRadius: "2px",
      borderColor: start,
      background: end
    };
  });
  var skeletonTheme = defineStyleConfig({
    baseStyle: baseStyle30
  });
  var baseStyle31 = defineStyle((props) => ({
    borderRadius: "md",
    fontWeight: "semibold",
    _focusVisible: {
      boxShadow: "outline",
      padding: "4",
      position: "fixed",
      top: "6",
      insetStart: "6",
      bg: mode("white", "gray.700")(props)
    }
  }));
  var skipLinkTheme = defineStyleConfig({
    baseStyle: baseStyle31
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig19, definePartsStyle: definePartsStyle19 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
  var $thumbSize = cssVar("slider-thumb-size");
  var $trackSize = cssVar("slider-track-size");
  var baseStyleContainer4 = defineStyle((props) => {
    const { orientation } = props;
    return {
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      _disabled: {
        opacity: 0.6,
        cursor: "default",
        pointerEvents: "none"
      },
      ...orient({
        orientation,
        vertical: { h: "100%" },
        horizontal: { w: "100%" }
      })
    };
  });
  var baseStyleTrack2 = defineStyle((props) => {
    const orientationStyles = orient({
      orientation: props.orientation,
      horizontal: { h: $trackSize.reference },
      vertical: { w: $trackSize.reference }
    });
    return {
      ...orientationStyles,
      overflow: "hidden",
      borderRadius: "sm",
      bg: mode("gray.200", "whiteAlpha.200")(props),
      _disabled: {
        bg: mode("gray.300", "whiteAlpha.300")(props)
      }
    };
  });
  var baseStyleThumb = defineStyle((props) => {
    const { orientation } = props;
    const orientationStyle = orient({
      orientation,
      vertical: {
        left: "50%",
        transform: `translateX(-50%)`,
        _active: {
          transform: `translateX(-50%) scale(1.15)`
        }
      },
      horizontal: {
        top: "50%",
        transform: `translateY(-50%)`,
        _active: {
          transform: `translateY(-50%) scale(1.15)`
        }
      }
    });
    return {
      ...orientationStyle,
      w: $thumbSize.reference,
      h: $thumbSize.reference,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      position: "absolute",
      outline: 0,
      zIndex: 1,
      borderRadius: "full",
      bg: "white",
      boxShadow: "base",
      border: "1px solid",
      borderColor: "transparent",
      transitionProperty: "transform",
      transitionDuration: "normal",
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        bg: "gray.300"
      }
    };
  });
  var baseStyleFilledTrack2 = defineStyle((props) => {
    const { colorScheme: c2 } = props;
    return {
      width: "inherit",
      height: "inherit",
      bg: mode(`${c2}.500`, `${c2}.200`)(props)
    };
  });
  var baseStyle32 = definePartsStyle19((props) => ({
    container: baseStyleContainer4(props),
    track: baseStyleTrack2(props),
    thumb: baseStyleThumb(props),
    filledTrack: baseStyleFilledTrack2(props)
  }));
  var sizeLg = definePartsStyle19({
    container: {
      [$thumbSize.variable]: `sizes.4`,
      [$trackSize.variable]: `sizes.1`
    }
  });
  var sizeMd = definePartsStyle19({
    container: {
      [$thumbSize.variable]: `sizes.3.5`,
      [$trackSize.variable]: `sizes.1`
    }
  });
  var sizeSm = definePartsStyle19({
    container: {
      [$thumbSize.variable]: `sizes.2.5`,
      [$trackSize.variable]: `sizes.0.5`
    }
  });
  var sizes15 = {
    lg: sizeLg,
    md: sizeMd,
    sm: sizeSm
  };
  var sliderTheme = defineMultiStyleConfig19({
    baseStyle: baseStyle32,
    sizes: sizes15,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });
  var $size3 = cssVar2("spinner-size");
  var baseStyle33 = defineStyle({
    width: [$size3.reference],
    height: [$size3.reference]
  });
  var sizes16 = {
    xs: defineStyle({
      [$size3.variable]: "sizes.3"
    }),
    sm: defineStyle({
      [$size3.variable]: "sizes.4"
    }),
    md: defineStyle({
      [$size3.variable]: "sizes.6"
    }),
    lg: defineStyle({
      [$size3.variable]: "sizes.8"
    }),
    xl: defineStyle({
      [$size3.variable]: "sizes.12"
    })
  };
  var spinnerTheme = defineStyleConfig({
    baseStyle: baseStyle33,
    sizes: sizes16,
    defaultProps: {
      size: "md"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig20, definePartsStyle: definePartsStyle20 } = createMultiStyleConfigHelpers(statAnatomy.keys);
  var baseStyleLabel3 = defineStyle({
    fontWeight: "medium"
  });
  var baseStyleHelpText = defineStyle({
    opacity: 0.8,
    marginBottom: "2"
  });
  var baseStyleNumber = defineStyle({
    verticalAlign: "baseline",
    fontWeight: "semibold"
  });
  var baseStyleIcon6 = defineStyle({
    marginEnd: 1,
    w: "3.5",
    h: "3.5",
    verticalAlign: "middle"
  });
  var baseStyle34 = definePartsStyle20({
    container: {},
    label: baseStyleLabel3,
    helpText: baseStyleHelpText,
    number: baseStyleNumber,
    icon: baseStyleIcon6
  });
  var sizes17 = {
    md: definePartsStyle20({
      label: { fontSize: "sm" },
      helpText: { fontSize: "sm" },
      number: { fontSize: "2xl" }
    })
  };
  var statTheme = defineMultiStyleConfig20({
    baseStyle: baseStyle34,
    sizes: sizes17,
    defaultProps: {
      size: "md"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig21, definePartsStyle: definePartsStyle21 } = createMultiStyleConfigHelpers(switchAnatomy.keys);
  var $width = cssVar2("switch-track-width");
  var $height = cssVar2("switch-track-height");
  var $diff = cssVar2("switch-track-diff");
  var diffValue = calc2.subtract($width, $height);
  var $translateX = cssVar2("switch-thumb-x");
  var baseStyleTrack3 = defineStyle((props) => {
    const { colorScheme: c2 } = props;
    return {
      borderRadius: "full",
      p: "0.5",
      width: [$width.reference],
      height: [$height.reference],
      transitionProperty: "common",
      transitionDuration: "fast",
      bg: mode("gray.300", "whiteAlpha.400")(props),
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _checked: {
        bg: mode(`${c2}.500`, `${c2}.200`)(props)
      }
    };
  });
  var baseStyleThumb2 = defineStyle({
    bg: "white",
    transitionProperty: "transform",
    transitionDuration: "normal",
    borderRadius: "inherit",
    width: [$height.reference],
    height: [$height.reference],
    _checked: {
      transform: `translateX(${$translateX.reference})`
    }
  });
  var baseStyle35 = definePartsStyle21((props) => ({
    container: {
      [$diff.variable]: diffValue,
      [$translateX.variable]: $diff.reference,
      _rtl: {
        [$translateX.variable]: calc2($diff).negate().toString()
      }
    },
    track: baseStyleTrack3(props),
    thumb: baseStyleThumb2
  }));
  var sizes18 = {
    sm: definePartsStyle21({
      container: {
        [$width.variable]: "1.375rem",
        [$height.variable]: "sizes.3"
      }
    }),
    md: definePartsStyle21({
      container: {
        [$width.variable]: "1.875rem",
        [$height.variable]: "sizes.4"
      }
    }),
    lg: definePartsStyle21({
      container: {
        [$width.variable]: "2.875rem",
        [$height.variable]: "sizes.6"
      }
    })
  };
  var switchTheme = defineMultiStyleConfig21({
    baseStyle: baseStyle35,
    sizes: sizes18,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig22, definePartsStyle: definePartsStyle22 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
  var baseStyle36 = definePartsStyle22({
    table: {
      fontVariantNumeric: "lining-nums tabular-nums",
      borderCollapse: "collapse",
      width: "full"
    },
    th: {
      fontFamily: "heading",
      fontWeight: "bold",
      textTransform: "uppercase",
      letterSpacing: "wider",
      textAlign: "start"
    },
    td: {
      textAlign: "start"
    },
    caption: {
      mt: 4,
      fontFamily: "heading",
      textAlign: "center",
      fontWeight: "medium"
    }
  });
  var numericStyles = defineStyle({
    "&[data-is-numeric=true]": {
      textAlign: "end"
    }
  });
  var variantSimple = definePartsStyle22((props) => {
    const { colorScheme: c2 } = props;
    return {
      th: {
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
        ...numericStyles
      },
      td: {
        borderBottom: "1px",
        borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
        ...numericStyles
      },
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: { borderBottomWidth: 0 }
          }
        }
      }
    };
  });
  var variantStripe = definePartsStyle22((props) => {
    const { colorScheme: c2 } = props;
    return {
      th: {
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
        ...numericStyles
      },
      td: {
        borderBottom: "1px",
        borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
        ...numericStyles
      },
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tbody: {
        tr: {
          "&:nth-of-type(odd)": {
            "th, td": {
              borderBottomWidth: "1px",
              borderColor: mode(`${c2}.100`, `${c2}.700`)(props)
            },
            td: {
              background: mode(`${c2}.100`, `${c2}.700`)(props)
            }
          }
        }
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: { borderBottomWidth: 0 }
          }
        }
      }
    };
  });
  var variants8 = {
    simple: variantSimple,
    striped: variantStripe,
    unstyled: defineStyle({})
  };
  var sizes19 = {
    sm: definePartsStyle22({
      th: {
        px: "4",
        py: "1",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "4",
        py: "2",
        fontSize: "sm",
        lineHeight: "4"
      },
      caption: {
        px: "4",
        py: "2",
        fontSize: "xs"
      }
    }),
    md: definePartsStyle22({
      th: {
        px: "6",
        py: "3",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "6",
        py: "4",
        lineHeight: "5"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "sm"
      }
    }),
    lg: definePartsStyle22({
      th: {
        px: "8",
        py: "4",
        lineHeight: "5",
        fontSize: "sm"
      },
      td: {
        px: "8",
        py: "5",
        lineHeight: "6"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "md"
      }
    })
  };
  var tableTheme = defineMultiStyleConfig22({
    baseStyle: baseStyle36,
    variants: variants8,
    sizes: sizes19,
    defaultProps: {
      variant: "simple",
      size: "md",
      colorScheme: "gray"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig23, definePartsStyle: definePartsStyle23 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
  var baseStyleRoot2 = defineStyle((props) => {
    const { orientation } = props;
    return {
      display: orientation === "vertical" ? "flex" : "block"
    };
  });
  var baseStyleTab = defineStyle((props) => {
    const { isFitted } = props;
    return {
      flex: isFitted ? 1 : void 0,
      transitionProperty: "common",
      transitionDuration: "normal",
      _focusVisible: {
        zIndex: 1,
        boxShadow: "outline"
      },
      _disabled: {
        cursor: "not-allowed",
        opacity: 0.4
      }
    };
  });
  var baseStyleTablist = defineStyle((props) => {
    const { align = "start", orientation } = props;
    const alignments = {
      end: "flex-end",
      center: "center",
      start: "flex-start"
    };
    return {
      justifyContent: alignments[align],
      flexDirection: orientation === "vertical" ? "column" : "row"
    };
  });
  var baseStyleTabpanel = defineStyle({
    p: 4
  });
  var baseStyle37 = definePartsStyle23((props) => ({
    root: baseStyleRoot2(props),
    tab: baseStyleTab(props),
    tablist: baseStyleTablist(props),
    tabpanel: baseStyleTabpanel
  }));
  var sizes20 = {
    sm: definePartsStyle23({
      tab: {
        py: 1,
        px: 4,
        fontSize: "sm"
      }
    }),
    md: definePartsStyle23({
      tab: {
        fontSize: "md",
        py: 2,
        px: 4
      }
    }),
    lg: definePartsStyle23({
      tab: {
        fontSize: "lg",
        py: 3,
        px: 4
      }
    })
  };
  var variantLine = definePartsStyle23((props) => {
    const { colorScheme: c2, orientation } = props;
    const isVertical = orientation === "vertical";
    const borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
    const marginProp = isVertical ? "marginStart" : "marginBottom";
    return {
      tablist: {
        [borderProp]: "2px solid",
        borderColor: "inherit"
      },
      tab: {
        [borderProp]: "2px solid",
        borderColor: "transparent",
        [marginProp]: "-2px",
        _selected: {
          color: mode(`${c2}.600`, `${c2}.300`)(props),
          borderColor: "currentColor"
        },
        _active: {
          bg: mode("gray.200", "whiteAlpha.300")(props)
        },
        _disabled: {
          _active: { bg: "none" }
        }
      }
    };
  });
  var variantEnclosed = definePartsStyle23((props) => {
    const { colorScheme: c2 } = props;
    return {
      tab: {
        borderTopRadius: "md",
        border: "1px solid",
        borderColor: "transparent",
        mb: "-1px",
        _selected: {
          color: mode(`${c2}.600`, `${c2}.300`)(props),
          borderColor: "inherit",
          borderBottomColor: mode(`white`, `gray.800`)(props)
        }
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  });
  var variantEnclosedColored = definePartsStyle23((props) => {
    const { colorScheme: c2 } = props;
    return {
      tab: {
        border: "1px solid",
        borderColor: "inherit",
        bg: mode(`gray.50`, `whiteAlpha.50`)(props),
        mb: "-1px",
        _notLast: {
          marginEnd: "-1px"
        },
        _selected: {
          bg: mode("#fff", "gray.800")(props),
          color: mode(`${c2}.600`, `${c2}.300`)(props),
          borderColor: "inherit",
          borderTopColor: "currentColor",
          borderBottomColor: "transparent"
        }
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  });
  var variantSoftRounded = definePartsStyle23((props) => {
    const { colorScheme: c2, theme: theme2 } = props;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: "gray.600",
        _selected: {
          color: getColor(theme2, `${c2}.700`),
          bg: getColor(theme2, `${c2}.100`)
        }
      }
    };
  });
  var variantSolidRounded = definePartsStyle23((props) => {
    const { colorScheme: c2 } = props;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: mode("gray.600", "inherit")(props),
        _selected: {
          color: mode(`#fff`, "gray.800")(props),
          bg: mode(`${c2}.600`, `${c2}.300`)(props)
        }
      }
    };
  });
  var variantUnstyled3 = definePartsStyle23({});
  var variants9 = {
    line: variantLine,
    enclosed: variantEnclosed,
    "enclosed-colored": variantEnclosedColored,
    "soft-rounded": variantSoftRounded,
    "solid-rounded": variantSolidRounded,
    unstyled: variantUnstyled3
  };
  var tabsTheme = defineMultiStyleConfig23({
    baseStyle: baseStyle37,
    sizes: sizes20,
    variants: variants9,
    defaultProps: {
      size: "md",
      variant: "line",
      colorScheme: "blue"
    }
  });
  var { defineMultiStyleConfig: defineMultiStyleConfig24, definePartsStyle: definePartsStyle24 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
  var baseStyleContainer5 = defineStyle({
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    borderRadius: "md",
    _focusVisible: {
      boxShadow: "outline"
    }
  });
  var baseStyleLabel4 = defineStyle({
    lineHeight: 1.2,
    overflow: "visible"
  });
  var baseStyleCloseButton4 = defineStyle({
    fontSize: "lg",
    w: "5",
    h: "5",
    transitionProperty: "common",
    transitionDuration: "normal",
    borderRadius: "full",
    marginStart: "1.5",
    marginEnd: "-1",
    opacity: 0.5,
    _disabled: {
      opacity: 0.4
    },
    _focusVisible: {
      boxShadow: "outline",
      bg: "rgba(0, 0, 0, 0.14)"
    },
    _hover: {
      opacity: 0.8
    },
    _active: {
      opacity: 1
    }
  });
  var baseStyle38 = definePartsStyle24({
    container: baseStyleContainer5,
    label: baseStyleLabel4,
    closeButton: baseStyleCloseButton4
  });
  var sizes21 = {
    sm: definePartsStyle24({
      container: {
        minH: "5",
        minW: "5",
        fontSize: "xs",
        px: "2"
      },
      closeButton: {
        marginEnd: "-2px",
        marginStart: "0.35rem"
      }
    }),
    md: definePartsStyle24({
      container: {
        minH: "6",
        minW: "6",
        fontSize: "sm",
        px: "2"
      }
    }),
    lg: definePartsStyle24({
      container: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3"
      }
    })
  };
  var variants10 = {
    subtle: definePartsStyle24((props) => {
      var _a7;
      return {
        container: (_a7 = badgeTheme.variants) == null ? void 0 : _a7.subtle(props)
      };
    }),
    solid: definePartsStyle24((props) => {
      var _a7;
      return {
        container: (_a7 = badgeTheme.variants) == null ? void 0 : _a7.solid(props)
      };
    }),
    outline: definePartsStyle24((props) => {
      var _a7;
      return {
        container: (_a7 = badgeTheme.variants) == null ? void 0 : _a7.outline(props)
      };
    })
  };
  var tagTheme = defineMultiStyleConfig24({
    variants: variants10,
    baseStyle: baseStyle38,
    sizes: sizes21,
    defaultProps: {
      size: "md",
      variant: "subtle",
      colorScheme: "gray"
    }
  });
  var _a4;
  var baseStyle39 = defineStyle({
    ...(_a4 = inputTheme.baseStyle) == null ? void 0 : _a4.field,
    paddingY: "2",
    minHeight: "20",
    lineHeight: "short",
    verticalAlign: "top"
  });
  var _a5;
  var variants11 = {
    outline: defineStyle((props) => {
      var _a7;
      return ((_a7 = inputTheme.variants) == null ? void 0 : _a7.outline(props).field) ?? {};
    }),
    flushed: defineStyle((props) => {
      var _a7;
      return ((_a7 = inputTheme.variants) == null ? void 0 : _a7.flushed(props).field) ?? {};
    }),
    filled: defineStyle((props) => {
      var _a7;
      return ((_a7 = inputTheme.variants) == null ? void 0 : _a7.filled(props).field) ?? {};
    }),
    unstyled: ((_a5 = inputTheme.variants) == null ? void 0 : _a5.unstyled.field) ?? {}
  };
  var _a6;
  var _b2;
  var _c2;
  var _d2;
  var sizes22 = {
    xs: ((_a6 = inputTheme.sizes) == null ? void 0 : _a6.xs.field) ?? {},
    sm: ((_b2 = inputTheme.sizes) == null ? void 0 : _b2.sm.field) ?? {},
    md: ((_c2 = inputTheme.sizes) == null ? void 0 : _c2.md.field) ?? {},
    lg: ((_d2 = inputTheme.sizes) == null ? void 0 : _d2.lg.field) ?? {}
  };
  var textareaTheme = defineStyleConfig({
    baseStyle: baseStyle39,
    sizes: sizes22,
    variants: variants11,
    defaultProps: {
      size: "md",
      variant: "outline"
    }
  });
  var $bg2 = cssVar2("tooltip-bg");
  var $fg2 = cssVar2("tooltip-fg");
  var $arrowBg2 = cssVar2("popper-arrow-bg");
  var baseStyle40 = defineStyle((props) => {
    const bg = mode("gray.700", "gray.300")(props);
    const fg = mode("whiteAlpha.900", "gray.900")(props);
    return {
      bg: $bg2.reference,
      color: $fg2.reference,
      [$bg2.variable]: `colors.${bg}`,
      [$fg2.variable]: `colors.${fg}`,
      [$arrowBg2.variable]: $bg2.reference,
      px: "2",
      py: "0.5",
      borderRadius: "sm",
      fontWeight: "medium",
      fontSize: "sm",
      boxShadow: "md",
      maxW: "xs",
      zIndex: "tooltip"
    };
  });
  var tooltipTheme = defineStyleConfig({
    baseStyle: baseStyle40
  });
  var components = {
    Accordion: accordionTheme,
    Alert: alertTheme,
    Avatar: avatarTheme,
    Badge: badgeTheme,
    Breadcrumb: breadcrumbTheme,
    Button: buttonTheme,
    Checkbox: checkboxTheme,
    CloseButton: closeButtonTheme,
    Code: codeTheme,
    Container: containerTheme,
    Divider: dividerTheme,
    Drawer: drawerTheme,
    Editable: editableTheme,
    Form: formTheme,
    FormError: formErrorTheme,
    FormLabel: formLabelTheme,
    Heading: headingTheme,
    Input: inputTheme,
    Kbd: kbdTheme,
    Link: linkTheme,
    List: listTheme,
    Menu: menuTheme,
    Modal: modalTheme,
    NumberInput: numberInputTheme,
    PinInput: pinInputTheme,
    Popover: popoverTheme,
    Progress: progressTheme,
    Radio: radioTheme,
    Select: selectTheme,
    Skeleton: skeletonTheme,
    SkipLink: skipLinkTheme,
    Slider: sliderTheme,
    Spinner: spinnerTheme,
    Stat: statTheme,
    Switch: switchTheme,
    Table: tableTheme,
    Tabs: tabsTheme,
    Tag: tagTheme,
    Textarea: textareaTheme,
    Tooltip: tooltipTheme
  };
  var borders = {
    none: 0,
    "1px": "1px solid",
    "2px": "2px solid",
    "4px": "4px solid",
    "8px": "8px solid"
  };
  var borders_default = borders;
  var breakpoints4 = {
    base: "0em",
    sm: "30em",
    md: "48em",
    lg: "62em",
    xl: "80em",
    "2xl": "96em"
  };
  var breakpoints_default = breakpoints4;
  var colors = {
    transparent: "transparent",
    current: "currentColor",
    black: "#000000",
    white: "#FFFFFF",
    whiteAlpha: {
      50: "rgba(255, 255, 255, 0.04)",
      100: "rgba(255, 255, 255, 0.06)",
      200: "rgba(255, 255, 255, 0.08)",
      300: "rgba(255, 255, 255, 0.16)",
      400: "rgba(255, 255, 255, 0.24)",
      500: "rgba(255, 255, 255, 0.36)",
      600: "rgba(255, 255, 255, 0.48)",
      700: "rgba(255, 255, 255, 0.64)",
      800: "rgba(255, 255, 255, 0.80)",
      900: "rgba(255, 255, 255, 0.92)"
    },
    blackAlpha: {
      50: "rgba(0, 0, 0, 0.04)",
      100: "rgba(0, 0, 0, 0.06)",
      200: "rgba(0, 0, 0, 0.08)",
      300: "rgba(0, 0, 0, 0.16)",
      400: "rgba(0, 0, 0, 0.24)",
      500: "rgba(0, 0, 0, 0.36)",
      600: "rgba(0, 0, 0, 0.48)",
      700: "rgba(0, 0, 0, 0.64)",
      800: "rgba(0, 0, 0, 0.80)",
      900: "rgba(0, 0, 0, 0.92)"
    },
    gray: {
      50: "#F7FAFC",
      100: "#EDF2F7",
      200: "#E2E8F0",
      300: "#CBD5E0",
      400: "#A0AEC0",
      500: "#718096",
      600: "#4A5568",
      700: "#2D3748",
      800: "#1A202C",
      900: "#171923"
    },
    red: {
      50: "#FFF5F5",
      100: "#FED7D7",
      200: "#FEB2B2",
      300: "#FC8181",
      400: "#F56565",
      500: "#E53E3E",
      600: "#C53030",
      700: "#9B2C2C",
      800: "#822727",
      900: "#63171B"
    },
    orange: {
      50: "#FFFAF0",
      100: "#FEEBC8",
      200: "#FBD38D",
      300: "#F6AD55",
      400: "#ED8936",
      500: "#DD6B20",
      600: "#C05621",
      700: "#9C4221",
      800: "#7B341E",
      900: "#652B19"
    },
    yellow: {
      50: "#FFFFF0",
      100: "#FEFCBF",
      200: "#FAF089",
      300: "#F6E05E",
      400: "#ECC94B",
      500: "#D69E2E",
      600: "#B7791F",
      700: "#975A16",
      800: "#744210",
      900: "#5F370E"
    },
    green: {
      50: "#F0FFF4",
      100: "#C6F6D5",
      200: "#9AE6B4",
      300: "#68D391",
      400: "#48BB78",
      500: "#38A169",
      600: "#2F855A",
      700: "#276749",
      800: "#22543D",
      900: "#1C4532"
    },
    teal: {
      50: "#E6FFFA",
      100: "#B2F5EA",
      200: "#81E6D9",
      300: "#4FD1C5",
      400: "#38B2AC",
      500: "#319795",
      600: "#2C7A7B",
      700: "#285E61",
      800: "#234E52",
      900: "#1D4044"
    },
    blue: {
      50: "#ebf8ff",
      100: "#bee3f8",
      200: "#90cdf4",
      300: "#63b3ed",
      400: "#4299e1",
      500: "#3182ce",
      600: "#2b6cb0",
      700: "#2c5282",
      800: "#2a4365",
      900: "#1A365D"
    },
    cyan: {
      50: "#EDFDFD",
      100: "#C4F1F9",
      200: "#9DECF9",
      300: "#76E4F7",
      400: "#0BC5EA",
      500: "#00B5D8",
      600: "#00A3C4",
      700: "#0987A0",
      800: "#086F83",
      900: "#065666"
    },
    purple: {
      50: "#FAF5FF",
      100: "#E9D8FD",
      200: "#D6BCFA",
      300: "#B794F4",
      400: "#9F7AEA",
      500: "#805AD5",
      600: "#6B46C1",
      700: "#553C9A",
      800: "#44337A",
      900: "#322659"
    },
    pink: {
      50: "#FFF5F7",
      100: "#FED7E2",
      200: "#FBB6CE",
      300: "#F687B3",
      400: "#ED64A6",
      500: "#D53F8C",
      600: "#B83280",
      700: "#97266D",
      800: "#702459",
      900: "#521B41"
    },
    linkedin: {
      50: "#E8F4F9",
      100: "#CFEDFB",
      200: "#9BDAF3",
      300: "#68C7EC",
      400: "#34B3E4",
      500: "#00A0DC",
      600: "#008CC9",
      700: "#0077B5",
      800: "#005E93",
      900: "#004471"
    },
    facebook: {
      50: "#E8F4F9",
      100: "#D9DEE9",
      200: "#B7C2DA",
      300: "#6482C0",
      400: "#4267B2",
      500: "#385898",
      600: "#314E89",
      700: "#29487D",
      800: "#223B67",
      900: "#1E355B"
    },
    messenger: {
      50: "#D0E6FF",
      100: "#B9DAFF",
      200: "#A2CDFF",
      300: "#7AB8FF",
      400: "#2E90FF",
      500: "#0078FF",
      600: "#0063D1",
      700: "#0052AC",
      800: "#003C7E",
      900: "#002C5C"
    },
    whatsapp: {
      50: "#dffeec",
      100: "#b9f5d0",
      200: "#90edb3",
      300: "#65e495",
      400: "#3cdd78",
      500: "#22c35e",
      600: "#179848",
      700: "#0c6c33",
      800: "#01421c",
      900: "#001803"
    },
    twitter: {
      50: "#E5F4FD",
      100: "#C8E9FB",
      200: "#A8DCFA",
      300: "#83CDF7",
      400: "#57BBF5",
      500: "#1DA1F2",
      600: "#1A94DA",
      700: "#1681BF",
      800: "#136B9E",
      900: "#0D4D71"
    },
    telegram: {
      50: "#E3F2F9",
      100: "#C5E4F3",
      200: "#A2D4EC",
      300: "#7AC1E4",
      400: "#47A9DA",
      500: "#0088CC",
      600: "#007AB8",
      700: "#006BA1",
      800: "#005885",
      900: "#003F5E"
    }
  };
  var colors_default = colors;
  var radii = {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
  };
  var radius_default = radii;
  var shadows = {
    xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
    sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
    base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
    md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
    lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
    xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
    "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
    outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
    inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
    none: "none",
    "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
  };
  var shadows_default = shadows;
  var transitionProperty = {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
  };
  var transitionTimingFunction = {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
  };
  var transitionDuration = {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
  };
  var transition2 = {
    property: transitionProperty,
    easing: transitionTimingFunction,
    duration: transitionDuration
  };
  var transition_default = transition2;
  var zIndices = {
    hide: -1,
    auto: "auto",
    base: 0,
    docked: 10,
    dropdown: 1e3,
    sticky: 1100,
    banner: 1200,
    overlay: 1300,
    modal: 1400,
    popover: 1500,
    skipLink: 1600,
    toast: 1700,
    tooltip: 1800
  };
  var z_index_default = zIndices;
  var blur = {
    none: 0,
    sm: "4px",
    base: "8px",
    md: "12px",
    lg: "16px",
    xl: "24px",
    "2xl": "40px",
    "3xl": "64px"
  };
  var blur_default = blur;
  var foundations = {
    breakpoints: breakpoints_default,
    zIndices: z_index_default,
    radii: radius_default,
    blur: blur_default,
    colors: colors_default,
    ...typography_default,
    sizes: sizes_default,
    shadows: shadows_default,
    space: spacing,
    borders: borders_default,
    transition: transition_default
  };
  var semanticTokens = {
    colors: {
      "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
      "chakra-body-bg": { _light: "white", _dark: "gray.800" },
      "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
      "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
    }
  };
  var styles = {
    global: {
      body: {
        fontFamily: "body",
        color: "chakra-body-text",
        bg: "chakra-body-bg",
        transitionProperty: "background-color",
        transitionDuration: "normal",
        lineHeight: "base"
      },
      "*::placeholder": {
        color: "chakra-placeholder-color"
      },
      "*, *::before, &::after": {
        borderColor: "chakra-border-color",
        wordWrap: "break-word"
      }
    }
  };
  var direction = "ltr";
  var config = {
    useSystemColorMode: false,
    initialColorMode: "light",
    cssVarPrefix: "chakra"
  };
  var theme = {
    semanticTokens,
    direction,
    ...foundations,
    components,
    styles,
    config
  };

  // ../../node_modules/@chakra-ui/toast/dist/index.esm.js
  var import_react65 = __toESM(require_react());
  var import_react66 = __toESM(require_react());

  // ../../node_modules/@chakra-ui/react-use-timeout/dist/index.esm.js
  var import_react64 = __toESM(require_react());
  function useTimeout(callback, delay) {
    const fn = useCallbackRef(callback);
    (0, import_react64.useEffect)(() => {
      if (delay == null)
        return void 0;
      let timeoutId = null;
      timeoutId = window.setTimeout(() => {
        fn();
      }, delay);
      return () => {
        if (timeoutId) {
          window.clearTimeout(timeoutId);
        }
      };
    }, [delay, fn]);
  }

  // ../../node_modules/@chakra-ui/toast/dist/index.esm.js
  var import_react67 = __toESM(require_react());
  var import_react68 = __toESM(require_react());
  function runIfFn4(valueOrFn, ...args) {
    return isFunction4(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }
  var isFunction4 = (value) => typeof value === "function";
  var findById = (arr, id) => arr.find((toast) => toast.id === id);
  function findToast(toasts, id) {
    const position2 = getToastPosition(toasts, id);
    const index = position2 ? toasts[position2].findIndex((toast) => toast.id === id) : -1;
    return {
      position: position2,
      index
    };
  }
  function getToastPosition(toasts, id) {
    for (const [position2, values] of Object.entries(toasts)) {
      if (findById(values, id)) {
        return position2;
      }
    }
  }
  function getToastStyle(position2) {
    const isRighty = position2.includes("right");
    const isLefty = position2.includes("left");
    let alignItems = "center";
    if (isRighty)
      alignItems = "flex-end";
    if (isLefty)
      alignItems = "flex-start";
    return {
      display: "flex",
      flexDirection: "column",
      alignItems
    };
  }
  function getToastListStyle(position2) {
    const isTopOrBottom = position2 === "top" || position2 === "bottom";
    const margin = isTopOrBottom ? "0 auto" : void 0;
    const top = position2.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
    const bottom = position2.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
    const right = !position2.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
    const left = !position2.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
    return {
      position: "fixed",
      zIndex: 5500,
      pointerEvents: "none",
      display: "flex",
      flexDirection: "column",
      margin,
      top,
      bottom,
      right,
      left
    };
  }
  var initialState = {
    top: [],
    "top-left": [],
    "top-right": [],
    "bottom-left": [],
    bottom: [],
    "bottom-right": []
  };
  var toastStore = createStore(initialState);
  function createStore(initialState2) {
    let state2 = initialState2;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (setStateFn) => {
      state2 = setStateFn(state2);
      listeners.forEach((l) => l());
    };
    return {
      getState: () => state2,
      subscribe: (listener) => {
        listeners.add(listener);
        return () => {
          setState(() => initialState2);
          listeners.delete(listener);
        };
      },
      removeToast: (id, position2) => {
        setState((prevState) => ({
          ...prevState,
          [position2]: prevState[position2].filter((toast) => toast.id != id)
        }));
      },
      notify: (message, options) => {
        const toast = createToast(message, options);
        const { position: position2, id } = toast;
        setState((prevToasts) => {
          const isTop = position2.includes("top");
          const toasts = isTop ? [toast, ...prevToasts[position2] ?? []] : [...prevToasts[position2] ?? [], toast];
          return {
            ...prevToasts,
            [position2]: toasts
          };
        });
        return id;
      },
      update: (id, options) => {
        if (!id)
          return;
        setState((prevState) => {
          const nextState = { ...prevState };
          const { position: position2, index } = findToast(nextState, id);
          if (position2 && index !== -1) {
            nextState[position2][index] = {
              ...nextState[position2][index],
              ...options,
              message: createRenderToast(options)
            };
          }
          return nextState;
        });
      },
      closeAll: ({ positions } = {}) => {
        setState((prev) => {
          const allPositions = [
            "bottom",
            "bottom-right",
            "bottom-left",
            "top",
            "top-left",
            "top-right"
          ];
          const positionsToClose = positions ?? allPositions;
          return positionsToClose.reduce((acc, position2) => {
            acc[position2] = prev[position2].map((toast) => ({
              ...toast,
              requestClose: true
            }));
            return acc;
          }, { ...prev });
        });
      },
      close: (id) => {
        setState((prevState) => {
          const position2 = getToastPosition(prevState, id);
          if (!position2)
            return prevState;
          return {
            ...prevState,
            [position2]: prevState[position2].map((toast) => {
              if (toast.id == id) {
                return {
                  ...toast,
                  requestClose: true
                };
              }
              return toast;
            })
          };
        });
      },
      isActive: (id) => Boolean(findToast(toastStore.getState(), id).position)
    };
  }
  var counter2 = 0;
  function createToast(message, options = {}) {
    counter2 += 1;
    const id = options.id ?? counter2;
    const position2 = options.position ?? "bottom";
    return {
      id,
      message,
      position: position2,
      duration: options.duration,
      onCloseComplete: options.onCloseComplete,
      onRequestRemove: () => toastStore.removeToast(String(id), position2),
      status: options.status,
      requestClose: false,
      containerStyle: options.containerStyle
    };
  }
  var Toast = (props) => {
    const {
      status,
      variant = "solid",
      id,
      title,
      isClosable,
      onClose,
      description,
      icon
    } = props;
    const ids = id ? {
      root: `toast-${id}`,
      title: `toast-${id}-title`,
      description: `toast-${id}-description`
    } : void 0;
    return /* @__PURE__ */ import_react65.default.createElement(Alert, {
      addRole: false,
      status,
      variant,
      id: ids == null ? void 0 : ids.root,
      alignItems: "start",
      borderRadius: "md",
      boxShadow: "lg",
      paddingEnd: 8,
      textAlign: "start",
      width: "auto"
    }, /* @__PURE__ */ import_react65.default.createElement(AlertIcon, null, icon), /* @__PURE__ */ import_react65.default.createElement(chakra.div, {
      flex: "1",
      maxWidth: "100%"
    }, title && /* @__PURE__ */ import_react65.default.createElement(AlertTitle, {
      id: ids == null ? void 0 : ids.title
    }, title), description && /* @__PURE__ */ import_react65.default.createElement(AlertDescription, {
      id: ids == null ? void 0 : ids.description,
      display: "block"
    }, description)), isClosable && /* @__PURE__ */ import_react65.default.createElement(CloseButton, {
      size: "sm",
      onClick: onClose,
      position: "absolute",
      insetEnd: 1,
      top: 1
    }));
  };
  function createRenderToast(options = {}) {
    const { render, toastComponent: ToastComponent2 = Toast } = options;
    const renderToast = (props) => {
      if (typeof render === "function") {
        return render(props);
      }
      return /* @__PURE__ */ import_react65.default.createElement(ToastComponent2, {
        ...props,
        ...options
      });
    };
    return renderToast;
  }
  var toastMotionVariants = {
    initial: (props) => {
      const { position: position2 } = props;
      const dir = ["top", "bottom"].includes(position2) ? "y" : "x";
      let factor = ["top-right", "bottom-right"].includes(position2) ? 1 : -1;
      if (position2 === "bottom")
        factor = 1;
      return {
        opacity: 0,
        [dir]: factor * 24
      };
    },
    animate: {
      opacity: 1,
      y: 0,
      x: 0,
      scale: 1,
      transition: {
        duration: 0.4,
        ease: [0.4, 0, 0.2, 1]
      }
    },
    exit: {
      opacity: 0,
      scale: 0.85,
      transition: {
        duration: 0.2,
        ease: [0.4, 0, 1, 1]
      }
    }
  };
  var ToastComponent = (0, import_react67.memo)((props) => {
    const {
      id,
      message,
      onCloseComplete,
      onRequestRemove,
      requestClose = false,
      position: position2 = "bottom",
      duration = 5e3,
      containerStyle,
      motionVariants = toastMotionVariants,
      toastSpacing = "0.5rem"
    } = props;
    const [delay, setDelay] = (0, import_react67.useState)(duration);
    const isPresent2 = useIsPresent();
    useUpdateEffect(() => {
      if (!isPresent2) {
        onCloseComplete == null ? void 0 : onCloseComplete();
      }
    }, [isPresent2]);
    useUpdateEffect(() => {
      setDelay(duration);
    }, [duration]);
    const onMouseEnter = () => setDelay(null);
    const onMouseLeave = () => setDelay(duration);
    const close = () => {
      if (isPresent2)
        onRequestRemove();
    };
    (0, import_react67.useEffect)(() => {
      if (isPresent2 && requestClose) {
        onRequestRemove();
      }
    }, [isPresent2, requestClose, onRequestRemove]);
    useTimeout(close, delay);
    const containerStyles = (0, import_react67.useMemo)(() => ({
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: toastSpacing,
      ...containerStyle
    }), [containerStyle, toastSpacing]);
    const toastStyle = (0, import_react67.useMemo)(() => getToastStyle(position2), [position2]);
    return /* @__PURE__ */ import_react65.default.createElement(motion.li, {
      layout: true,
      className: "chakra-toast",
      variants: motionVariants,
      initial: "initial",
      animate: "animate",
      exit: "exit",
      onHoverStart: onMouseEnter,
      onHoverEnd: onMouseLeave,
      custom: { position: position2 },
      style: toastStyle
    }, /* @__PURE__ */ import_react65.default.createElement(chakra.div, {
      role: "status",
      "aria-atomic": "true",
      className: "chakra-toast__inner",
      __css: containerStyles
    }, runIfFn4(message, { id, onClose: close })));
  });
  ToastComponent.displayName = "ToastComponent";
  var ToastProvider = (props) => {
    const state2 = (0, import_react68.useSyncExternalStore)(toastStore.subscribe, toastStore.getState, toastStore.getState);
    const {
      children,
      motionVariants,
      component: Component2 = ToastComponent,
      portalProps
    } = props;
    const stateKeys = Object.keys(state2);
    const toastList = stateKeys.map((position2) => {
      const toasts = state2[position2];
      return /* @__PURE__ */ import_react65.default.createElement("ul", {
        role: "region",
        "aria-live": "polite",
        key: position2,
        id: `chakra-toast-manager-${position2}`,
        style: getToastListStyle(position2)
      }, /* @__PURE__ */ import_react65.default.createElement(AnimatePresence, {
        initial: false
      }, toasts.map((toast) => /* @__PURE__ */ import_react65.default.createElement(Component2, {
        key: toast.id,
        motionVariants,
        ...toast
      }))));
    });
    return /* @__PURE__ */ import_react65.default.createElement(import_react65.default.Fragment, null, children, /* @__PURE__ */ import_react65.default.createElement(Portal, {
      ...portalProps
    }, toastList));
  };

  // ../../node_modules/@chakra-ui/provider/dist/index.esm.js
  var import_react69 = __toESM(require_react());
  var ChakraProvider = (props) => {
    const {
      children,
      colorModeManager,
      portalZIndex,
      resetCSS = true,
      theme: theme2 = {},
      environment,
      cssVarsRoot
    } = props;
    const _children = /* @__PURE__ */ import_react69.default.createElement(EnvironmentProvider, {
      environment
    }, children);
    return /* @__PURE__ */ import_react69.default.createElement(ThemeProvider, {
      theme: theme2,
      cssVarsRoot
    }, /* @__PURE__ */ import_react69.default.createElement(ColorModeProvider, {
      colorModeManager,
      options: theme2.config
    }, resetCSS ? /* @__PURE__ */ import_react69.default.createElement(CSSReset, null) : /* @__PURE__ */ import_react69.default.createElement(CSSPolyfill, null), /* @__PURE__ */ import_react69.default.createElement(GlobalStyle, null), portalZIndex ? /* @__PURE__ */ import_react69.default.createElement(PortalManager, {
      zIndex: portalZIndex
    }, _children) : _children));
  };

  // ../../node_modules/@chakra-ui/react/dist/index.esm.js
  function ChakraProvider2({
    children,
    theme: theme2 = theme,
    toastOptions,
    ...restProps
  }) {
    return /* @__PURE__ */ import_react70.default.createElement(ChakraProvider, {
      theme: theme2,
      ...restProps
    }, children, /* @__PURE__ */ import_react70.default.createElement(ToastProvider, {
      ...toastOptions
    }));
  }

  // src/index.jsx
  var import_scrawl = __toESM(require_dist());
  var App = () => {
    const callback = (0, import_react71.useCallback)((state2) => console.log({ state: state2 }), []);
    return /* @__PURE__ */ import_react71.default.createElement(ChakraProvider2, null, /* @__PURE__ */ import_react71.default.createElement(import_scrawl.default, {
      callback
    }), /* @__PURE__ */ import_react71.default.createElement(Flex, {
      m: "2",
      fontSize: "lg",
      gap: 2,
      flexDir: "column"
    }, /* @__PURE__ */ import_react71.default.createElement(Text, null, "Scrawl Pixel Editor by ", /* @__PURE__ */ import_react71.default.createElement(Link, {
      color: "green",
      href: "https://simonhildebrandt"
    }, "Simon Hildebrandt"), "."), /* @__PURE__ */ import_react71.default.createElement(Text, null, "Source available ", /* @__PURE__ */ import_react71.default.createElement(Link, {
      color: "green",
      href: "https://github.com/simonhildebrandt/scrawl"
    }, "here"), ".")));
  };
  import_client.default.createRoot(document.getElementById("app")).render(/* @__PURE__ */ import_react71.default.createElement(App, null));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
